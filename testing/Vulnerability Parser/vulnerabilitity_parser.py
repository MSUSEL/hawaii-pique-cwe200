import json
import os

def parse_sarif(file_path):
    with open(file_path, 'r') as f:
        sarif_data = json.load(f)
    
    # List to store results
    results = []

    # Traverse the SARIF runs
    for run in sarif_data.get('runs', []):
        # Each run contains results which has ruleId (CWE) and locations (File and Line number)
        for result in run.get('results', []):
            cwe = None
            file_name = None
            file_path = None
            line_number = None
            
            # Extract CWE information from the associated rule
            rule_id = result.get('ruleId', 'N/A')
            for rule in run['tool']['driver'].get('rules', []):
                if rule['id'] == rule_id:
                    cwe = rule.get('properties', {}).get('cwe', 'N/A')
                    break
            
            # Extract file location and line number
            locations = result.get('locations', [])
            if locations:
                physical_location = locations[0].get('physicalLocation', {})
                file_path = physical_location.get('artifactLocation', {}).get('uri', 'N/A')
                file_name = os.path.basename(file_path)
                line_number = physical_location.get('region', {}).get('startLine', 'N/A')
            
            # Append to results if data is found
            if cwe and file_name and line_number:
                results.append([cwe, file_name, file_path, line_number])
    
    return results

def format_for_google_sheets(parsed_data):
    formatted_data = "CWE\tFile\tFile Path\tLine Number\n"
    for row in parsed_data:
        formatted_data += f"{row[0]}\t{row[1]}\t{row[2]}\t{row[3]}\n"
    return formatted_data

def save_to_file(output_data, output_file):
    with open(output_file, 'w') as f:
        f.write(output_data)

if __name__ == "__main__":
    # Path to SARIF file
    sarif_file = os.path.join('backend', 'Files', 'rocketmq-rocketmq-all-5.3.1', 'result.sarif')
    
    # Parse SARIF
    parsed_data = parse_sarif(sarif_file)
    
    # Format for Google Sheets (Tab-separated)
    google_sheets_output = format_for_google_sheets(parsed_data)
    
    # Output to file
    output_file = os.path.join('testing', 'Vulnerability Parser', 'codeql_results_google_sheets.txt')
    save_to_file(google_sheets_output, output_file)
    
    print(f"Results saved to {output_file}")
