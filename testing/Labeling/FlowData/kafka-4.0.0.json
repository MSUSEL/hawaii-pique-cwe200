{
  "209": [
    {
      "resultIndex": 0,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-22/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.5017558932304382
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-23/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.32183322310447693
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.2865467071533203
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.28777164220809937
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.34656116366386414
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-27/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.35803741216659546
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.2759443521499634
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-30/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.2653185725212097
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-31/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.18682041764259338
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-32/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.1240631565451622
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-33/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.315246045589447
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-34/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-34/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-34/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "Yes",
          "probability": 0.5097458958625793
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-35/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-35/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-35/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.32648956775665283
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-36/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-36/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-36/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.3343225121498108
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-37/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-37/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-37/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.39864227175712585
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-38/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-38/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-38/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "No",
          "probability": 0.3915151059627533
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "SmokeTestClient.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-39/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "File",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 1,
              "variableName": "file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-39/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "String",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            },
            {
              "step": 2,
              "variableName": "\"Error deleting \" + file.getAbsolutePath()",
              "uri": "kafka-4.0.0/streams/upgrade-system-tests-39/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
              "type": "",
              "code": "            try {\n                Utils.delete(file);\n            } catch (final IOException e) {\n                System.out.println(\"Error deleting \" + file.getAbsolutePath());\n                e.printStackTrace(System.out);\n            }\n        });"
            }
          ],
          "label": "Yes",
          "probability": 0.5463115572929382
        }
      ]
    }
  ],
  "214": [
    {
      "resultIndex": 17,
      "fileName": "Shell.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "                if (nodeSpec.latencyMs() < 0 || nodeSpec.rateLimitKbit() < 0) {\n                    throw new RuntimeException(\"Expected non-negative values for latencyMs and rateLimitKbit, but got \" + nodeSpec);\n                } else {\n                    enableTrafficControl(platform, device, nodeSpec.latencyMs(), nodeSpec.rateLimitKbit());\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Constructs the appropriate \"tc\" commands to apply latency and rate limiting, if they are non zero.\n     */\n    private void enableTrafficControl(Platform platform, String networkDevice, int delayMs, int rateLimitKbps) throws IOException {\n        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 3,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Object[] [[]] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Stream [<element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "consumer",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "delay::add",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": ":... [post update] : new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 9,
              "variableName": "delay::add",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 10,
              "variableName": "delay",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 11,
              "variableName": "delay.toArray(new String[0])",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 12,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 14,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 15,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 16,
              "variableName": "String... cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "Yes",
          "probability": 0.8116430044174194
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 3,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 4,
              "variableName": "new String[] : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 5,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 7,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 8,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 9,
              "variableName": "String... cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.37768349051475525
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        if (nodeSpec.networkDevice().isEmpty()) {\n            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {\n                if (!networkInterface.isLoopback()) {\n                    devices.add(networkInterface.getName());\n                }\n            }\n        } else {"
            },
            {
              "step": 1,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 12,
              "variableName": "String... cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.03284026309847832
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "                }\n            }\n        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }"
            },
            {
              "step": 1,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 12,
              "variableName": "String... cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "cmd",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.0371956042945385
        }
      ]
    },
    {
      "resultIndex": 18,
      "fileName": "LeaderElectionCommand.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "\n        String jsonString = stringifyTopicPartitions(new HashSet<>(partitions));\n\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 2,
              "variableName": "file.toPath()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 3,
              "variableName": "tempTopicPartitionFile(singletonList(topicPartition))",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            cluster.startBroker(broker3);\n            TestUtils.waitForOnlineBroker(client, broker3);\n\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),"
            },
            {
              "step": 4,
              "variableName": "topicPartitionPath",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 5,
              "variableName": "topicPartitionPath.toString()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 6,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()"
            },
            {
              "step": 7,
              "variableName": "String... args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 8,
              "variableName": "args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "Yes",
          "probability": 0.9399465918540955
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 1,
              "variableName": "file.toPath()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 2,
              "variableName": "tempTopicPartitionFile(singletonList(topicPartition))",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            cluster.startBroker(broker3);\n            TestUtils.waitForOnlineBroker(client, broker3);\n\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),"
            },
            {
              "step": 3,
              "variableName": "topicPartitionPath",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 4,
              "variableName": "topicPartitionPath.toString()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 5,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()"
            },
            {
              "step": 6,
              "variableName": "String... args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 7,
              "variableName": "args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "Yes",
          "probability": 0.9450613260269165
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {\n        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n"
            },
            {
              "step": 1,
              "variableName": "file",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 2,
              "variableName": "file.toPath()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 3,
              "variableName": "tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs)",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "    public void testAdminConfigCustomTimeouts() throws Exception {\n        String defaultApiTimeoutMs = String.valueOf(110000);\n        String requestTimeoutMs = String.valueOf(55000);\n        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit("
            },
            {
              "step": 4,
              "variableName": "adminConfigPath",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 5,
              "variableName": "adminConfigPath.toString()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 6,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()"
            },
            {
              "step": 7,
              "variableName": "String... args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 8,
              "variableName": "args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "Yes",
          "probability": 0.993134617805481
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 1,
              "variableName": "file.toPath()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 2,
              "variableName": "tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs)",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "    public void testAdminConfigCustomTimeouts() throws Exception {\n        String defaultApiTimeoutMs = String.valueOf(110000);\n        String requestTimeoutMs = String.valueOf(55000);\n        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit("
            },
            {
              "step": 3,
              "variableName": "adminConfigPath",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 4,
              "variableName": "adminConfigPath.toString()",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 5,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()"
            },
            {
              "step": 6,
              "variableName": "String... args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 7,
              "variableName": "args",
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "Yes",
          "probability": 0.9848189353942871
        }
      ]
    },
    {
      "resultIndex": 19,
      "fileName": "BasicPlatform.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "                if (nodeSpec.latencyMs() < 0 || nodeSpec.rateLimitKbit() < 0) {\n                    throw new RuntimeException(\"Expected non-negative values for latencyMs and rateLimitKbit, but got \" + nodeSpec);\n                } else {\n                    enableTrafficControl(platform, device, nodeSpec.latencyMs(), nodeSpec.rateLimitKbit());\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Constructs the appropriate \"tc\" commands to apply latency and rate limiting, if they are non zero.\n     */\n    private void enableTrafficControl(Platform platform, String networkDevice, int delayMs, int rateLimitKbps) throws IOException {\n        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 3,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Object[] [[]] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Stream [<element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "consumer",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "delay::add",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": ":... [post update] : new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 9,
              "variableName": "delay::add",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 10,
              "variableName": "delay",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 11,
              "variableName": "delay.toArray(new String[0])",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 12,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 14,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 15,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "Yes",
          "probability": 0.8986682295799255
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 3,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 4,
              "variableName": "new String[] : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 5,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 7,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 8,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No",
          "probability": 0.49108895659446716
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        if (nodeSpec.networkDevice().isEmpty()) {\n            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {\n                if (!networkInterface.isLoopback()) {\n                    devices.add(networkInterface.getName());\n                }\n            }\n        } else {"
            },
            {
              "step": 1,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No",
          "probability": 0.07144317775964737
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "                }\n            }\n        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }"
            },
            {
              "step": 1,
              "variableName": "devices",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No",
          "probability": 0.05061393976211548
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 21,
      "fileName": "AbstractConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 38,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 39,
              "variableName": "Map<String, ? extends V> resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "super(resolved);",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 42,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 43,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "this.originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 45,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 46,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 47,
              "variableName": "props.get(key.name)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 48,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 49,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 50,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 51,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 52,
              "variableName": "parseType(key.name, value, key.type)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 53,
              "variableName": "parsedValue",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 54,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 55,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 56,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 57,
              "variableName": "definition.parse(this.originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 58,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 59,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 60,
              "variableName": "logAll()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 61,
              "variableName": "logAll",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 62,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 63,
              "variableName": "this.values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 64,
              "variableName": "new TreeMap<>(this.values)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 65,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 66,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 67,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 68,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 69,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 70,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 71,
              "variableName": "b.toString()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes",
          "probability": 0.9889706373214722
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )\n            );\n        }"
            },
            {
              "step": 1,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Object[] [[]] : String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 2,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 3,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 5,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 10,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 11,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 13,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 15,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 16,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 17,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 18,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 19,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 20,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 21,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 23,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 24,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 25,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 26,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 27,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 28,
              "variableName": "Map<String, ? extends V> resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 29,
              "variableName": "resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 30,
              "variableName": "super(resolved);",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 31,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 32,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 33,
              "variableName": "this.originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 35,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 36,
              "variableName": "props.get(key.name)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 37,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 38,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 39,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 40,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 41,
              "variableName": "parseType(key.name, value, key.type)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 42,
              "variableName": "parsedValue",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 43,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 44,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 46,
              "variableName": "definition.parse(this.originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 47,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 48,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 49,
              "variableName": "logAll()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 50,
              "variableName": "logAll",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 51,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 52,
              "variableName": "this.values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 53,
              "variableName": "new TreeMap<>(this.values)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 54,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 55,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 56,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 57,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 58,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 59,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 60,
              "variableName": "b.toString()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes",
          "probability": 0.9951973557472229
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 7,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 8,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 9,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 11,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 12,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 13,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 15,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 21,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 23,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 24,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 25,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 26,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 28,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 33,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 35,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 36,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 38,
              "variableName": "Map<String, ? extends V> resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 39,
              "variableName": "resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 40,
              "variableName": "super(resolved);",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 42,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 43,
              "variableName": "this.originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 44,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 45,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 46,
              "variableName": "props.get(key.name)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 47,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 48,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 49,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 50,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 51,
              "variableName": "parseType(key.name, value, key.type)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 52,
              "variableName": "parsedValue",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 53,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 54,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 55,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 56,
              "variableName": "definition.parse(this.originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 57,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 58,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 59,
              "variableName": "logAll()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 60,
              "variableName": "logAll",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 61,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 62,
              "variableName": "this.values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 63,
              "variableName": "new TreeMap<>(this.values)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 64,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 65,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 66,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 67,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 68,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 69,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "b.toString()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.29407936334609985
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY, new DescribeAclsOptions().timeoutMs(5000)).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 6,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 8,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 9,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 10,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 11,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 13,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 14,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 19,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 21,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 23,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 24,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 25,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 26,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 27,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 31,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 32,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 33,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 34,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 35,
              "variableName": "resolvedOriginals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 36,
              "variableName": "Map<String, ? extends V> resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 37,
              "variableName": "resolved",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 38,
              "variableName": "super(resolved);",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 39,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 40,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 41,
              "variableName": "this.originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 42,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 43,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 44,
              "variableName": "props.get(key.name)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 46,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 47,
              "variableName": "Object value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 48,
              "variableName": "value",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 49,
              "variableName": "parseType(key.name, value, key.type)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 50,
              "variableName": "parsedValue",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 52,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 53,
              "variableName": "values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 54,
              "variableName": "definition.parse(this.originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 55,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 56,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 57,
              "variableName": "logAll()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 58,
              "variableName": "logAll",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 59,
              "variableName": "this",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 60,
              "variableName": "this.values",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 61,
              "variableName": "new TreeMap<>(this.values)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 62,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 63,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 64,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 65,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 66,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 67,
              "variableName": "b",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 68,
              "variableName": "b.toString()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.35582929849624634
        }
      ]
    },
    {
      "resultIndex": 22,
      "fileName": "AbstractConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 37,
              "variableName": "Map<?, ?> configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 38,
              "variableName": "configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 39,
              "variableName": "configMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 40,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 41,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 42,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 43,
              "variableName": "(String) entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 44,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 45,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 46,
              "variableName": "extractPotentialVariables(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 47,
              "variableName": "providerConfigString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 48,
              "variableName": "Map<String, String> indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 49,
              "variableName": "indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 50,
              "variableName": "indirectConfigs.get(providerClass)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 51,
              "variableName": "providerClassName",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 52,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 53,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 54,
              "variableName": "providerMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 55,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 56,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 57,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "Yes",
          "probability": 0.9889706373214722
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )\n            );\n        }"
            },
            {
              "step": 1,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Object[] [[]] : String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 2,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 3,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 5,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 10,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 11,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 13,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 15,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 16,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 17,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 18,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 19,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 20,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 21,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 23,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 24,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 25,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 26,
              "variableName": "Map<?, ?> configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 27,
              "variableName": "configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 28,
              "variableName": "configMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 29,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 30,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 31,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 32,
              "variableName": "(String) entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 33,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 34,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 35,
              "variableName": "extractPotentialVariables(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 36,
              "variableName": "providerConfigString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 37,
              "variableName": "Map<String, String> indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 38,
              "variableName": "indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 39,
              "variableName": "indirectConfigs.get(providerClass)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 40,
              "variableName": "providerClassName",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 41,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 42,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 43,
              "variableName": "providerMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 44,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 45,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 46,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "Yes",
          "probability": 0.9951973557472229
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 7,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 8,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 9,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 11,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 12,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 13,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 15,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 21,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 23,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 24,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 25,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 26,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 28,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 33,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 35,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 36,
              "variableName": "Map<?, ?> configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 37,
              "variableName": "configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 38,
              "variableName": "configMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 39,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 40,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 41,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 42,
              "variableName": "(String) entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 43,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 44,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 45,
              "variableName": "extractPotentialVariables(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 46,
              "variableName": "providerConfigString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 47,
              "variableName": "Map<String, String> indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 48,
              "variableName": "indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 49,
              "variableName": "indirectConfigs.get(providerClass)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 50,
              "variableName": "providerClassName",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 51,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 52,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 53,
              "variableName": "providerMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 54,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 55,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 56,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.2940787672996521
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY, new DescribeAclsOptions().timeoutMs(5000)).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 6,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 8,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 9,
              "variableName": "Map<String, Object> configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 10,
              "variableName": "configs",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 11,
              "variableName": "new HashMap<>(configs)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 12,
              "variableName": "props",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 13,
              "variableName": "setClientSaslConfig(props)",
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 14,
              "variableName": "Map<String, Object> conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "conf",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "props",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 19,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 21,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 23,
              "variableName": "inputMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 24,
              "variableName": "inputMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 25,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 26,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 27,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 28,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "map",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 31,
              "variableName": "originalMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 32,
              "variableName": "Map<String, Object> originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 33,
              "variableName": "originals",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 35,
              "variableName": "configMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 36,
              "variableName": "configMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 37,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 38,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 40,
              "variableName": "(String) entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 41,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 42,
              "variableName": "configMapAsString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 43,
              "variableName": "extractPotentialVariables(originals)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 44,
              "variableName": "providerConfigString",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 45,
              "variableName": "Map<String, String> indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 46,
              "variableName": "indirectConfigs",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 47,
              "variableName": "indirectConfigs.get(providerClass)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 48,
              "variableName": "providerClassName",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 49,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 50,
              "variableName": "providerMap",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 51,
              "variableName": "providerMap.entrySet()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 52,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 53,
              "variableName": "entry",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 54,
              "variableName": "entry.getValue()",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.35582929849624634
        }
      ]
    },
    {
      "resultIndex": 23,
      "fileName": "ScramFormatter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {\n        return hi(normalize(password), salt, iterations);\n    }\n\n    public byte[] clientKey(byte[] saltedPassword) throws InvalidKeyException {"
            },
            {
              "step": 1,
              "variableName": "String str",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "        return result;\n    }\n\n    public static byte[] normalize(String str) {\n        return toBytes(str);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "str",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] normalize(String str) {\n        return toBytes(str);\n    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {"
            },
            {
              "step": 3,
              "variableName": "String str",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "        return toBytes(secureRandomString(random));\n    }\n\n    public static byte[] toBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] toBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    public ScramCredential generateCredential(String password, int iterations) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    public static byte[] toBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    public ScramCredential generateCredential(String password, int iterations) {"
            },
            {
              "step": 6,
              "variableName": "toBytes(str)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    public static byte[] normalize(String str) {\n        return toBytes(str);\n    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {"
            },
            {
              "step": 7,
              "variableName": "normalize(password)",
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "",
              "code": "    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {\n        return hi(normalize(password), salt, iterations);\n    }\n\n    public byte[] clientKey(byte[] saltedPassword) throws InvalidKeyException {"
            }
          ],
          "label": "Yes",
          "probability": 0.9546442627906799
        }
      ]
    }
  ]
}