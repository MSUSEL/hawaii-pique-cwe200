{
  "201": [
    {
      "resultIndex": 0,
      "fileName": "SpnegoAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "Map",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 1,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "updater.getEntity().getAuthNotes().get(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "(updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "... : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "authSession.getAuthNote(ACTIVE_CODE)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/CodeGenerateUtil.java",
              "type": "String",
              "code": "\n        @Override\n        public String retrieveCode(KeycloakSession session, AuthenticationSessionModel authSession) {\n            String nextCode = authSession.getAuthNote(ACTIVE_CODE);\n            if (nextCode == null) {\n                String actionId = Base64Url.encode(SecretGenerator.getInstance().randomBytes());\n                authSession.setAuthNote(ACTIVE_CODE, actionId);"
            },
            {
              "step": 5,
              "variableName": "nextCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/CodeGenerateUtil.java",
              "type": "String",
              "code": "                logger.debug(\"Code already generated for authentication session, using same code\");\n            }\n\n            return nextCode;\n        }\n\n"
            },
            {
              "step": 6,
              "variableName": "parser.retrieveCode(session, commonLoginSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/ClientSessionCode.java",
              "type": "String",
              "code": "\n    public String getOrGenerateCode() {\n        CodeGenerateUtil.ClientSessionParser parser = CodeGenerateUtil.getParser(commonLoginSession.getClass());\n        return parser.retrieveCode(session, commonLoginSession);\n    }\n\n}"
            },
            {
              "step": 7,
              "variableName": "accessCode.getOrGenerateCode()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "    public String generateCode() {\n        ClientSessionCode accessCode = new ClientSessionCode(session, getRealm(), getAuthenticationSession());\n        authenticationSession.getParentSession().setTimestamp(Time.currentTime());\n        return accessCode.getOrGenerateCode();\n    }\n\n    public EventBuilder newEvent() {"
            },
            {
              "step": 8,
              "variableName": "generateCode()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "\n        @Override\n        public String generateAccessCode() {\n            return generateCode();\n        }\n\n"
            },
            {
              "step": 9,
              "variableName": "context.generateAccessCode()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "String",
              "code": "     * @return\n     */\n    protected Response optionalChallengeRedirect(AuthenticationFlowContext context, String negotiateHeader) {\n        String accessCode = context.generateAccessCode();\n        URI action = context.getActionUrl(accessCode);\n\n        StringBuilder builder = new StringBuilder();"
            },
            {
              "step": 10,
              "variableName": "accessCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "String",
              "code": "     */\n    protected Response optionalChallengeRedirect(AuthenticationFlowContext context, String negotiateHeader) {\n        String accessCode = context.generateAccessCode();\n        URI action = context.getActionUrl(accessCode);\n\n        StringBuilder builder = new StringBuilder();\n"
            },
            {
              "step": 11,
              "variableName": "String code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)"
            },
            {
              "step": 12,
              "variableName": "code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())\n                    .queryParam(Constants.CLIENT_ID, getAuthenticationSession().getClient().getClientId())\n                    .queryParam(Constants.TAB_ID, getAuthenticationSession().getTabId())"
            },
            {
              "step": 13,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 14,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 15,
              "variableName": "LoginActionsService.loginActionsBaseUrl(",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 16,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 17,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 18,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 19,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 20,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "URI",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 21,
              "variableName": "context.getActionUrl(accessCode)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "URI",
              "code": "     */\n    protected Response optionalChallengeRedirect(AuthenticationFlowContext context, String negotiateHeader) {\n        String accessCode = context.generateAccessCode();\n        URI action = context.getActionUrl(accessCode);\n\n        StringBuilder builder = new StringBuilder();\n"
            },
            {
              "step": 22,
              "variableName": "action",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "URI",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 23,
              "variableName": "action.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "String",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 24,
              "variableName": "\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\"",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "String",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 25,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "StringBuilder",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 26,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "StringBuilder",
              "code": "        return Response.status(Response.Status.UNAUTHORIZED)\n                .header(HttpHeaders.WWW_AUTHENTICATE, negotiateHeader)\n                .type(MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n    }\n\n"
            },
            {
              "step": 27,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "",
              "code": "        return Response.status(Response.Status.UNAUTHORIZED)\n                .header(HttpHeaders.WWW_AUTHENTICATE, negotiateHeader)\n                .type(MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "accessCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "String",
              "code": "     */\n    protected Response optionalChallengeRedirect(AuthenticationFlowContext context, String negotiateHeader) {\n        String accessCode = context.generateAccessCode();\n        URI action = context.getActionUrl(accessCode);\n\n        StringBuilder builder = new StringBuilder();\n"
            },
            {
              "step": 1,
              "variableName": "String code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)"
            },
            {
              "step": 2,
              "variableName": "code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())\n                    .queryParam(Constants.CLIENT_ID, getAuthenticationSession().getClient().getClientId())\n                    .queryParam(Constants.TAB_ID, getAuthenticationSession().getTabId())"
            },
            {
              "step": 3,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 4,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 5,
              "variableName": "LoginActionsService.loginActionsBaseUrl(",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 6,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 7,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 8,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 9,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 10,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "URI",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 11,
              "variableName": "context.getActionUrl(accessCode)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "URI",
              "code": "     */\n    protected Response optionalChallengeRedirect(AuthenticationFlowContext context, String negotiateHeader) {\n        String accessCode = context.generateAccessCode();\n        URI action = context.getActionUrl(accessCode);\n\n        StringBuilder builder = new StringBuilder();\n"
            },
            {
              "step": 12,
              "variableName": "action",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "URI",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 13,
              "variableName": "action.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "String",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 14,
              "variableName": "\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\"",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "String",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 15,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "StringBuilder",
              "code": "        } else {\n            builder.append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\");\n        }\n        builder.append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + action.toString() + \"\\\">\");\n        builder.append(\"<NOSCRIPT>\");\n        builder.append(\"<P>JavaScript is disabled. We strongly recommend to enable it. You were unable to login via Kerberos.  Click the button below to login via an alternative method .</P>\");\n        builder.append(\"<INPUT name=\\\"continue\\\" TYPE=\\\"SUBMIT\\\" VALUE=\\\"CONTINUE\\\" />\");"
            },
            {
              "step": 16,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "StringBuilder",
              "code": "        return Response.status(Response.Status.UNAUTHORIZED)\n                .header(HttpHeaders.WWW_AUTHENTICATE, negotiateHeader)\n                .type(MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n    }\n\n"
            },
            {
              "step": 17,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/browser/SpnegoAuthenticator.java",
              "type": "",
              "code": "        return Response.status(Response.Status.UNAUTHORIZED)\n                .header(HttpHeaders.WWW_AUTHENTICATE, negotiateHeader)\n                .type(MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n    }\n\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "OIDCRedirectUriBuilder.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "OIDCRedirectUriBuilder.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"response\\\" VALUE=\\\"\")"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"response\\\" VALUE=\\\"\")"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"response\\\" VALUE=\\\"\")"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"response\\\" VALUE=\\\"\")"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n    }\n}"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "SamlProtocol.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "escapeAttribute(actionUrl)",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "                .append(\"</HEAD>\")\n                .append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\")\n\n                .append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\").append(escapeAttribute(actionUrl)).append(\"\\\">\");\n\n        builder.append(\"<p>Redirecting, please wait.</p>\");\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"<HTML>\")",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "    public String buildHtmlForm(String actionUrl, Map<String, String> inputTypes) {\n        StringBuilder builder = new StringBuilder();\n\n        builder.append(\"<HTML>\")\n                .append(\"<HEAD>\")\n\n                .append(\"<TITLE>Authentication Redirect</TITLE>\")"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 9,
              "variableName": "bindingBuilder.buildHtmlForm(redirectUri, inputTypes)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "String",
              "code": "            inputTypes.put(GeneralConstants.RELAY_STATE, relayState);\n        }\n\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")"
            },
            {
              "step": 10,
              "variableName": "str",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "",
              "code": "\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")\n                .header(\"Cache-Control\", \"no-cache, no-store\").build();\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "escapeAttribute(actionUrl)",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "                .append(\"</HEAD>\")\n                .append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\")\n\n                .append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\").append(escapeAttribute(actionUrl)).append(\"\\\">\");\n\n        builder.append(\"<p>Redirecting, please wait.</p>\");\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"<HTML>\")",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "    public String buildHtmlForm(String actionUrl, Map<String, String> inputTypes) {\n        StringBuilder builder = new StringBuilder();\n\n        builder.append(\"<HTML>\")\n                .append(\"<HEAD>\")\n\n                .append(\"<TITLE>Authentication Redirect</TITLE>\")"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 9,
              "variableName": "bindingBuilder.buildHtmlForm(redirectUri, inputTypes)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "String",
              "code": "            inputTypes.put(GeneralConstants.RELAY_STATE, relayState);\n        }\n\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")"
            },
            {
              "step": 10,
              "variableName": "str",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "",
              "code": "\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")\n                .header(\"Cache-Control\", \"no-cache, no-store\").build();\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "escapeAttribute(actionUrl)",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "                .append(\"</HEAD>\")\n                .append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\")\n\n                .append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\").append(escapeAttribute(actionUrl)).append(\"\\\">\");\n\n        builder.append(\"<p>Redirecting, please wait.</p>\");\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"<HTML>\")",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "    public String buildHtmlForm(String actionUrl, Map<String, String> inputTypes) {\n        StringBuilder builder = new StringBuilder();\n\n        builder.append(\"<HTML>\")\n                .append(\"<HEAD>\")\n\n                .append(\"<TITLE>Authentication Redirect</TITLE>\")"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 9,
              "variableName": "bindingBuilder.buildHtmlForm(redirectUri, inputTypes)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "String",
              "code": "            inputTypes.put(GeneralConstants.RELAY_STATE, relayState);\n        }\n\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")"
            },
            {
              "step": 10,
              "variableName": "str",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "",
              "code": "\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")\n                .header(\"Cache-Control\", \"no-cache, no-store\").build();\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "escapeAttribute(actionUrl)",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "                .append(\"</HEAD>\")\n                .append(\"<BODY Onload=\\\"document.forms[0].submit()\\\">\")\n\n                .append(\"<FORM METHOD=\\\"POST\\\" ACTION=\\\"\").append(escapeAttribute(actionUrl)).append(\"\\\">\");\n\n        builder.append(\"<p>Redirecting, please wait.</p>\");\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"<HTML>\")",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "    public String buildHtmlForm(String actionUrl, Map<String, String> inputTypes) {\n        StringBuilder builder = new StringBuilder();\n\n        builder.append(\"<HTML>\")\n                .append(\"<HEAD>\")\n\n                .append(\"<TITLE>Authentication Redirect</TITLE>\")"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "StringBuilder",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/saml-core/src/main/java/org/keycloak/saml/BaseSAML2BindingBuilder.java",
              "type": "String",
              "code": "\n                .append(\"</FORM></BODY></HTML>\");\n\n        return builder.toString();\n    }\n\n"
            },
            {
              "step": 9,
              "variableName": "bindingBuilder.buildHtmlForm(redirectUri, inputTypes)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "String",
              "code": "            inputTypes.put(GeneralConstants.RELAY_STATE, relayState);\n        }\n\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")"
            },
            {
              "step": 10,
              "variableName": "str",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/SamlProtocol.java",
              "type": "",
              "code": "\n        String str = bindingBuilder.buildHtmlForm(redirectUri, inputTypes);\n\n        return Response.ok(str, MediaType.TEXT_HTML_TYPE)\n                .header(\"Pragma\", \"no-cache\")\n                .header(\"Cache-Control\", \"no-cache, no-store\").build();\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "IdentityBrokerService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "this.token",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/FederatedIdentityModel.java",
              "type": "String",
              "code": "    }\n\n    public String getToken() {\n        return this.token;\n    }\n\n    public void setToken(String token) {"
            },
            {
              "step": 1,
              "variableName": "identity.getToken()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "Response.ok(identity.getToken())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java",
              "type": "ResponseBuilder",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java",
              "type": "ResponseBuilder",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/oidc/AbstractOAuth2IdentityProvider.java",
              "type": "Response",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "identityProvider.retrieveToken(session, identity)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "\n                    this.event.success();\n\n                    return corsResponse(identityProvider.retrieveToken(session, identity), clientModel);\n                }\n\n                return corsResponse(badRequest(\"Identity Provider [\" + providerAlias + \"] does not support this operation.\"), clientModel);"
            },
            {
              "step": 6,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        return model;\n    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n"
            },
            {
              "step": 7,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 8,
              "variableName": "Response.fromResponse(response)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "ResponseBuilder",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 9,
              "variableName": "ResponseBuilder builder",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "ResponseBuilder",
              "code": "     * @param builder the response builder\n     * @return the response built from the response builder\n     */\n    default Response add(ResponseBuilder builder) {\n        if (builder == null) {\n            throw new IllegalStateException(\"builder is not set\");\n        }"
            },
            {
              "step": 10,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "ResponseBuilder",
              "code": "\n        add();\n\n        return builder.build();\n    }\n}\n"
            },
            {
              "step": 11,
              "variableName": "builder.build()",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "Response",
              "code": "\n        add();\n\n        return builder.build();\n    }\n}\n"
            },
            {
              "step": 12,
              "variableName": "Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response))",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 13,
              "variableName": "corsResponse(identityProvider.retrieveToken(session, identity), clientModel)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "\n                    this.event.success();\n\n                    return corsResponse(identityProvider.retrieveToken(session, identity), clientModel);\n                }\n\n                return corsResponse(badRequest(\"Identity Provider [\" + providerAlias + \"] does not support this operation.\"), clientModel);"
            },
            {
              "step": 14,
              "variableName": "getToken(providerAlias, false)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "    @NoCache\n    @Path(\"{provider_alias}/token\")\n    public Response retrieveToken(@PathParam(\"provider_alias\") String providerAlias) {\n        return getToken(providerAlias, false);\n    }\n\n    private boolean canReadBrokerToken(AccessToken token) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "this.token",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/FederatedIdentityModel.java",
              "type": "String",
              "code": "    }\n\n    public String getToken() {\n        return this.token;\n    }\n\n    public void setToken(String token) {"
            },
            {
              "step": 1,
              "variableName": "identity.getToken()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.TEXT_PLAIN_TYPE).build();\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "Response.ok(identity.getToken())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java",
              "type": "ResponseBuilder",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.TEXT_PLAIN_TYPE).build();\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "Response.ok(identity.getToken()).type(MediaType.TEXT_PLAIN_TYPE)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java",
              "type": "ResponseBuilder",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.TEXT_PLAIN_TYPE).build();\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "Response.ok(identity.getToken()).type(MediaType.TEXT_PLAIN_TYPE).build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/broker/saml/SAMLIdentityProvider.java",
              "type": "Response",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.TEXT_PLAIN_TYPE).build();\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "identityProvider.retrieveToken(session, identity)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "\n                    this.event.success();\n\n                    return corsResponse(identityProvider.retrieveToken(session, identity), clientModel);\n                }\n\n                return corsResponse(badRequest(\"Identity Provider [\" + providerAlias + \"] does not support this operation.\"), clientModel);"
            },
            {
              "step": 6,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        return model;\n    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n"
            },
            {
              "step": 7,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 8,
              "variableName": "Response.fromResponse(response)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "ResponseBuilder",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 9,
              "variableName": "ResponseBuilder builder",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "ResponseBuilder",
              "code": "     * @param builder the response builder\n     * @return the response built from the response builder\n     */\n    default Response add(ResponseBuilder builder) {\n        if (builder == null) {\n            throw new IllegalStateException(\"builder is not set\");\n        }"
            },
            {
              "step": 10,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "ResponseBuilder",
              "code": "\n        add();\n\n        return builder.build();\n    }\n}\n"
            },
            {
              "step": 11,
              "variableName": "builder.build()",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "Response",
              "code": "\n        add();\n\n        return builder.build();\n    }\n}\n"
            },
            {
              "step": 12,
              "variableName": "Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response))",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 13,
              "variableName": "corsResponse(identityProvider.retrieveToken(session, identity), clientModel)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "\n                    this.event.success();\n\n                    return corsResponse(identityProvider.retrieveToken(session, identity), clientModel);\n                }\n\n                return corsResponse(badRequest(\"Identity Provider [\" + providerAlias + \"] does not support this operation.\"), clientModel);"
            },
            {
              "step": 14,
              "variableName": "getToken(providerAlias, false)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "    @NoCache\n    @Path(\"{provider_alias}/token\")\n    public Response retrieveToken(@PathParam(\"provider_alias\") String providerAlias) {\n        return getToken(providerAlias, false);\n    }\n\n    private boolean canReadBrokerToken(AccessToken token) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "this.token",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/FederatedIdentityModel.java",
              "type": "String",
              "code": "    }\n\n    public String getToken() {\n        return this.token;\n    }\n\n    public void setToken(String token) {"
            },
            {
              "step": 1,
              "variableName": "identity.getToken()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/social/twitter/TwitterIdentityProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "Response.ok(identity.getToken())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/social/twitter/TwitterIdentityProvider.java",
              "type": "ResponseBuilder",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/social/twitter/TwitterIdentityProvider.java",
              "type": "ResponseBuilder",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/social/twitter/TwitterIdentityProvider.java",
              "type": "Response",
              "code": "\n    @Override\n    public Response retrieveToken(KeycloakSession session, FederatedIdentityModel identity) {\n        return Response.ok(identity.getToken()).type(MediaType.APPLICATION_JSON).build();\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "identityProvider.retrieveToken(session, identity)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "\n                    this.event.success();\n\n                    return corsResponse(identityProvider.retrieveToken(session, identity), clientModel);\n                }\n\n                return corsResponse(badRequest(\"Identity Provider [\" + providerAlias + \"] does not support this operation.\"), clientModel);"
            },
            {
              "step": 6,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        return model;\n    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n"
            },
            {
              "step": 7,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 8,
              "variableName": "Response.fromResponse(response)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "ResponseBuilder",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 9,
              "variableName": "ResponseBuilder builder",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "ResponseBuilder",
              "code": "     * @param builder the response builder\n     * @return the response built from the response builder\n     */\n    default Response add(ResponseBuilder builder) {\n        if (builder == null) {\n            throw new IllegalStateException(\"builder is not set\");\n        }"
            },
            {
              "step": 10,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "ResponseBuilder",
              "code": "\n        add();\n\n        return builder.build();\n    }\n}\n"
            },
            {
              "step": 11,
              "variableName": "builder.build()",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/services/cors/Cors.java",
              "type": "Response",
              "code": "\n        add();\n\n        return builder.build();\n    }\n}\n"
            },
            {
              "step": 12,
              "variableName": "Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response))",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "    }\n\n    private Response corsResponse(Response response, ClientModel clientModel) {\n        return Cors.builder().auth().allowedOrigins(session, clientModel).add(Response.fromResponse(response));\n    }\n\n    private void fireErrorEvent(String message, Throwable throwable) {"
            },
            {
              "step": 13,
              "variableName": "corsResponse(identityProvider.retrieveToken(session, identity), clientModel)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "\n                    this.event.success();\n\n                    return corsResponse(identityProvider.retrieveToken(session, identity), clientModel);\n                }\n\n                return corsResponse(badRequest(\"Identity Provider [\" + providerAlias + \"] does not support this operation.\"), clientModel);"
            },
            {
              "step": 14,
              "variableName": "getToken(providerAlias, false)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "    @NoCache\n    @Path(\"{provider_alias}/token\")\n    public Response retrieveToken(@PathParam(\"provider_alias\") String providerAlias) {\n        return getToken(providerAlias, false);\n    }\n\n    private boolean canReadBrokerToken(AccessToken token) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "IdentityBrokerService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (postBrokerLoginFlowId == null) {\n\n            logger.debugf(\"Skip redirect to postBrokerLogin flow. PostBrokerLogin flow not set for identityProvider '%s'.\", context.getIdpConfig().getAlias());\n            return afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin);\n        } else {\n\n            logger.debugf(\"Redirect to postBrokerLogin flow after authentication with identityProvider '%s'.\", context.getIdpConfig().getAlias());"
            },
            {
              "step": 17,
              "variableName": "finishOrRedirectToPostBrokerLogin(authSession, context, true)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                updateFederatedIdentity(context, federatedUser);\n            }\n\n            return finishOrRedirectToPostBrokerLogin(authSession, context, true);\n\n        }  catch (Exception e) {\n            return redirectToErrorPage(authSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);"
            },
            {
              "step": 18,
              "variableName": "afterFirstBrokerLogin(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "                                          @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                          @QueryParam(Constants.TAB_ID) String tabId) {\n        AuthenticationSessionModel authSession = parseSessionCode(code, clientId, tabId, clientData);\n        return afterFirstBrokerLogin(authSession);\n    }\n\n    private Response afterFirstBrokerLogin(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (postBrokerLoginFlowId == null) {\n\n            logger.debugf(\"Skip redirect to postBrokerLogin flow. PostBrokerLogin flow not set for identityProvider '%s'.\", context.getIdpConfig().getAlias());\n            return afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin);\n        } else {\n\n            logger.debugf(\"Redirect to postBrokerLogin flow after authentication with identityProvider '%s'.\", context.getIdpConfig().getAlias());"
            },
            {
              "step": 17,
              "variableName": "finishOrRedirectToPostBrokerLogin(authSession, context, true)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                updateFederatedIdentity(context, federatedUser);\n            }\n\n            return finishOrRedirectToPostBrokerLogin(authSession, context, true);\n\n        }  catch (Exception e) {\n            return redirectToErrorPage(authSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);"
            },
            {
              "step": 18,
              "variableName": "afterFirstBrokerLogin(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "                                          @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                          @QueryParam(Constants.TAB_ID) String tabId) {\n        AuthenticationSessionModel authSession = parseSessionCode(code, clientId, tabId, clientData);\n        return afterFirstBrokerLogin(authSession);\n    }\n\n    private Response afterFirstBrokerLogin(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (postBrokerLoginFlowId == null) {\n\n            logger.debugf(\"Skip redirect to postBrokerLogin flow. PostBrokerLogin flow not set for identityProvider '%s'.\", context.getIdpConfig().getAlias());\n            return afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin);\n        } else {\n\n            logger.debugf(\"Redirect to postBrokerLogin flow after authentication with identityProvider '%s'.\", context.getIdpConfig().getAlias());"
            },
            {
              "step": 17,
              "variableName": "finishOrRedirectToPostBrokerLogin(authSession, context, true)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                updateFederatedIdentity(context, federatedUser);\n            }\n\n            return finishOrRedirectToPostBrokerLogin(authSession, context, true);\n\n        }  catch (Exception e) {\n            return redirectToErrorPage(authSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);"
            },
            {
              "step": 18,
              "variableName": "afterFirstBrokerLogin(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "                                          @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                          @QueryParam(Constants.TAB_ID) String tabId) {\n        AuthenticationSessionModel authSession = parseSessionCode(code, clientId, tabId, clientData);\n        return afterFirstBrokerLogin(authSession);\n    }\n\n    private Response afterFirstBrokerLogin(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (postBrokerLoginFlowId == null) {\n\n            logger.debugf(\"Skip redirect to postBrokerLogin flow. PostBrokerLogin flow not set for identityProvider '%s'.\", context.getIdpConfig().getAlias());\n            return afterPostBrokerLoginFlowSuccess(authSession, context, wasFirstBrokerLogin);\n        } else {\n\n            logger.debugf(\"Redirect to postBrokerLogin flow after authentication with identityProvider '%s'.\", context.getIdpConfig().getAlias());"
            },
            {
              "step": 17,
              "variableName": "finishOrRedirectToPostBrokerLogin(authSession, context, true)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                updateFederatedIdentity(context, federatedUser);\n            }\n\n            return finishOrRedirectToPostBrokerLogin(authSession, context, true);\n\n        }  catch (Exception e) {\n            return redirectToErrorPage(authSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);"
            },
            {
              "step": 18,
              "variableName": "afterFirstBrokerLogin(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "                                          @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                          @QueryParam(Constants.TAB_ID) String tabId) {\n        AuthenticationSessionModel authSession = parseSessionCode(code, clientId, tabId, clientData);\n        return afterFirstBrokerLogin(authSession);\n    }\n\n    private Response afterFirstBrokerLogin(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "IdentityBrokerService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_BROKERED_IDENTITY_CONTEXT);\n            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_AFTER_FIRST_BROKER_LOGIN);\n\n            return afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin);\n        } catch (IdentityBrokerException e) {\n            return redirectToErrorPage(authenticationSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_BROKERED_IDENTITY_CONTEXT);\n            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_AFTER_FIRST_BROKER_LOGIN);\n\n            return afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin);\n        } catch (IdentityBrokerException e) {\n            return redirectToErrorPage(authenticationSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_BROKERED_IDENTITY_CONTEXT);\n            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_AFTER_FIRST_BROKER_LOGIN);\n\n            return afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin);\n        } catch (IdentityBrokerException e) {\n            return redirectToErrorPage(authenticationSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            return protocol.sendError(authSession, error, null);\n        }\n        return null;\n    }"
            },
            {
              "step": 14,
              "variableName": "checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        if (nextRequiredAction != null) {\n            if (\"true\".equals(authSession.getAuthNote(AuthenticationProcessor.FORWARDED_PASSIVE_LOGIN))) {\n                logger.errorf(\"Required action %s found. Auth requests using prompt=none are incompatible with required actions\", nextRequiredAction);\n                return checkPassiveLoginError(authSession, OAuthErrorException.INTERACTION_REQUIRED);\n            }\n            return AuthenticationManager.redirectToRequiredActions(session, realmModel, authSession, session.getContext().getUri(), nextRequiredAction);\n        } else {"
            },
            {
              "step": 15,
              "variableName": "finishBrokerAuthentication(context, federatedUser, authSession, providerAlias)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "Response",
              "code": "        UserModel federatedUser = authSession.getAuthenticatedUser();\n\n        if (wasFirstBrokerLogin) {\n            return finishBrokerAuthentication(context, federatedUser, authSession, providerAlias);\n        } else {\n\n            boolean firstBrokerLoginInProgress = (authSession.getAuthNote(AbstractIdpAuthenticator.BROKERED_CONTEXT_NOTE) != null);"
            },
            {
              "step": 16,
              "variableName": "afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/IdentityBrokerService.java",
              "type": "",
              "code": "            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_BROKERED_IDENTITY_CONTEXT);\n            authenticationSession.removeAuthNote(PostBrokerLoginConstants.PBL_AFTER_FIRST_BROKER_LOGIN);\n\n            return afterPostBrokerLoginFlowSuccess(authenticationSession, context, wasFirstBrokerLogin);\n        } catch (IdentityBrokerException e) {\n            return redirectToErrorPage(authenticationSession, Response.Status.INTERNAL_SERVER_ERROR, Messages.IDENTITY_PROVIDER_UNEXPECTED_ERROR, e);\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 23,
              "variableName": "authenticate(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                     @QueryParam(Constants.CLIENT_ID) String clientId,\n                                     @QueryParam(Constants.TAB_ID) String tabId,\n                                     @QueryParam(Constants.CLIENT_DATA) String clientData) {\n        return authenticate(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    @Path(RESET_CREDENTIALS_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 23,
              "variableName": "authenticate(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                     @QueryParam(Constants.CLIENT_ID) String clientId,\n                                     @QueryParam(Constants.TAB_ID) String tabId,\n                                     @QueryParam(Constants.CLIENT_DATA) String clientData) {\n        return authenticate(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    @Path(RESET_CREDENTIALS_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 23,
              "variableName": "authenticate(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                     @QueryParam(Constants.CLIENT_ID) String clientId,\n                                     @QueryParam(Constants.TAB_ID) String tabId,\n                                     @QueryParam(Constants.CLIENT_DATA) String clientData) {\n        return authenticate(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    @Path(RESET_CREDENTIALS_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(actionRequest, execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        processLocaleParam(authSession);\n\n        return processAuthentication(actionRequest, execution, authSession, null);\n    }\n\n    protected void processLocaleParam(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 23,
              "variableName": "authenticate(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                     @QueryParam(Constants.CLIENT_ID) String clientId,\n                                     @QueryParam(Constants.TAB_ID) String tabId,\n                                     @QueryParam(Constants.CLIENT_DATA) String clientData) {\n        return authenticate(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    @Path(RESET_CREDENTIALS_PATH)"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.KEY) String key) {\n        if (key != null) {\n            return handleActionToken(key, execution, clientId, tabId, clientData, null);\n        }\n\n        event.event(EventType.RESET_PASSWORD);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.KEY) String key) {\n        if (key != null) {\n            return handleActionToken(key, execution, clientId, tabId, clientData, null);\n        }\n\n        event.event(EventType.RESET_PASSWORD);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.KEY) String key) {\n        if (key != null) {\n            return handleActionToken(key, execution, clientId, tabId, clientData, null);\n        }\n\n        event.event(EventType.RESET_PASSWORD);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.KEY) String key) {\n        if (key != null) {\n            return handleActionToken(key, execution, clientId, tabId, clientData, null);\n        }\n\n        event.event(EventType.RESET_PASSWORD);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        event.event(EventType.RESET_PASSWORD);\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        event.event(EventType.RESET_PASSWORD);\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        event.event(EventType.RESET_PASSWORD);\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n        event.event(EventType.RESET_PASSWORD);\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    /**"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(false, null, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n            }\n            authSession = createAuthenticationSessionForClient(clientId, redirectUri);\n            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(false, null, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n            }\n            authSession = createAuthenticationSessionForClient(clientId, redirectUri);\n            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(false, null, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n            }\n            authSession = createAuthenticationSessionForClient(clientId, redirectUri);\n            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(false, null, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "\n            }\n            authSession = createAuthenticationSessionForClient(clientId, redirectUri);\n            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    AuthenticationSessionModel createAuthenticationSessionForClient(String clientID, String redirectUriParam)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    AuthenticationSessionModel createAuthenticationSessionForClient(String clientID, String redirectUriParam)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    AuthenticationSessionModel createAuthenticationSessionForClient(String clientID, String redirectUriParam)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    protected Response processResetCredentials(boolean actionRequest, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        AuthenticationProcessor authProcessor = new ResetCredentialsActionTokenHandler.ResetCredsAuthenticationProcessor();\n\n        return processFlow(actionRequest, execution, authSession, RESET_CREDENTIALS_PATH, realm.getResetCredentialsFlow(), errorMessage, authProcessor);\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processResetCredentials(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        }\n\n        return processResetCredentials(checks.isActionRequest(), execution, authSession, null);\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "resetCredentials(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            return processResetCredentials(false, null, authSession, null);\n        }\n\n        return resetCredentials(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n    AuthenticationSessionModel createAuthenticationSessionForClient(String clientID, String redirectUriParam)"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return handleActionToken(key, execution, clientId, tabId, clientData, null);\n    }\n\n    protected <T extends JsonWebToken & SingleUseObjectKeyModel> Response handleActionToken(String tokenString, String execution, String clientId, String tabId, String clientData, "
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return handleActionToken(key, execution, clientId, tabId, clientData, null);\n    }\n\n    protected <T extends JsonWebToken & SingleUseObjectKeyModel> Response handleActionToken(String tokenString, String execution, String clientId, String tabId, String clientData, "
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return handleActionToken(key, execution, clientId, tabId, clientData, null);\n    }\n\n    protected <T extends JsonWebToken & SingleUseObjectKeyModel> Response handleActionToken(String tokenString, String execution, String clientId, String tabId, String clientData, "
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "    }\n\n    protected Response processAuthentication(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, AUTHENTICATE_PATH, AuthenticationFlowResolver.resolveBrowserFlow(authSession), errorMessage, new AuthenticationProcessor());\n    }\n\n    protected Response processFlow(boolean action, String execution, AuthenticationSessionModel authSession, String flowPath, AuthenticationFlowModel flow, String errorMessage, AuthenticationProcessor processor) {"
            },
            {
              "step": 22,
              "variableName": "processAuthentication(false, null, authSession, errorMessage)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n    private Response processFlowFromPath(String flowPath, AuthenticationSessionModel authSession, String errorMessage) {\n        if (AUTHENTICATE_PATH.equals(flowPath)) {\n            return processAuthentication(false, null, authSession, errorMessage);\n        } else if (REGISTRATION_PATH.equals(flowPath)) {\n            return processRegistration(false, null, authSession, errorMessage);\n        } else if (RESET_CREDENTIALS_PATH.equals(flowPath)) {"
            },
            {
              "step": 23,
              "variableName": "processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                AuthenticationProcessor.resetFlow(authSession, flowPath);\n\n                // Process correct flow\n                return processFlowFromPath(flowPath, authSession, Messages.EXPIRED_ACTION_TOKEN_SESSION_EXISTS);\n            }\n\n            return handleActionTokenVerificationException(null, ex, Errors.EXPIRED_CODE, Messages.EXPIRED_ACTION_TOKEN_NO_SESSION);"
            },
            {
              "step": 24,
              "variableName": "handleActionToken(key, execution, clientId, tabId, clientData, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return handleActionToken(key, execution, clientId, tabId, clientData, null);\n    }\n\n    protected <T extends JsonWebToken & SingleUseObjectKeyModel> Response handleActionToken(String tokenString, String execution, String clientId, String tabId, String clientData, "
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId,  tabId,clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                 @QueryParam(Constants.CLIENT_ID) String clientId,\n                                 @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                 @QueryParam(Constants.TAB_ID) String tabId) {\n        return registerRequest(authSessionId, code, execution, clientId,  tabId,clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId,  tabId,clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                 @QueryParam(Constants.CLIENT_ID) String clientId,\n                                 @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                 @QueryParam(Constants.TAB_ID) String tabId) {\n        return registerRequest(authSessionId, code, execution, clientId,  tabId,clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId,  tabId,clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                 @QueryParam(Constants.CLIENT_ID) String clientId,\n                                 @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                 @QueryParam(Constants.TAB_ID) String tabId) {\n        return registerRequest(authSessionId, code, execution, clientId,  tabId,clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId,  tabId,clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                 @QueryParam(Constants.CLIENT_ID) String clientId,\n                                 @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                 @QueryParam(Constants.TAB_ID) String tabId) {\n        return registerRequest(authSessionId, code, execution, clientId,  tabId,clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            //this call should extract orgId from token and set the organization to the session context\n            preHandleActionToken(tokenString);\n        }\n        return registerRequest(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            //this call should extract orgId from token and set the organization to the session context\n            preHandleActionToken(tokenString);\n        }\n        return registerRequest(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            //this call should extract orgId from token and set the organization to the session context\n            preHandleActionToken(tokenString);\n        }\n        return registerRequest(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n\n    protected Response processRegistration(boolean action, String execution, AuthenticationSessionModel authSession, String errorMessage) {\n        return processFlow(action, execution, authSession, REGISTRATION_PATH, realm.getRegistrationFlow(), errorMessage, new AuthenticationProcessor());\n    }\n\n"
            },
            {
              "step": 22,
              "variableName": "processRegistration(checks.isActionRequest(), execution, authSession, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        AuthenticationManager.expireIdentityCookie(session);\n\n        return processRegistration(checks.isActionRequest(), execution, authSession, null);\n    }\n\n"
            },
            {
              "step": 23,
              "variableName": "registerRequest(authSessionId, code, execution, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "            //this call should extract orgId from token and set the organization to the session context\n            preHandleActionToken(tokenString);\n        }\n        return registerRequest(authSessionId, code, execution, clientId, tabId, clientData);\n    }\n\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(FIRST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(FIRST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(FIRST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(FIRST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_ID) String clientId,\n                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_ID) String clientId,\n                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_ID) String clientId,\n                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                         @QueryParam(Constants.CLIENT_ID) String clientId,\n                                         @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                         @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, FIRST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 18,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n    @Path(POST_BROKER_LOGIN_PATH)"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 19,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                                .setHttpHeaders(headers)\n                                .setUriInfo(session.getContext().getUri())\n                                .setEventBuilder(event);\n                        return protocol.sendError(authSession, Error.PASSIVE_INTERACTION_REQUIRED, null);\n                    }\n                }\n                return challenge;"
            },
            {
              "step": 14,
              "variableName": "authenticateOnly()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "\n    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }"
            },
            {
              "step": 15,
              "variableName": "challenge",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Response",
              "code": "    public Response authenticate() throws AuthenticationFlowException {\n        logger.debug(\"AUTHENTICATE\");\n        Response challenge = authenticateOnly();\n        if (challenge != null) return challenge;\n        return authenticationComplete();\n    }\n"
            },
            {
              "step": 16,
              "variableName": "processor.authenticate()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            if (action) {\n                response = processor.authenticationAction(execution);\n            } else {\n                response = processor.authenticate();\n            }\n        } catch (WebApplicationException e) {\n            response = e.getResponse();"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 19,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 20,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            authSession = processor.getAuthenticationSession(); // Could be changed (eg. Forked flow)\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, action, request);\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "\n        configureOrganization(brokerContext);\n\n        return processFlow(checks.isActionRequest(), execution, authSession, flowPath, brokerLoginFlow, null, processor);\n    }\n\n    private void configureOrganization(BrokeredIdentityContext brokerContext) {"
            },
            {
              "step": 22,
              "variableName": "brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                        @QueryParam(Constants.CLIENT_ID) String clientId,\n                                        @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                        @QueryParam(Constants.TAB_ID) String tabId) {\n        return brokerLoginFlow(authSessionId, code, execution, clientId, tabId, clientData, POST_BROKER_LOGIN_PATH);\n    }\n\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 20,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.CONSENT_DENIED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }"
            },
            {
              "step": 14,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }\n\n        UserConsentModel grantedConsent = UserConsentManager.getConsentByClient(session, realm, user, client.getId());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.CONSENT_DENIED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }"
            },
            {
              "step": 14,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }\n\n        UserConsentModel grantedConsent = UserConsentManager.getConsentByClient(session, realm, user, client.getId());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.CONSENT_DENIED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }"
            },
            {
              "step": 14,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }\n\n        UserConsentModel grantedConsent = UserConsentManager.getConsentByClient(session, realm, user, client.getId());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, Error.CONSENT_DENIED, null)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "                    .setHttpHeaders(headers)\n                    .setUriInfo(session.getContext().getUri())\n                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }"
            },
            {
              "step": 14,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                    .setEventBuilder(event);\n            Response response = protocol.sendError(authSession, Error.CONSENT_DENIED, null);\n            event.error(Errors.REJECTED_BY_USER);\n            return response;\n        }\n\n        UserConsentModel grantedConsent = UserConsentManager.getConsentByClient(session, realm, user, client.getId());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 21,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     AuthenticationSessionModel authSession,\n                                     UserSessionModel userSession,\n                                     ClientSessionContext clientSessionCtx) {\n        return redirectUriBuilder.build();\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "            }\n        }\n\n        return buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "protocol.authenticated(authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "        // The user has successfully logged in and we can clear his/her previous login failure attempts.\n        logSuccess(session, authSession);\n\n        return protocol.authenticated(authSession, userSession, clientSessionCtx);\n\n    }\n"
            },
            {
              "step": 14,
              "variableName": "redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "                .setHttpHeaders(request.getHttpHeaders())\n                .setUriInfo(uriInfo)\n                .setEventBuilder(event);\n        return redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl);\n\n    }\n"
            },
            {
              "step": 15,
              "variableName": "AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "        event.success();\n\n        ClientSessionContext clientSessionCtx = AuthenticationProcessor.attachSession(authSession, null, session, realm, clientConnection, event);\n        return AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession);\n    }\n\n    private void initLoginEvent(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     AuthenticationSessionModel authSession,\n                                     UserSessionModel userSession,\n                                     ClientSessionContext clientSessionCtx) {\n        return redirectUriBuilder.build();\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "            }\n        }\n\n        return buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "protocol.authenticated(authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "        // The user has successfully logged in and we can clear his/her previous login failure attempts.\n        logSuccess(session, authSession);\n\n        return protocol.authenticated(authSession, userSession, clientSessionCtx);\n\n    }\n"
            },
            {
              "step": 14,
              "variableName": "redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "                .setHttpHeaders(request.getHttpHeaders())\n                .setUriInfo(uriInfo)\n                .setEventBuilder(event);\n        return redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl);\n\n    }\n"
            },
            {
              "step": 15,
              "variableName": "AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "        event.success();\n\n        ClientSessionContext clientSessionCtx = AuthenticationProcessor.attachSession(authSession, null, session, realm, clientConnection, event);\n        return AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession);\n    }\n\n    private void initLoginEvent(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     AuthenticationSessionModel authSession,\n                                     UserSessionModel userSession,\n                                     ClientSessionContext clientSessionCtx) {\n        return redirectUriBuilder.build();\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "            }\n        }\n\n        return buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "protocol.authenticated(authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "        // The user has successfully logged in and we can clear his/her previous login failure attempts.\n        logSuccess(session, authSession);\n\n        return protocol.authenticated(authSession, userSession, clientSessionCtx);\n\n    }\n"
            },
            {
              "step": 14,
              "variableName": "redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "                .setHttpHeaders(request.getHttpHeaders())\n                .setUriInfo(uriInfo)\n                .setEventBuilder(event);\n        return redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl);\n\n    }\n"
            },
            {
              "step": 15,
              "variableName": "AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "        event.success();\n\n        ClientSessionContext clientSessionCtx = AuthenticationProcessor.attachSession(authSession, null, session, realm, clientConnection, event);\n        return AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession);\n    }\n\n    private void initLoginEvent(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     AuthenticationSessionModel authSession,\n                                     UserSessionModel userSession,\n                                     ClientSessionContext clientSessionCtx) {\n        return redirectUriBuilder.build();\n    }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "            }\n        }\n\n        return buildRedirectUri(redirectUri, authSession, userSession, clientSessionCtx);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "protocol.authenticated(authSession, userSession, clientSessionCtx)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "        // The user has successfully logged in and we can clear his/her previous login failure attempts.\n        logSuccess(session, authSession);\n\n        return protocol.authenticated(authSession, userSession, clientSessionCtx);\n\n    }\n"
            },
            {
              "step": 14,
              "variableName": "redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/AuthenticationManager.java",
              "type": "Response",
              "code": "                .setHttpHeaders(request.getHttpHeaders())\n                .setUriInfo(uriInfo)\n                .setEventBuilder(event);\n        return redirectAfterSuccessfulFlow(session, realm, userSession, clientSessionCtx, request, uriInfo, clientConnection, event, authSession, protocolImpl);\n\n    }\n"
            },
            {
              "step": 15,
              "variableName": "AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "        event.success();\n\n        ClientSessionContext clientSessionCtx = AuthenticationProcessor.attachSession(authSession, null, session, realm, clientConnection, event);\n        return AuthenticationManager.redirectAfterSuccessfulFlow(session, realm, clientSessionCtx.getClientSession().getUserSession(), clientSessionCtx, request, session.getContext().getUri(), clientConnection, event, authSession);\n    }\n\n    private void initLoginEvent(AuthenticationSessionModel authSession) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 22,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    @Path(REQUIRED_ACTION)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    @Path(REQUIRED_ACTION)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    @Path(REQUIRED_ACTION)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                       @QueryParam(Constants.CLIENT_ID) String clientId,\n                                       @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                       @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    @Path(REQUIRED_ACTION)"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 23,
      "fileName": "LoginActionsService.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                      @QueryParam(Constants.CLIENT_ID) String clientId,\n                                      @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                      @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    private Response processRequireAction(final String authSessionId, final String code, String action, String clientId, String tabId, String clientData) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                      @QueryParam(Constants.CLIENT_ID) String clientId,\n                                      @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                      @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    private Response processRequireAction(final String authSessionId, final String code, String action, String clientId, String tabId, String clientData) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                      @QueryParam(Constants.CLIENT_ID) String clientId,\n                                      @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                      @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    private Response processRequireAction(final String authSessionId, final String code, String action, String clientId, String tabId, String clientData) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(redirectUri.toString())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n\n            for (Map.Entry<String, String> param : params.entrySet()) {"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "            builder.append(\"  </HEAD>\");\n            builder.append(\"  <BODY Onload=\\\"document.forms[0].submit()\\\">\");\n\n            builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(redirectUri.toString()))\n                    .append(\"\\\">\");\n"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "StringBuilder",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "String",
              "code": "\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }\n\n    }"
            },
            {
              "step": 9,
              "variableName": "Response.status(Response.Sta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "ResponseBuilder",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 10,
              "variableName": "Response.status(Response.Status.OK)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/utils/OIDCRedirectUriBuilder.java",
              "type": "Response",
              "code": "            builder.append(\"  </BODY>\");\n            builder.append(\"</HTML>\");\n\n            return Response.status(Response.Status.OK)\n                    .type(MediaType.TEXT_HTML_TYPE)\n                    .entity(builder.toString()).build();\n        }"
            },
            {
              "step": 11,
              "variableName": "redirectUriBuilder.build()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "                                     ClientSessionContext clientSessionCtx,\n                                     Exception ex,\n                                     Error oidcError) {\n        return redirectUriBuilder.build();\n    }\n\n    // For FAPI 1.0 Advanced"
            },
            {
              "step": 12,
              "variableName": "buildRedirectUri(redirectUri, authSession, null, null, null, error)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/OIDCLoginProtocol.java",
              "type": "Response",
              "code": "        // Remove authenticationSession from current tab\n        new AuthenticationSessionManager(session).removeTabIdInAuthenticationSession(realm, authSession);\n\n        return buildRedirectUri(redirectUri, authSession, null, null, null, error);\n    }\n\n    private OIDCRedirectUriBuilder buildErrorRedirectUri(String redirect, String state, Error error, String errorMessage) {"
            },
            {
              "step": 13,
              "variableName": "protocol.sendError(authSession, error, context.getErrorMessage())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        event.detail(Details.CUSTOM_REQUIRED_ACTION, action);\n\n        event.error(Errors.REJECTED_BY_USER);\n        return protocol.sendError(authSession, error, context.getErrorMessage());\n    }\n\n    private boolean isCancelAppInitiatedAction(String providerId, AuthenticationSessionModel authSession, RequiredActionContextResult context) {"
            },
            {
              "step": 14,
              "variableName": "interruptionResponse(context, authSession, action, Error.CONSENT_DENIED)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "        } else if (context.getStatus() == RequiredActionContext.Status.CHALLENGE) {\n            response = context.getChallenge();\n        } else if (context.getStatus() == RequiredActionContext.Status.FAILURE) {\n            response = interruptionResponse(context, authSession, action, Error.CONSENT_DENIED);\n        } else {\n            throw new RuntimeException(\"Unreachable\");\n        }"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 16,
              "variableName": "Response response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        private static final Pattern HEAD_END_PATTERN = Pattern.compile(\"</[hH][eE][aA][dD]>\");\n\n        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }"
            },
            {
              "step": 17,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "Response",
              "code": "        @Override\n        public Response saveResponseAndRedirect(KeycloakSession session, AuthenticationSessionModel authSession, Response response, boolean actionRequest, HttpRequest httpRequest) {\n            if (!shouldReplaceBrowserHistory(actionRequest, session)) {\n                return response;\n            }\n\n            // For now, handle just status 200 with String body. See if more is needed..."
            },
            {
              "step": 18,
              "variableName": "BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"Unreachable\");\n        }\n\n        return BrowserHistoryHelper.getInstance().saveResponseAndRedirect(session, authSession, response, true, request);\n    }\n\n    private Response interruptionResponse(RequiredActionContextResult context, AuthenticationSessionModel authSession, String action, Error error) {"
            },
            {
              "step": 19,
              "variableName": "processRequireAction(authSessionId, code, action, clientId, tabId, clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "",
              "code": "                                      @QueryParam(Constants.CLIENT_ID) String clientId,\n                                      @QueryParam(Constants.CLIENT_DATA) String clientData,\n                                      @QueryParam(Constants.TAB_ID) String tabId) {\n        return processRequireAction(authSessionId, code, action, clientId, tabId, clientData);\n    }\n\n    private Response processRequireAction(final String authSessionId, final String code, String action, String clientId, String tabId, String clientData) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 24,
      "fileName": "BrowserHistoryHelper.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "Map",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 1,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "updater.getEntity().getAuthNotes().get(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "(updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "... : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "authSession.getAuthNote(CACHED_RESPONSE)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "String",
              "code": "\n        @Override\n        public Response loadSavedResponse(KeycloakSession session, AuthenticationSessionModel authSession) {\n            String savedResponse = authSession.getAuthNote(CACHED_RESPONSE);\n            if (savedResponse != null) {\n                authSession.removeAuthNote(CACHED_RESPONSE);\n"
            },
            {
              "step": 5,
              "variableName": "savedResponse",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/BrowserHistoryHelper.java",
              "type": "",
              "code": "                    logger.tracef(\"Restored previously saved request\");\n                }\n\n                Response.ResponseBuilder builder = Response.status(200).type(MediaType.TEXT_HTML_UTF_8).entity(savedResponse);\n                return builder.build();\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 25,
      "fileName": "PushButtonAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "Map",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 1,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "updater.getEntity().getAuthNotes().get(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "(updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "... : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "authSession.getAuthNote(ACTIVE_CODE)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/CodeGenerateUtil.java",
              "type": "String",
              "code": "\n        @Override\n        public String retrieveCode(KeycloakSession session, AuthenticationSessionModel authSession) {\n            String nextCode = authSession.getAuthNote(ACTIVE_CODE);\n            if (nextCode == null) {\n                String actionId = Base64Url.encode(SecretGenerator.getInstance().randomBytes());\n                authSession.setAuthNote(ACTIVE_CODE, actionId);"
            },
            {
              "step": 5,
              "variableName": "nextCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/CodeGenerateUtil.java",
              "type": "String",
              "code": "                logger.debug(\"Code already generated for authentication session, using same code\");\n            }\n\n            return nextCode;\n        }\n\n"
            },
            {
              "step": 6,
              "variableName": "parser.retrieveCode(session, commonLoginSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/managers/ClientSessionCode.java",
              "type": "String",
              "code": "\n    public String getOrGenerateCode() {\n        CodeGenerateUtil.ClientSessionParser parser = CodeGenerateUtil.getParser(commonLoginSession.getClass());\n        return parser.retrieveCode(session, commonLoginSession);\n    }\n\n}"
            },
            {
              "step": 7,
              "variableName": "accessCode.getOrGenerateCode()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "    public String generateCode() {\n        ClientSessionCode accessCode = new ClientSessionCode(session, getRealm(), getAuthenticationSession());\n        authenticationSession.getParentSession().setTimestamp(Time.currentTime());\n        return accessCode.getOrGenerateCode();\n    }\n\n    public EventBuilder newEvent() {"
            },
            {
              "step": 8,
              "variableName": "generateCode()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "\n        @Override\n        public String generateAccessCode() {\n            return generateCode();\n        }\n\n"
            },
            {
              "step": 9,
              "variableName": "context.generateAccessCode()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "\n    @Override\n    public void authenticate(AuthenticationFlowContext context) {\n        String accessCode = context.generateAccessCode();\n        String actionUrl = context.getActionUrl(accessCode).toString();\n\n        StringBuilder response = new StringBuilder(\"<html><head><title>PushTheButton</title></head><body>\");"
            },
            {
              "step": 10,
              "variableName": "accessCode",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "    @Override\n    public void authenticate(AuthenticationFlowContext context) {\n        String accessCode = context.generateAccessCode();\n        String actionUrl = context.getActionUrl(accessCode).toString();\n\n        StringBuilder response = new StringBuilder(\"<html><head><title>PushTheButton</title></head><body>\");\n"
            },
            {
              "step": 11,
              "variableName": "String code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)"
            },
            {
              "step": 12,
              "variableName": "code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())\n                    .queryParam(Constants.CLIENT_ID, getAuthenticationSession().getClient().getClientId())\n                    .queryParam(Constants.TAB_ID, getAuthenticationSession().getTabId())"
            },
            {
              "step": 13,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 14,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 15,
              "variableName": "LoginActionsService.loginActionsBaseUrl(",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 16,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 17,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 18,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 19,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 20,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "URI",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 21,
              "variableName": "context.getActionUrl(accessCode)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "URI",
              "code": "    @Override\n    public void authenticate(AuthenticationFlowContext context) {\n        String accessCode = context.generateAccessCode();\n        String actionUrl = context.getActionUrl(accessCode).toString();\n\n        StringBuilder response = new StringBuilder(\"<html><head><title>PushTheButton</title></head><body>\");\n"
            },
            {
              "step": 22,
              "variableName": "context.getActionUrl(accessCode).toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "    @Override\n    public void authenticate(AuthenticationFlowContext context) {\n        String accessCode = context.generateAccessCode();\n        String actionUrl = context.getActionUrl(accessCode).toString();\n\n        StringBuilder response = new StringBuilder(\"<html><head><title>PushTheButton</title></head><body>\");\n"
            },
            {
              "step": 23,
              "variableName": "\"<form method='POST' action='\" + actionUrl + \"'>\"",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");\n        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");"
            },
            {
              "step": 24,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");\n        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");"
            },
            {
              "step": 25,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 26,
              "variableName": "response.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 27,
              "variableName": "html",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "",
              "code": "        Response jaxrsResponse = Response\n                .status(Response.Status.OK)\n                .type(\"text/html\")\n                .entity(html)\n                .build();\n\n        context.challenge(jaxrsResponse);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/entities/UserEntity.java",
              "type": "String",
              "code": "    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email, boolean allowDuplicate) {"
            },
            {
              "step": 1,
              "variableName": "user.getEmail()",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java",
              "type": "String",
              "code": "        } else if (UserModel.LAST_NAME.equals(name)) {\n            return user.getLastName();\n        } else if (UserModel.EMAIL.equals(name)) {\n            return user.getEmail();\n        } else if (UserModel.USERNAME.equals(name)) {\n            return user.getUsername();\n        }"
            },
            {
              "step": 2,
              "variableName": "updated.getFirstAttribute(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getFirstAttribute(String name) {\n        if (updated != null) return updated.getFirstAttribute(name);\n        return cached.getFirstAttribute(name, modelSupplier);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "getFirstAttribute(UserModel.USERNAME)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserAdapter.java",
              "type": "String",
              "code": "    @Override\n    public String getUsername() {\n        if (updated != null) return updated.getUsername();\n        return getFirstAttribute(UserModel.USERNAME);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "user.getUsername()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        if (user == null) {\n            response.append(\"No authenticated user<br>\");\n        } else {\n            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");"
            },
            {
              "step": 5,
              "variableName": "\"Authenticated user: \" + user.getUsername() + \"<br>\"",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        if (user == null) {\n            response.append(\"No authenticated user<br>\");\n        } else {\n            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");"
            },
            {
              "step": 6,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "        if (user == null) {\n            response.append(\"No authenticated user<br>\");\n        } else {\n            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");"
            },
            {
              "step": 7,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 8,
              "variableName": "response.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 9,
              "variableName": "html",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "",
              "code": "        Response jaxrsResponse = Response\n                .status(Response.Status.OK)\n                .type(\"text/html\")\n                .entity(html)\n                .build();\n\n        context.challenge(jaxrsResponse);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "email",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/entities/UserEntity.java",
              "type": "String",
              "code": "    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email, boolean allowDuplicate) {"
            },
            {
              "step": 1,
              "variableName": "user.getEmail()",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/UserAdapter.java",
              "type": "String",
              "code": "        } else if (UserModel.LAST_NAME.equals(name)) {\n            return user.getLastName();\n        } else if (UserModel.EMAIL.equals(name)) {\n            return user.getEmail();\n        } else if (UserModel.USERNAME.equals(name)) {\n            return user.getUsername();\n        }"
            },
            {
              "step": 2,
              "variableName": "delegate.getFirstAttribute(name)",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/utils/UserModelDelegate.java",
              "type": "String",
              "code": "\n    @Override\n    public String getFirstAttribute(String name) {\n        return delegate.getFirstAttribute(name);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "updated.getFirstAttribute(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getFirstAttribute(String name) {\n        if (updated != null) return updated.getFirstAttribute(name);\n        return cached.getFirstAttribute(name, modelSupplier);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "getFirstAttribute(UserModel.USERNAME)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserAdapter.java",
              "type": "String",
              "code": "    @Override\n    public String getUsername() {\n        if (updated != null) return updated.getUsername();\n        return getFirstAttribute(UserModel.USERNAME);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "updated.getUsername()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getUsername() {\n        if (updated != null) return updated.getUsername();\n        return getFirstAttribute(UserModel.USERNAME);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "user.getUsername()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        if (user == null) {\n            response.append(\"No authenticated user<br>\");\n        } else {\n            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");"
            },
            {
              "step": 7,
              "variableName": "\"Authenticated user: \" + user.getUsername() + \"<br>\"",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        if (user == null) {\n            response.append(\"No authenticated user<br>\");\n        } else {\n            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");"
            },
            {
              "step": 8,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "        if (user == null) {\n            response.append(\"No authenticated user<br>\");\n        } else {\n            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");"
            },
            {
              "step": 9,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 10,
              "variableName": "response.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 11,
              "variableName": "html",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "",
              "code": "        Response jaxrsResponse = Response\n                .status(Response.Status.OK)\n                .type(\"text/html\")\n                .entity(html)\n                .build();\n\n        context.challenge(jaxrsResponse);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "accessCode",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "    @Override\n    public void authenticate(AuthenticationFlowContext context) {\n        String accessCode = context.generateAccessCode();\n        String actionUrl = context.getActionUrl(accessCode).toString();\n\n        StringBuilder response = new StringBuilder(\"<html><head><title>PushTheButton</title></head><body>\");\n"
            },
            {
              "step": 1,
              "variableName": "String code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)"
            },
            {
              "step": 2,
              "variableName": "code",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "String",
              "code": "        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())\n                    .queryParam(Constants.CLIENT_ID, getAuthenticationSession().getClient().getClientId())\n                    .queryParam(Constants.TAB_ID, getAuthenticationSession().getTabId())"
            },
            {
              "step": 3,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "Object[] [[]] : String",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 4,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 5,
              "variableName": "LoginActionsService.loginActionsBaseUrl(",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 6,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 7,
              "variableName": "LoginActionsService.loginActionsBaseUrl(getUriInfo()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 8,
              "variableName": "LoginActionsService.loginActionsBas",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "\n        @Override\n        public URI getActionUrl(String code) {\n            UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(getUriInfo())\n                    .path(AuthenticationProcessor.this.flowPath)\n                    .queryParam(LoginActionsService.SESSION_CODE, code)\n                    .queryParam(Constants.EXECUTION, getExecution().getId())"
            },
            {
              "step": 9,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "UriBuilder",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 10,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java",
              "type": "URI",
              "code": "            if (getUriInfo().getQueryParameters().containsKey(LoginActionsService.AUTH_SESSION_ID)) {\n                uriBuilder.queryParam(LoginActionsService.AUTH_SESSION_ID, getAuthenticationSession().getParentSession().getId());\n            }\n            return uriBuilder\n                    .build(getRealm().getName());\n        }\n"
            },
            {
              "step": 11,
              "variableName": "context.getActionUrl(accessCode)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "URI",
              "code": "    @Override\n    public void authenticate(AuthenticationFlowContext context) {\n        String accessCode = context.generateAccessCode();\n        String actionUrl = context.getActionUrl(accessCode).toString();\n\n        StringBuilder response = new StringBuilder(\"<html><head><title>PushTheButton</title></head><body>\");\n"
            },
            {
              "step": 12,
              "variableName": "context.getActionUrl(accessCode).toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "    @Override\n    public void authenticate(AuthenticationFlowContext context) {\n        String accessCode = context.generateAccessCode();\n        String actionUrl = context.getActionUrl(accessCode).toString();\n\n        StringBuilder response = new StringBuilder(\"<html><head><title>PushTheButton</title></head><body>\");\n"
            },
            {
              "step": 13,
              "variableName": "\"<form method='POST' action='\" + actionUrl + \"'>\"",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");\n        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");"
            },
            {
              "step": 14,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "            response.append(\"Authenticated user: \" + user.getUsername() + \"<br>\");\n        }\n\n        response.append(\"<form method='POST' action='\" + actionUrl + \"'>\");\n        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");"
            },
            {
              "step": 15,
              "variableName": "response",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "StringBuilder",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 16,
              "variableName": "response.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "String",
              "code": "        response.append(\" This is the Test Approver. Press login to continue.<br>\");\n        response.append(\" <input type='submit' name='submit1' value='Submit' />\");\n        response.append(\"</form></body></html>\");\n        String html = response.toString();\n\n        Response jaxrsResponse = Response\n                .status(Response.Status.OK)"
            },
            {
              "step": 17,
              "variableName": "html",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/authentication/PushButtonAuthenticator.java",
              "type": "",
              "code": "        Response jaxrsResponse = Response\n                .status(Response.Status.OK)\n                .type(\"text/html\")\n                .entity(html)\n                .build();\n\n        context.challenge(jaxrsResponse);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 26,
      "fileName": "TestingResourceProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "        for (int i = 0; i < value.length(); i++) {\n            char chr = value.charAt(i);\n\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(param.getValue())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "String",
              "code": "            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))\n                    .append(\"\\\" />\");\n        }\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"  <INPUT TYPE=",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "        builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + postRequestUrl + \"\\\">\");\n\n        for (Map.Entry<String, String> param : params.entrySet()) {\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "\n            if (chr == '<') {\n                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(param.getValue())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "String",
              "code": "            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))\n                    .append(\"\\\" />\");\n        }\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"  <INPUT TYPE=",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "        builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + postRequestUrl + \"\\\">\");\n\n        for (Map.Entry<String, String> param : params.entrySet()) {\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&lt;\");\n            } else if (chr == '>') {\n                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(param.getValue())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "String",
              "code": "            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))\n                    .append(\"\\\" />\");\n        }\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"  <INPUT TYPE=",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "        builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + postRequestUrl + \"\\\">\");\n\n        for (Map.Entry<String, String> param : params.entrySet()) {\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "                escaped.append(\"&gt;\");\n            } else if (chr == '\"') {\n                escaped.append(\"&quot;\");\n            } else if (chr == '\\'') {\n                escaped.append(\"&apos;\");\n            } else if (chr == '&') {\n                escaped.append(\"&amp;\");"
            },
            {
              "step": 1,
              "variableName": "chr",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "Number",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            } else if (chr == '&') {\n                escaped.append(\"&amp;\");\n            } else {\n                escaped.append(chr);\n            }\n        }\n"
            },
            {
              "step": 3,
              "variableName": "escaped",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "StringBuilder",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 4,
              "variableName": "escaped.toString()",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/HtmlUtils.java",
              "type": "String",
              "code": "            }\n        }\n\n        return escaped.toString();\n    }\n\n}"
            },
            {
              "step": 5,
              "variableName": "HtmlUtils.escapeAttribute(param.getValue())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "String",
              "code": "            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))\n                    .append(\"\\\" />\");\n        }\n"
            },
            {
              "step": 6,
              "variableName": "builder.append(\"  <INPUT TYPE=",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "        builder.append(\"    <FORM METHOD=\\\"POST\\\" ACTION=\\\"\" + postRequestUrl + \"\\\">\");\n\n        for (Map.Entry<String, String> param : params.entrySet()) {\n            builder.append(\"  <INPUT TYPE=\\\"HIDDEN\\\" NAME=\\\"\")\n                    .append(param.getKey())\n                    .append(\"\\\" VALUE=\\\"\")\n                    .append(HtmlUtils.escapeAttribute(param.getValue()))"
            },
            {
              "step": 7,
              "variableName": "builder",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "StringBuilder",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "builder.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/rest/TestingResourceProvider.java",
              "type": "",
              "code": "\n        return Response.status(Response.Status.OK)\n                .type(jakarta.ws.rs.core.MediaType.TEXT_HTML_TYPE)\n                .entity(builder.toString()).build();\n\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 27,
      "fileName": "SendUsernameServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sessionIndex",
              "uri": "keycloak-26.1.2/adapters/saml/core/src/main/java/org/keycloak/adapters/saml/SamlSession.java",
              "type": "String",
              "code": "    }\n\n    public String getSessionIndex() {\n        return sessionIndex;\n    }\n\n    public XMLGregorianCalendar getSessionNotOnOrAfter() {"
            },
            {
              "step": 1,
              "variableName": "samlSession.getSessionIndex()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            final SamlSession samlSession = (SamlSession) httpServletRequest.getSession(false).getAttribute(SamlSession.class.getName());\n\n            if (samlSession != null) {\n                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;"
            },
            {
              "step": 2,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;\n            }\n\n            return \"SamlSession doesn't exist\";"
            },
            {
              "step": 3,
              "variableName": "getSessionInfo()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 5,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 8,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "     */\n    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();"
            },
            {
              "step": 1,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 3,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 4,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 6,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 8,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 9,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 10,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 13,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 1,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 3,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 6,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 8,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 9,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 10,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "        output += \"principal=\";\n        Principal principal = httpServletRequest.getUserPrincipal();\n\n        if (principal == null) {\n            return output + \"null\";\n        }\n"
            },
            {
              "step": 1,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 2,
              "variableName": "principal.getName()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 3,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 4,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 5,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 28,
      "fileName": "SendUsernameServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sessionIndex",
              "uri": "keycloak-26.1.2/adapters/saml/core/src/main/java/org/keycloak/adapters/saml/SamlSession.java",
              "type": "String",
              "code": "    }\n\n    public String getSessionIndex() {\n        return sessionIndex;\n    }\n\n    public XMLGregorianCalendar getSessionNotOnOrAfter() {"
            },
            {
              "step": 1,
              "variableName": "samlSession.getSessionIndex()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            final SamlSession samlSession = (SamlSession) httpServletRequest.getSession(false).getAttribute(SamlSession.class.getName());\n\n            if (samlSession != null) {\n                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;"
            },
            {
              "step": 2,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;\n            }\n\n            return \"SamlSession doesn't exist\";"
            },
            {
              "step": 3,
              "variableName": "getSessionInfo()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 5,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "     */\n    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();"
            },
            {
              "step": 1,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 3,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 4,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 6,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 8,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 9,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 10,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 13,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 1,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 3,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 6,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 8,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 9,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 10,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "        output += \"principal=\";\n        Principal principal = httpServletRequest.getUserPrincipal();\n\n        if (principal == null) {\n            return output + \"null\";\n        }\n"
            },
            {
              "step": 1,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 2,
              "variableName": "principal.getName()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 3,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 4,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 5,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 29,
      "fileName": "SendUsernameServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "     */\n    public List<String> getFriendlyAttributes(String friendlyName) {\n        List<String> list = friendlyAttributes.get(friendlyName);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();"
            },
            {
              "step": 1,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getFriendlyAttributes(String friendlyName) {\n        List<String> list = friendlyAttributes.get(friendlyName);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getFriendlyAttributes(String friendlyName) {\n        List<String> list = friendlyAttributes.get(friendlyName);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 3,
              "variableName": "principal.getFriendlyAttributes(friendlyAttributeName)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "            b.append(\"friendly \")\n                    .append(friendlyAttributeName)\n                    .append(\": \")\n                    .append(joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName)))\n                    .append(\"<br />\");\n        }\n"
            },
            {
              "step": 4,
              "variableName": "List<String> list",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "        return output + \"</body></html>\";\n    }\n\n    private static String joinList(String delimeter, List<String> list) {\n        if (list == null || list.size() <= 0) return \"\";\n\n        StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 5,
              "variableName": "list",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n        for (int i = 0; i < list.size(); i++) {\n\n            sb.append(list.get(i));\n\n            // if not the last item\n            if (i != list.size() - 1) {"
            },
            {
              "step": 6,
              "variableName": "list.get(i)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        for (int i = 0; i < list.size(); i++) {\n\n            sb.append(list.get(i));\n\n            // if not the last item\n            if (i != list.size() - 1) {"
            },
            {
              "step": 7,
              "variableName": "sb",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "\n        for (int i = 0; i < list.size(); i++) {\n\n            sb.append(list.get(i));\n\n            // if not the last item\n            if (i != list.size() - 1) {"
            },
            {
              "step": 8,
              "variableName": "sb",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "\n        }\n\n        return sb.toString();\n    }\n\n    private String getAttributes() {"
            },
            {
              "step": 9,
              "variableName": "sb.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        }\n\n        return sb.toString();\n    }\n\n    private String getAttributes() {"
            },
            {
              "step": 10,
              "variableName": "joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName))",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            b.append(\"friendly \")\n                    .append(friendlyAttributeName)\n                    .append(\": \")\n                    .append(joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName)))\n                    .append(\"<br />\");\n        }\n"
            },
            {
              "step": 11,
              "variableName": "b.append(\"friendly \")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "        }\n\n        for (String friendlyAttributeName : principal.getFriendlyNames()) {\n            b.append(\"friendly \")\n                    .append(friendlyAttributeName)\n                    .append(\": \")\n                    .append(joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName)))"
            },
            {
              "step": 12,
              "variableName": "b",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "                    .append(\"<br />\");\n        }\n\n        return b.toString();\n    }\n\n    @GET"
            },
            {
              "step": 13,
              "variableName": "b.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "                    .append(\"<br />\");\n        }\n\n        return b.toString();\n    }\n\n    @GET"
            },
            {
              "step": 14,
              "variableName": "getAttributes()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 15,
              "variableName": "Response.ok(getAttributes())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 16,
              "variableName": "Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 17,
              "variableName": "Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getFriendlyAttributes(String friendlyName) {\n        List<String> list = friendlyAttributes.get(friendlyName);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 1,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getFriendlyAttributes(String friendlyName) {\n        List<String> list = friendlyAttributes.get(friendlyName);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "principal.getFriendlyAttributes(friendlyAttributeName)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "            b.append(\"friendly \")\n                    .append(friendlyAttributeName)\n                    .append(\": \")\n                    .append(joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName)))\n                    .append(\"<br />\");\n        }\n"
            },
            {
              "step": 3,
              "variableName": "List<String> list",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "        return output + \"</body></html>\";\n    }\n\n    private static String joinList(String delimeter, List<String> list) {\n        if (list == null || list.size() <= 0) return \"\";\n\n        StringBuilder sb = new StringBuilder();"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n        for (int i = 0; i < list.size(); i++) {\n\n            sb.append(list.get(i));\n\n            // if not the last item\n            if (i != list.size() - 1) {"
            },
            {
              "step": 5,
              "variableName": "list.get(i)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        for (int i = 0; i < list.size(); i++) {\n\n            sb.append(list.get(i));\n\n            // if not the last item\n            if (i != list.size() - 1) {"
            },
            {
              "step": 6,
              "variableName": "sb",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "\n        for (int i = 0; i < list.size(); i++) {\n\n            sb.append(list.get(i));\n\n            // if not the last item\n            if (i != list.size() - 1) {"
            },
            {
              "step": 7,
              "variableName": "sb",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "\n        }\n\n        return sb.toString();\n    }\n\n    private String getAttributes() {"
            },
            {
              "step": 8,
              "variableName": "sb.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        }\n\n        return sb.toString();\n    }\n\n    private String getAttributes() {"
            },
            {
              "step": 9,
              "variableName": "joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName))",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            b.append(\"friendly \")\n                    .append(friendlyAttributeName)\n                    .append(\": \")\n                    .append(joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName)))\n                    .append(\"<br />\");\n        }\n"
            },
            {
              "step": 10,
              "variableName": "b.append(\"friendly \")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "        }\n\n        for (String friendlyAttributeName : principal.getFriendlyNames()) {\n            b.append(\"friendly \")\n                    .append(friendlyAttributeName)\n                    .append(\": \")\n                    .append(joinList(\",\", principal.getFriendlyAttributes(friendlyAttributeName)))"
            },
            {
              "step": 11,
              "variableName": "b",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "                    .append(\"<br />\");\n        }\n\n        return b.toString();\n    }\n\n    @GET"
            },
            {
              "step": 12,
              "variableName": "b.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "                    .append(\"<br />\");\n        }\n\n        return b.toString();\n    }\n\n    @GET"
            },
            {
              "step": 13,
              "variableName": "getAttributes()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 14,
              "variableName": "Response.ok(getAttributes())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 15,
              "variableName": "Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 16,
              "variableName": "Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "        System.out.println(\"In SendUsername Servlet getSentPrincipal()\");\n        sentPrincipal = httpServletRequest.getUserPrincipal();\n\n        return Response.ok(getAttributes()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 30,
      "fileName": "SendUsernameServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sessionIndex",
              "uri": "keycloak-26.1.2/adapters/saml/core/src/main/java/org/keycloak/adapters/saml/SamlSession.java",
              "type": "String",
              "code": "    }\n\n    public String getSessionIndex() {\n        return sessionIndex;\n    }\n\n    public XMLGregorianCalendar getSessionNotOnOrAfter() {"
            },
            {
              "step": 1,
              "variableName": "samlSession.getSessionIndex()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            final SamlSession samlSession = (SamlSession) httpServletRequest.getSession(false).getAttribute(SamlSession.class.getName());\n\n            if (samlSession != null) {\n                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;"
            },
            {
              "step": 2,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;\n            }\n\n            return \"SamlSession doesn't exist\";"
            },
            {
              "step": 3,
              "variableName": "getSessionInfo()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 5,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 8,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 9,
              "variableName": "doGet(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doGetElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doGetElseWhere() - path: \" + path);\n        return doGet(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "     */\n    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();"
            },
            {
              "step": 1,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 3,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 4,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 6,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 8,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 9,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 10,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 13,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 14,
              "variableName": "doGet(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doGetElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doGetElseWhere() - path: \" + path);\n        return doGet(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 1,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 3,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 6,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 8,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 9,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 10,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 13,
              "variableName": "doGet(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doGetElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doGetElseWhere() - path: \" + path);\n        return doGet(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "        output += \"principal=\";\n        Principal principal = httpServletRequest.getUserPrincipal();\n\n        if (principal == null) {\n            return output + \"null\";\n        }\n"
            },
            {
              "step": 1,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 2,
              "variableName": "principal.getName()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 3,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 4,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 5,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            return Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build();\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n    }\n\n    @POST"
            },
            {
              "step": 8,
              "variableName": "doGet(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doGetElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doGetElseWhere() - path: \" + path);\n        return doGet(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 31,
      "fileName": "SendUsernameServlet.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "sessionIndex",
              "uri": "keycloak-26.1.2/adapters/saml/core/src/main/java/org/keycloak/adapters/saml/SamlSession.java",
              "type": "String",
              "code": "    }\n\n    public String getSessionIndex() {\n        return sessionIndex;\n    }\n\n    public XMLGregorianCalendar getSessionNotOnOrAfter() {"
            },
            {
              "step": 1,
              "variableName": "samlSession.getSessionIndex()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            final SamlSession samlSession = (SamlSession) httpServletRequest.getSession(false).getAttribute(SamlSession.class.getName());\n\n            if (samlSession != null) {\n                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;"
            },
            {
              "step": 2,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "                String output = \"Session ID: \" + samlSession.getSessionIndex() + \"\\n\";\n                XMLGregorianCalendar sessionNotOnOrAfter = samlSession.getSessionNotOnOrAfter();\n                output += \"SessionNotOnOrAfter: \" + (sessionNotOnOrAfter == null ? \"null\" : sessionNotOnOrAfter.toString());\n                return output;\n            }\n\n            return \"SamlSession doesn't exist\";"
            },
            {
              "step": 3,
              "variableName": "getSessionInfo()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 5,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 9,
              "variableName": "doPost(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doPostElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doPostElseWhere() - path: \" + path);\n        return doPost(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "     */\n    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();"
            },
            {
              "step": 1,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 3,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 4,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 6,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 8,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 9,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 10,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 13,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 14,
              "variableName": "doPost(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doPostElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doPostElseWhere() - path: \" + path);\n        return doPost(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "list",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 1,
              "variableName": "Collections.unmodifiableList(list)",
              "uri": "keycloak-26.1.2/adapters/saml/core-public/src/main/java/org/keycloak/adapters/saml/SamlPrincipal.java",
              "type": "List [<element>] : Object",
              "code": "    public List<String> getAttributes(String name) {\n        List<String> list = attributes.get(name);\n        if (list != null) {\n            return Collections.unmodifiableList(list);\n        } else {\n            return Collections.emptyList();\n        }"
            },
            {
              "step": 2,
              "variableName": "((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "List [<element>] : Object",
              "code": "\n    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n"
            },
            {
              "step": 3,
              "variableName": "role",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 4,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "    private String getRoles() {\n        StringBuilder output = new StringBuilder(\"Roles: \");\n        for (String role : ((SamlPrincipal) httpServletRequest.getUserPrincipal()).getAttributes(\"Roles\")) {\n            output.append(role).append(\",\");\n        }\n\n        return output.toString();"
            },
            {
              "step": 5,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "StringBuilder",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 6,
              "variableName": "output.toString()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            output.append(role).append(\",\");\n        }\n\n        return output.toString();\n    }\n\n    private String getErrorOutput(Integer statusCode) {"
            },
            {
              "step": 7,
              "variableName": "getRoles()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }"
            },
            {
              "step": 8,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 9,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 10,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 13,
              "variableName": "doPost(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doPostElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doPostElseWhere() - path: \" + path);\n        return doPost(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "        output += \"principal=\";\n        Principal principal = httpServletRequest.getUserPrincipal();\n\n        if (principal == null) {\n            return output + \"null\";\n        }\n"
            },
            {
              "step": 1,
              "variableName": "principal",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Principal",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 2,
              "variableName": "principal.getName()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "\n        sentPrincipal = principal;\n\n        output += principal.getName() + \"\\n\";\n        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n"
            },
            {
              "step": 3,
              "variableName": "output",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "        output += getSessionInfo() + \"\\n\";\n        output += getRoles() + \"\\n\";\n\n        return output;\n    }\n\n    private String getSessionInfo() {"
            },
            {
              "step": 4,
              "variableName": "getOutput()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "String",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 5,
              "variableName": "Response.ok(getOutput())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 6,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\")",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "ResponseBuilder",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "Response",
              "code": "            throw new RuntimeException(\"User: \" + httpServletRequest.getUserPrincipal() + \" do not have required role\");\n        }\n\n        return Response.ok(getOutput()).header(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_TYPE + \";charset=UTF-8\").build();\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "doPost(checkRolesFlag)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/test-apps/servlets/src/main/java/org/keycloak/testsuite/adapter/servlet/SendUsernameServlet.java",
              "type": "",
              "code": "    @Path(\"{path}\")\n    public Response doPostElseWhere(@PathParam(\"path\") String path, @QueryParam(\"checkRoles\") boolean checkRolesFlag) throws IOException {\n        System.out.println(\"In SendUsername Servlet doPostElseWhere() - path: \" + path);\n        return doPost(checkRolesFlag);\n    }\n\n    @POST"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "209": [
    {
      "resultIndex": 32,
      "fileName": "KerberosJdkProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "userStorageConfig",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/CommonKerberosConfig.java",
              "type": "MultivaluedHashMap",
              "code": "    }\n\n    protected MultivaluedHashMap<String, String> getConfig() {\n        return userStorageConfig;\n    }\n\n    // Should be always true for KerberosFederationProvider"
            },
            {
              "step": 1,
              "variableName": "getConfig()",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/CommonKerberosConfig.java",
              "type": "MultivaluedHashMap",
              "code": "    }\n\n    public String getKeyTab() {\n        return getConfig().getFirst(KerberosConstants.KEYTAB);\n    }\n\n    public boolean isDebug() {"
            },
            {
              "step": 2,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 4,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 5,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : List",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 6,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : List",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 7,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 8,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 9,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Object",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 10,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : Object",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 11,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Object",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 12,
              "variableName": "getConfig().getFirst(KerberosConstants.KEYTAB)",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/CommonKerberosConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getKeyTab() {\n        return getConfig().getFirst(KerberosConstants.KEYTAB);\n    }\n\n    public boolean isDebug() {"
            },
            {
              "step": 13,
              "variableName": "config.getKeyTab()",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosServerSubjectAuthenticator.java",
              "type": "String",
              "code": "\n\n    protected Configuration createJaasConfiguration() {\n        return KerberosJdkProvider.getProvider().createJaasConfigurationForServer(config.getKeyTab(), config.getServerPrincipal(), config.isDebug());\n    }\n\n}"
            },
            {
              "step": 14,
              "variableName": "String keytab",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/KerberosJdkProvider.java",
              "type": "String",
              "code": "    private static class IBMJDKProvider extends KerberosJdkProvider {\n\n        @Override\n        public Configuration createJaasConfigurationForServer(String keytab, final String serverPrincipal, final boolean debug) {\n            final String keytabUrl = getKeytabURL(keytab);\n\n            return new Configuration() {"
            },
            {
              "step": 15,
              "variableName": "keytab",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/KerberosJdkProvider.java",
              "type": "String",
              "code": "\n        @Override\n        public Configuration createJaasConfigurationForServer(String keytab, final String serverPrincipal, final boolean debug) {\n            final String keytabUrl = getKeytabURL(keytab);\n\n            return new Configuration() {\n"
            },
            {
              "step": 16,
              "variableName": "String keytab",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/KerberosJdkProvider.java",
              "type": "String",
              "code": "            };\n        }\n\n        private String getKeytabURL(String keytab) {\n            try {\n                return new File(keytab).toURI().toURL().toString();\n            } catch (MalformedURLException mfe) {"
            },
            {
              "step": 17,
              "variableName": "\"Invalid keytab location specified in configuration: \" + keytab",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/KerberosJdkProvider.java",
              "type": "",
              "code": "            try {\n                return new File(keytab).toURI().toURL().toString();\n            } catch (MalformedURLException mfe) {\n                System.err.println(\"Invalid keytab location specified in configuration: \" + keytab);\n                mfe.printStackTrace();\n                return keytab;\n            }"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "214": [
    {
      "resultIndex": 33,
      "fileName": "Keycloak.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "bindHttpPort",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "Number",
              "code": "    }\n\n    public int getBindHttpPort() {\n        return bindHttpPort;\n    }\n\n    public void setBindHttpPort(int bindHttpPort) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getBindHttpPort()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "Number",
              "code": "            }\n        }\n\n        commands.add(\"--http-port=\" + configuration.getBindHttpPort());\n        commands.add(\"--https-port=\" + configuration.getBindHttpsPort());\n        \n        commands.add(\"--http-relative-path=/auth\");"
            },
            {
              "step": 2,
              "variableName": "\"--http-port=\" + configuration.getBindHttpPort()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "            }\n        }\n\n        commands.add(\"--http-port=\" + configuration.getBindHttpPort());\n        commands.add(\"--https-port=\" + configuration.getBindHttpsPort());\n        \n        commands.add(\"--http-relative-path=/auth\");"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "            }\n        }\n\n        commands.add(\"--http-port=\" + configuration.getBindHttpPort());\n        commands.add(\"--https-port=\" + configuration.getBindHttpsPort());\n        \n        commands.add(\"--http-relative-path=/auth\");"
            },
            {
              "step": 4,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n        commands.addAll(getAdditionalBuildArgs());\n\n        commands = configureArgs(commands);\n\n        final StoreProvider storeProvider = StoreProvider.getCurrentProvider();\n        final String cacheMode = System.getProperty(\"auth.server.quarkus.cluster.config\", \"local\");"
            },
            {
              "step": 5,
              "variableName": "List<String> args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    @Override\n    protected List<String> configureArgs(List<String> args) {\n        System.setProperty(\"quarkus.http.test-port\", String.valueOf(configuration.getBindHttpPort()));\n        System.setProperty(\"quarkus.http.test-ssl-port\", String.valueOf(configuration.getBindHttpsPort()));\n        return args;"
            },
            {
              "step": 6,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "    protected List<String> configureArgs(List<String> args) {\n        System.setProperty(\"quarkus.http.test-port\", String.valueOf(configuration.getBindHttpPort()));\n        System.setProperty(\"quarkus.http.test-ssl-port\", String.valueOf(configuration.getBindHttpsPort()));\n        return args;\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "configureArgs(commands)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "\n        commands.addAll(getAdditionalBuildArgs());\n\n        commands = configureArgs(commands);\n\n        final StoreProvider storeProvider = StoreProvider.getCurrentProvider();\n        final String cacheMode = System.getProperty(\"auth.server.quarkus.cluster.config\", \"local\");"
            },
            {
              "step": 8,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 9,
              "variableName": "getArgs(new HashMap<>())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "    }\n\n    protected List<String> getArgs() {\n        return getArgs(new HashMap<>());\n    }\n\n    protected List<String> getArgs(Map<String, String> env) {"
            },
            {
              "step": 10,
              "variableName": "getArgs()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "    @Override\n    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();"
            },
            {
              "step": 11,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "ArrayList [<element>] : String",
              "code": "        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();\n        } catch (Exception e) {\n            throw new RuntimeException(e);"
            },
            {
              "step": 12,
              "variableName": "List<String> rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "ArrayList [<element>] : String",
              "code": "            return start(List.of(args));\n        }\n\n        public Keycloak start(List<String> rawArgs) {\n            if (homeDir == null) {\n                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }"
            },
            {
              "step": 13,
              "variableName": "rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "ArrayList [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 14,
              "variableName": "new ArrayList<>(rawArgs)",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "ArrayList [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 15,
              "variableName": "args",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "",
              "code": "                }\n            }\n\n            return new Keycloak(homeDir, version, dependencies, isFipsEnabled).start(args);\n        }\n\n        private <T> void addOptionIfNotSet(List<String> args, Option<T> option) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "keystoreFile",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getKeystoreFile() {\n        return keystoreFile;\n    }\n\n    public void setKeystoreFile(String keystoreFile) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getKeystoreFile()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        log.debugf(\"Keystore file: %s, truststore file: %s\",\n                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());"
            },
            {
              "step": 2,
              "variableName": "\"--https-key-store-file=\" + configuration.getKeystoreFile()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        log.debugf(\"Keystore file: %s, truststore file: %s\",\n                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"Keystore file: %s, truststore file: %s\",\n                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(new HashMap<>())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    protected List<String> getArgs() {\n        return getArgs(new HashMap<>());\n    }\n\n    protected List<String> getArgs(Map<String, String> env) {"
            },
            {
              "step": 8,
              "variableName": "getArgs()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    @Override\n    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();"
            },
            {
              "step": 9,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();\n        } catch (Exception e) {\n            throw new RuntimeException(e);"
            },
            {
              "step": 10,
              "variableName": "List<String> rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "List [<element>] : String",
              "code": "            return start(List.of(args));\n        }\n\n        public Keycloak start(List<String> rawArgs) {\n            if (homeDir == null) {\n                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }"
            },
            {
              "step": 11,
              "variableName": "rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "List [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 12,
              "variableName": "new ArrayList<>(rawArgs)",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "ArrayList [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 13,
              "variableName": "args",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "",
              "code": "                }\n            }\n\n            return new Keycloak(homeDir, version, dependencies, isFipsEnabled).start(args);\n        }\n\n        private <T> void addOptionIfNotSet(List<String> args, Option<T> option) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getKeystorePassword() {\n        return keystorePassword;\n    }\n\n    public void setKeystorePassword(String keystorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getKeystorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 2,
              "variableName": "\"--https-key-store-password=\" + configuration.getKeystorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(new HashMap<>())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    protected List<String> getArgs() {\n        return getArgs(new HashMap<>());\n    }\n\n    protected List<String> getArgs(Map<String, String> env) {"
            },
            {
              "step": 8,
              "variableName": "getArgs()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    @Override\n    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();"
            },
            {
              "step": 9,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();\n        } catch (Exception e) {\n            throw new RuntimeException(e);"
            },
            {
              "step": 10,
              "variableName": "List<String> rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "List [<element>] : String",
              "code": "            return start(List.of(args));\n        }\n\n        public Keycloak start(List<String> rawArgs) {\n            if (homeDir == null) {\n                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }"
            },
            {
              "step": 11,
              "variableName": "rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "List [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 12,
              "variableName": "new ArrayList<>(rawArgs)",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "ArrayList [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 13,
              "variableName": "args",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "",
              "code": "                }\n            }\n\n            return new Keycloak(homeDir, version, dependencies, isFipsEnabled).start(args);\n        }\n\n        private <T> void addOptionIfNotSet(List<String> args, Option<T> option) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "truststorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getTruststorePassword() {\n        return truststorePassword;\n    }\n\n    public void setTruststorePassword(String truststorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 2,
              "variableName": "\"--https-trust-store-password=\" + configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(new HashMap<>())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    protected List<String> getArgs() {\n        return getArgs(new HashMap<>());\n    }\n\n    protected List<String> getArgs(Map<String, String> env) {"
            },
            {
              "step": 8,
              "variableName": "getArgs()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    @Override\n    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();"
            },
            {
              "step": 9,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();\n        } catch (Exception e) {\n            throw new RuntimeException(e);"
            },
            {
              "step": 10,
              "variableName": "List<String> rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "List [<element>] : String",
              "code": "            return start(List.of(args));\n        }\n\n        public Keycloak start(List<String> rawArgs) {\n            if (homeDir == null) {\n                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }"
            },
            {
              "step": 11,
              "variableName": "rawArgs",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "List [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 12,
              "variableName": "new ArrayList<>(rawArgs)",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "ArrayList [<element>] : String",
              "code": "                homeDir = Platform.getPlatform().getTmpDirectory().toPath();\n            }\n\n            List<String> args = new ArrayList<>(rawArgs);\n\n            addOptionIfNotSet(args, HttpOptions.HTTP_ENABLED, true);\n            addOptionIfNotSet(args, HttpOptions.HTTP_PORT);"
            },
            {
              "step": 13,
              "variableName": "args",
              "uri": "keycloak-26.1.2/quarkus/tests/junit5/src/main/java/org/keycloak/Keycloak.java",
              "type": "",
              "code": "                }\n            }\n\n            return new Keycloak(homeDir, version, dependencies, isFipsEnabled).start(args);\n        }\n\n        private <T> void addOptionIfNotSet(List<String> args, Option<T> option) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 34,
      "fileName": "AbstractExec.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "WORK_DIR",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "    }\n\n    public static KcAdmExec.Builder newBuilder() {\n        return (KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcAdmExec execute(String args) {"
            },
            {
              "step": 1,
              "variableName": "String path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected String env;\n    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }"
            },
            {
              "step": 2,
              "variableName": "path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 4,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {"
            },
            {
              "step": 5,
              "variableName": "new KcAdmExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec.Builder newBuilder() {\n        return (KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcAdmExec execute(String args) {"
            },
            {
              "step": 6,
              "variableName": "(KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec.Builder newBuilder() {\n        return (KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcAdmExec execute(String args) {"
            },
            {
              "step": 7,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 8,
              "variableName": "argsLine",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> stdin(InputStream is) {"
            },
            {
              "step": 11,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 12,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    public static class Builder extends AbstractExecBuilder<KcAdmExec> {\n\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();"
            },
            {
              "step": 13,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 14,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 15,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 18,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 20,
              "variableName": "AbstractExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 21,
              "variableName": "super(workDir, argsLine, env, stdin);",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "KcAdmExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "new KcAdmExec(workDir, argsLine, env, stdin)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 24,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }"
            },
            {
              "step": 25,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }\n"
            },
            {
              "step": 26,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "\n    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();"
            },
            {
              "step": 27,
              "variableName": "executeAsync()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();\n        }"
            },
            {
              "step": 28,
              "variableName": "executeAsync",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "    }\n\n\n    public void executeAsync() {\n\n        try {\n            if (OS_ARCH.isWindows()) {"
            },
            {
              "step": 29,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "            if (OS_ARCH.isWindows()) {\n                String cmd = (env != null ? \"set \" + env + \" & \" : \"\") + fixPath(getCmd()) + \" \" + fixQuotes(argsLine);\n                System.out.println(\"Executing: cmd.exe /c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"cmd.exe\", \"/c\", cmd}, null, new File(workDir));\n            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);"
            },
            {
              "step": 30,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "            if (OS_ARCH.isWindows()) {\n                String cmd = (env != null ? \"set \" + env + \" & \" : \"\") + fixPath(getCmd()) + \" \" + fixQuotes(argsLine);\n                System.out.println(\"Executing: cmd.exe /c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"cmd.exe\", \"/c\", cmd}, null, new File(workDir));\n            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);"
            },
            {
              "step": 31,
              "variableName": "new File(workDir)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "",
              "code": "            if (OS_ARCH.isWindows()) {\n                String cmd = (env != null ? \"set \" + env + \" & \" : \"\") + fixPath(getCmd()) + \" \" + fixQuotes(argsLine);\n                System.out.println(\"Executing: cmd.exe /c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"cmd.exe\", \"/c\", cmd}, null, new File(workDir));\n            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "WORK_DIR",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "    }\n\n    public static KcRegExec.Builder newBuilder() {\n        return (KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcRegExec execute(String args) {"
            },
            {
              "step": 1,
              "variableName": "String path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected String env;\n    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }"
            },
            {
              "step": 2,
              "variableName": "path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 4,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {"
            },
            {
              "step": 5,
              "variableName": "new KcRegExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec.Builder newBuilder() {\n        return (KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcRegExec execute(String args) {"
            },
            {
              "step": 6,
              "variableName": "(KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec.Builder newBuilder() {\n        return (KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcRegExec execute(String args) {"
            },
            {
              "step": 7,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 8,
              "variableName": "argsLine",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> stdin(InputStream is) {"
            },
            {
              "step": 11,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 12,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    public static class Builder extends AbstractExecBuilder<KcRegExec> {\n\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();"
            },
            {
              "step": 13,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 14,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 15,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 18,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 20,
              "variableName": "AbstractExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 21,
              "variableName": "super(workDir, argsLine, env, stdin);",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "KcRegExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "new KcRegExec(workDir, argsLine, env, stdin)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 24,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }"
            },
            {
              "step": 25,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }\n"
            },
            {
              "step": 26,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "\n    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();"
            },
            {
              "step": 27,
              "variableName": "executeAsync()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();\n        }"
            },
            {
              "step": 28,
              "variableName": "executeAsync",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "    }\n\n\n    public void executeAsync() {\n\n        try {\n            if (OS_ARCH.isWindows()) {"
            },
            {
              "step": 29,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "            if (OS_ARCH.isWindows()) {\n                String cmd = (env != null ? \"set \" + env + \" & \" : \"\") + fixPath(getCmd()) + \" \" + fixQuotes(argsLine);\n                System.out.println(\"Executing: cmd.exe /c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"cmd.exe\", \"/c\", cmd}, null, new File(workDir));\n            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);"
            },
            {
              "step": 30,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "            if (OS_ARCH.isWindows()) {\n                String cmd = (env != null ? \"set \" + env + \" & \" : \"\") + fixPath(getCmd()) + \" \" + fixQuotes(argsLine);\n                System.out.println(\"Executing: cmd.exe /c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"cmd.exe\", \"/c\", cmd}, null, new File(workDir));\n            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);"
            },
            {
              "step": 31,
              "variableName": "new File(workDir)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "",
              "code": "            if (OS_ARCH.isWindows()) {\n                String cmd = (env != null ? \"set \" + env + \" & \" : \"\") + fixPath(getCmd()) + \" \" + fixQuotes(argsLine);\n                System.out.println(\"Executing: cmd.exe /c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"cmd.exe\", \"/c\", cmd}, null, new File(workDir));\n            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 35,
      "fileName": "AbstractExec.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "WORK_DIR",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "    }\n\n    public static KcAdmExec.Builder newBuilder() {\n        return (KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcAdmExec execute(String args) {"
            },
            {
              "step": 1,
              "variableName": "String path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected String env;\n    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }"
            },
            {
              "step": 2,
              "variableName": "path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 4,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {"
            },
            {
              "step": 5,
              "variableName": "new KcAdmExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec.Builder newBuilder() {\n        return (KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcAdmExec execute(String args) {"
            },
            {
              "step": 6,
              "variableName": "(KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec.Builder newBuilder() {\n        return (KcAdmExec.Builder) new KcAdmExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcAdmExec execute(String args) {"
            },
            {
              "step": 7,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 8,
              "variableName": "argsLine",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> stdin(InputStream is) {"
            },
            {
              "step": 11,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcAdmExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 12,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "    public static class Builder extends AbstractExecBuilder<KcAdmExec> {\n\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();"
            },
            {
              "step": 13,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "Builder [workDir] : String",
              "code": "\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 14,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 15,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "String",
              "code": "    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 18,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 20,
              "variableName": "AbstractExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 21,
              "variableName": "super(workDir, argsLine, env, stdin);",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "KcAdmExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcAdmExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "new KcAdmExec(workDir, argsLine, env, stdin)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "\n        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 24,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "        @Override\n        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }"
            },
            {
              "step": 25,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcAdmExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "        public KcAdmExec execute() {\n            KcAdmExec exe = new KcAdmExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }\n"
            },
            {
              "step": 26,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "\n    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();"
            },
            {
              "step": 27,
              "variableName": "executeAsync()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();\n        }"
            },
            {
              "step": 28,
              "variableName": "executeAsync",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "    }\n\n\n    public void executeAsync() {\n\n        try {\n            if (OS_ARCH.isWindows()) {"
            },
            {
              "step": 29,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcAdmExec [workDir] : String",
              "code": "            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", cmd}, null, new File(workDir));\n            }\n\n            stdoutRunner = new StreamReaderThread(process.getInputStream(), logStreams ? new LoggingOutputStream(\"STDOUT\", stdout) : stdout);"
            },
            {
              "step": 30,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", cmd}, null, new File(workDir));\n            }\n\n            stdoutRunner = new StreamReaderThread(process.getInputStream(), logStreams ? new LoggingOutputStream(\"STDOUT\", stdout) : stdout);"
            },
            {
              "step": 31,
              "variableName": "new File(workDir)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "",
              "code": "            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", cmd}, null, new File(workDir));\n            }\n\n            stdoutRunner = new StreamReaderThread(process.getInputStream(), logStreams ? new LoggingOutputStream(\"STDOUT\", stdout) : stdout);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "WORK_DIR",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "    }\n\n    public static KcRegExec.Builder newBuilder() {\n        return (KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcRegExec execute(String args) {"
            },
            {
              "step": 1,
              "variableName": "String path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected String env;\n    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }"
            },
            {
              "step": 2,
              "variableName": "path",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    protected boolean dumpStreams;\n\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n"
            },
            {
              "step": 4,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> workDir(String path) {\n        this.workDir = path;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {"
            },
            {
              "step": 5,
              "variableName": "new KcRegExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "AbstractExecBuilder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec.Builder newBuilder() {\n        return (KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcRegExec execute(String args) {"
            },
            {
              "step": 6,
              "variableName": "(KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec.Builder newBuilder() {\n        return (KcRegExec.Builder) new KcRegExec.Builder().workDir(WORK_DIR);\n    }\n\n    public static KcRegExec execute(String args) {"
            },
            {
              "step": 7,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 8,
              "variableName": "argsLine",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "        return this;\n    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExecBuilder.java",
              "type": "Builder [workDir] : String",
              "code": "\n    public AbstractExecBuilder<T> argsLine(String cmd) {\n        this.argsLine = cmd;\n        return this;\n    }\n\n    public AbstractExecBuilder<T> stdin(InputStream is) {"
            },
            {
              "step": 11,
              "variableName": "newBuilder()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    }\n\n    public static KcRegExec execute(String args) {\n        return newBuilder()\n                .argsLine(args)\n                .execute();\n    }"
            },
            {
              "step": 12,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "    public static class Builder extends AbstractExecBuilder<KcRegExec> {\n\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();"
            },
            {
              "step": 13,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "Builder [workDir] : String",
              "code": "\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 14,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 15,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 16,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "String",
              "code": "    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 18,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 19,
              "variableName": "this",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }\n\n        this.argsLine = argsLine;"
            },
            {
              "step": 20,
              "variableName": "AbstractExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "AbstractExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    public AbstractExec(String workDir, String argsLine, String env, InputStream stdin) {\n        if (workDir != null) {\n            this.workDir = workDir;\n        }"
            },
            {
              "step": 21,
              "variableName": "super(workDir, argsLine, env, stdin);",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "KcRegExec",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "        this(workDir, argsLine, null, stdin);\n    }\n\n    private KcRegExec(String workDir, String argsLine, String env, InputStream stdin) {\n        super(workDir, argsLine, env, stdin);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "new KcRegExec(workDir, argsLine, env, stdin)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "\n        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;"
            },
            {
              "step": 24,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "        @Override\n        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }"
            },
            {
              "step": 25,
              "variableName": "exe",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/KcRegExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "        public KcRegExec execute() {\n            KcRegExec exe = new KcRegExec(workDir, argsLine, env, stdin);\n            exe.dumpStreams = dumpStreams;\n            exe.execute();\n            return exe;\n        }\n"
            },
            {
              "step": 26,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "\n    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();"
            },
            {
              "step": 27,
              "variableName": "executeAsync()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "    public abstract String getCmd();\n\n    public void execute() {\n        executeAsync();\n        if (err == null) {\n            waitCompletion();\n        }"
            },
            {
              "step": 28,
              "variableName": "executeAsync",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "    }\n\n\n    public void executeAsync() {\n\n        try {\n            if (OS_ARCH.isWindows()) {"
            },
            {
              "step": 29,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "KcRegExec [workDir] : String",
              "code": "            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", cmd}, null, new File(workDir));\n            }\n\n            stdoutRunner = new StreamReaderThread(process.getInputStream(), logStreams ? new LoggingOutputStream(\"STDOUT\", stdout) : stdout);"
            },
            {
              "step": 30,
              "variableName": "workDir",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "String",
              "code": "            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", cmd}, null, new File(workDir));\n            }\n\n            stdoutRunner = new StreamReaderThread(process.getInputStream(), logStreams ? new LoggingOutputStream(\"STDOUT\", stdout) : stdout);"
            },
            {
              "step": 31,
              "variableName": "new File(workDir)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/cli/exec/AbstractExec.java",
              "type": "",
              "code": "            } else {\n                String cmd = (env != null ? env + \" \" : \"\") + getCmd() + \" \" + argsLine;\n                System.out.println(\"Executing: sh -c \" + cmd);\n                process = Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", cmd}, null, new File(workDir));\n            }\n\n            stdoutRunner = new StreamReaderThread(process.getInputStream(), logStreams ? new LoggingOutputStream(\"STDOUT\", stdout) : stdout);"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 41,
      "fileName": "WebAuthnRegister.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialData",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/credential/WebAuthnCredentialModel.java",
              "type": "WebAuthnCredentialData",
              "code": "\n\n    public WebAuthnCredentialData getWebAuthnCredentialData() {\n        return credentialData;\n    }\n\n"
            },
            {
              "step": 1,
              "variableName": "newCredentialModel.getWebAuthnCredentialData()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnRegister.java",
              "type": "WebAuthnCredentialData",
              "code": "\n            webAuthnCredProvider.createCredential(context.getRealm(), context.getUser(), newCredentialModel);\n\n            String aaguid = newCredentialModel.getWebAuthnCredentialData().getAaguid();\n            logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicKeyCredentialId = {2}, publicKeyCredentialLabel = {3}, publicKeyCredentialAAGUID = {4}\",\n                    context.getUser().getUsername(), getCredentialType(), publicKeyCredentialId, label, aaguid);\n            webAuthnCredProvider.dumpCredentialModel(newCredentialModel, credential);"
            },
            {
              "step": 2,
              "variableName": "getAaguid",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/credential/dto/WebAuthnCredentialData.java",
              "type": "WebAuthnCredentialData",
              "code": "        this.transports = transports;\n    }\n\n    public String getAaguid() {\n        return aaguid;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "aaguid",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/credential/dto/WebAuthnCredentialData.java",
              "type": "String",
              "code": "    }\n\n    public String getAaguid() {\n        return aaguid;\n    }\n\n    public String getCredentialId() {"
            },
            {
              "step": 4,
              "variableName": "newCredentialModel.getWebAuthnCredentialData().getAaguid()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnRegister.java",
              "type": "String",
              "code": "\n            webAuthnCredProvider.createCredential(context.getRealm(), context.getUser(), newCredentialModel);\n\n            String aaguid = newCredentialModel.getWebAuthnCredentialData().getAaguid();\n            logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicKeyCredentialId = {2}, publicKeyCredentialLabel = {3}, publicKeyCredentialAAGUID = {4}\",\n                    context.getUser().getUsername(), getCredentialType(), publicKeyCredentialId, label, aaguid);\n            webAuthnCredProvider.dumpCredentialModel(newCredentialModel, credential);"
            },
            {
              "step": 5,
              "variableName": "aaguid",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnRegister.java",
              "type": "String",
              "code": "\n            String aaguid = newCredentialModel.getWebAuthnCredentialData().getAaguid();\n            logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicKeyCredentialId = {2}, publicKeyCredentialLabel = {3}, publicKeyCredentialAAGUID = {4}\",\n                    context.getUser().getUsername(), getCredentialType(), publicKeyCredentialId, label, aaguid);\n            webAuthnCredProvider.dumpCredentialModel(newCredentialModel, credential);\n\n            context.getEvent()"
            },
            {
              "step": 6,
              "variableName": "logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicK",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnRegister.java",
              "type": "",
              "code": "            webAuthnCredProvider.createCredential(context.getRealm(), context.getUser(), newCredentialModel);\n\n            String aaguid = newCredentialModel.getWebAuthnCredentialData().getAaguid();\n            logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicKeyCredentialId = {2}, publicKeyCredentialLabel = {3}, publicKeyCredentialAAGUID = {4}\",\n                    context.getUser().getUsername(), getCredentialType(), publicKeyCredentialId, label, aaguid);\n            webAuthnCredProvider.dumpCredentialModel(newCredentialModel, credential);\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "WebAuthnCredentialModel.TYPE_PASSWORDLESS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnPasswordlessRegister.java",
              "type": "String",
              "code": "\n    @Override\n    protected String getCredentialType() {\n        return WebAuthnCredentialModel.TYPE_PASSWORDLESS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "getCredentialType()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnRegister.java",
              "type": "String",
              "code": "\n            String aaguid = newCredentialModel.getWebAuthnCredentialData().getAaguid();\n            logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicKeyCredentialId = {2}, publicKeyCredentialLabel = {3}, publicKeyCredentialAAGUID = {4}\",\n                    context.getUser().getUsername(), getCredentialType(), publicKeyCredentialId, label, aaguid);\n            webAuthnCredProvider.dumpCredentialModel(newCredentialModel, credential);\n\n            context.getEvent()"
            },
            {
              "step": 2,
              "variableName": "logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicK",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnRegister.java",
              "type": "",
              "code": "            webAuthnCredProvider.createCredential(context.getRealm(), context.getUser(), newCredentialModel);\n\n            String aaguid = newCredentialModel.getWebAuthnCredentialData().getAaguid();\n            logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicKeyCredentialId = {2}, publicKeyCredentialLabel = {3}, publicKeyCredentialAAGUID = {4}\",\n                    context.getUser().getUsername(), getCredentialType(), publicKeyCredentialId, label, aaguid);\n            webAuthnCredProvider.dumpCredentialModel(newCredentialModel, credential);\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 42,
      "fileName": "ProviderManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "PasswordPolicy.PASSWORD_AGE",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/policy/AgePasswordPolicyProviderFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return PasswordPolicy.PASSWORD_AGE;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "pf.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/provider/ProviderManager.java",
              "type": "String",
              "code": "                            loaded.put(uniqueId, factoryToUse);\n\n                            logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. Factories are '%s' and '%s'. Using provider factory '%s'.\",\n                                    spi.getName(), pf.getId(), currentFactory.getClass().getName(), pf.getClass().getName(), factoryToUse.getClass().getName());\n                        }\n                    }\n                }"
            },
            {
              "step": 2,
              "variableName": "logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. F",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/provider/ProviderManager.java",
              "type": "",
              "code": "                            ProviderFactory factoryToUse = compareFactories(currentFactory, pf);\n                            loaded.put(uniqueId, factoryToUse);\n\n                            logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. Factories are '%s' and '%s'. Using provider factory '%s'.\",\n                                    spi.getName(), pf.getId(), currentFactory.getClass().getName(), pf.getClass().getName(), factoryToUse.getClass().getName());\n                        }\n                    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.CLIENT_CREDENTIALS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ClientCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.CLIENT_CREDENTIALS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "pf.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/provider/ProviderManager.java",
              "type": "String",
              "code": "                            loaded.put(uniqueId, factoryToUse);\n\n                            logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. Factories are '%s' and '%s'. Using provider factory '%s'.\",\n                                    spi.getName(), pf.getId(), currentFactory.getClass().getName(), pf.getClass().getName(), factoryToUse.getClass().getName());\n                        }\n                    }\n                }"
            },
            {
              "step": 2,
              "variableName": "logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. F",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/provider/ProviderManager.java",
              "type": "",
              "code": "                            ProviderFactory factoryToUse = compareFactories(currentFactory, pf);\n                            loaded.put(uniqueId, factoryToUse);\n\n                            logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. Factories are '%s' and '%s'. Using provider factory '%s'.\",\n                                    spi.getName(), pf.getId(), currentFactory.getClass().getName(), pf.getClass().getName(), factoryToUse.getClass().getName());\n                        }\n                    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.PASSWORD",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ResourceOwnerPasswordCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.PASSWORD;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "pf.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/provider/ProviderManager.java",
              "type": "String",
              "code": "                            loaded.put(uniqueId, factoryToUse);\n\n                            logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. Factories are '%s' and '%s'. Using provider factory '%s'.\",\n                                    spi.getName(), pf.getId(), currentFactory.getClass().getName(), pf.getClass().getName(), factoryToUse.getClass().getName());\n                        }\n                    }\n                }"
            },
            {
              "step": 2,
              "variableName": "logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. F",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/provider/ProviderManager.java",
              "type": "",
              "code": "                            ProviderFactory factoryToUse = compareFactories(currentFactory, pf);\n                            loaded.put(uniqueId, factoryToUse);\n\n                            logger.debugf(\"Found multiple provider factories of same provider ID implementing same SPI. SPI is '%s', providerFactory ID '%s'. Factories are '%s' and '%s'. Using provider factory '%s'.\",\n                                    spi.getName(), pf.getId(), currentFactory.getClass().getName(), pf.getClass().getName(), factoryToUse.getClass().getName());\n                        }\n                    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 43,
      "fileName": "SqlUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dbPassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/SqlUtils.java",
              "type": "String",
              "code": "    public static void runSqlScript(String sqlFilePath, String jdbcDriverClass,\n                               String dbUrl, String dbUsername, String dbPassword) {\n        log.infof(\"Running SQL script from file '%s'\\n jdbcDriverClass=%s\\n dbUrl=%s\\n dbUsername=%s\\n dbPassword=%s\\n\",\n                sqlFilePath, jdbcDriverClass, dbUrl, dbUsername, dbPassword);\n\n        final class SqlExecuter extends SQLExec {\n            public SqlExecuter() {"
            },
            {
              "step": 1,
              "variableName": "log.infof(\"Running SQL script from file '%s'\\n jdbcDriverClass=%s\\n ",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/util/SqlUtils.java",
              "type": "",
              "code": "     */\n    public static void runSqlScript(String sqlFilePath, String jdbcDriverClass,\n                               String dbUrl, String dbUsername, String dbPassword) {\n        log.infof(\"Running SQL script from file '%s'\\n jdbcDriverClass=%s\\n dbUrl=%s\\n dbUsername=%s\\n dbPassword=%s\\n\",\n                sqlFilePath, jdbcDriverClass, dbUrl, dbUsername, dbPassword);\n\n        final class SqlExecuter extends SQLExec {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 44,
      "fileName": "ClientCredentialsProviderUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "clientCredentials",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "Map",
              "code": "        if (clientCredentials == null || clientCredentials.isEmpty()) {\n            authenticatorId = ClientIdAndSecretCredentialsProvider.PROVIDER_ID;\n        } else {\n            authenticatorId = (String) clientCredentials.get(\"provider\");\n            if (authenticatorId == null) {\n                // If there is just one credential type, use provider from it\n                if (clientCredentials.size() == 1) {"
            },
            {
              "step": 1,
              "variableName": "clientCredentials.get(\"provider\")",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "Object",
              "code": "        if (clientCredentials == null || clientCredentials.isEmpty()) {\n            authenticatorId = ClientIdAndSecretCredentialsProvider.PROVIDER_ID;\n        } else {\n            authenticatorId = (String) clientCredentials.get(\"provider\");\n            if (authenticatorId == null) {\n                // If there is just one credential type, use provider from it\n                if (clientCredentials.size() == 1) {"
            },
            {
              "step": 2,
              "variableName": "(String) clientCredentials.get(\"provider\")",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "String",
              "code": "        if (clientCredentials == null || clientCredentials.isEmpty()) {\n            authenticatorId = ClientIdAndSecretCredentialsProvider.PROVIDER_ID;\n        } else {\n            authenticatorId = (String) clientCredentials.get(\"provider\");\n            if (authenticatorId == null) {\n                // If there is just one credential type, use provider from it\n                if (clientCredentials.size() == 1) {"
            },
            {
              "step": 3,
              "variableName": "authenticatorId",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "",
              "code": "            }\n        }\n\n        logger.debugf(\"Using provider '%s' for authentication of client '%s'\", authenticatorId, clientId);\n\n        Map<String, ClientCredentialsProvider> authenticators = new HashMap<>();\n        loadAuthenticators(authenticators, ClientCredentialsProviderUtils.class.getClassLoader());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "clientCredentials",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "Map",
              "code": "            if (authenticatorId == null) {\n                // If there is just one credential type, use provider from it\n                if (clientCredentials.size() == 1) {\n                    authenticatorId = clientCredentials.keySet().iterator().next();\n                } else {\n                    throw new RuntimeException(\"Can't identify clientAuthenticator from the configuration of client '\" + clientId + \"' . Check your adapter configurations\");\n                }"
            },
            {
              "step": 1,
              "variableName": "clientCredentials.keySet()",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "LinkedHashSet [<element>] : Object",
              "code": "            if (authenticatorId == null) {\n                // If there is just one credential type, use provider from it\n                if (clientCredentials.size() == 1) {\n                    authenticatorId = clientCredentials.keySet().iterator().next();\n                } else {\n                    throw new RuntimeException(\"Can't identify clientAuthenticator from the configuration of client '\" + clientId + \"' . Check your adapter configurations\");\n                }"
            },
            {
              "step": 2,
              "variableName": "clientCredentials.keySet().iterator()",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "Iterator [<element>] : Object",
              "code": "            if (authenticatorId == null) {\n                // If there is just one credential type, use provider from it\n                if (clientCredentials.size() == 1) {\n                    authenticatorId = clientCredentials.keySet().iterator().next();\n                } else {\n                    throw new RuntimeException(\"Can't identify clientAuthenticator from the configuration of client '\" + clientId + \"' . Check your adapter configurations\");\n                }"
            },
            {
              "step": 3,
              "variableName": "clientCredentials.keySet().iterator().next()",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "String",
              "code": "            if (authenticatorId == null) {\n                // If there is just one credential type, use provider from it\n                if (clientCredentials.size() == 1) {\n                    authenticatorId = clientCredentials.keySet().iterator().next();\n                } else {\n                    throw new RuntimeException(\"Can't identify clientAuthenticator from the configuration of client '\" + clientId + \"' . Check your adapter configurations\");\n                }"
            },
            {
              "step": 4,
              "variableName": "authenticatorId",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "",
              "code": "            }\n        }\n\n        logger.debugf(\"Using provider '%s' for authentication of client '%s'\", authenticatorId, clientId);\n\n        Map<String, ClientCredentialsProvider> authenticators = new HashMap<>();\n        loadAuthenticators(authenticators, ClientCredentialsProviderUtils.class.getClassLoader());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "CredentialRepresentation.SECRET",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientIdAndSecretCredentialsProvider.java",
              "type": "String",
              "code": "\n    private static Logger logger = Logger.getLogger(ClientIdAndSecretCredentialsProvider.class);\n\n    public static final String PROVIDER_ID = CredentialRepresentation.SECRET;\n\n    private String clientSecret;\n"
            },
            {
              "step": 1,
              "variableName": "PROVIDER_ID",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientIdAndSecretCredentialsProvider.java",
              "type": "String",
              "code": "\n    private static Logger logger = Logger.getLogger(ClientIdAndSecretCredentialsProvider.class);\n\n    public static final String PROVIDER_ID = CredentialRepresentation.SECRET;\n\n    private String clientSecret;\n"
            },
            {
              "step": 2,
              "variableName": "ClientIdAndSecretCredentialsProvider.PROVIDER_ID",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "String",
              "code": "\n        String authenticatorId;\n        if (clientCredentials == null || clientCredentials.isEmpty()) {\n            authenticatorId = ClientIdAndSecretCredentialsProvider.PROVIDER_ID;\n        } else {\n            authenticatorId = (String) clientCredentials.get(\"provider\");\n            if (authenticatorId == null) {"
            },
            {
              "step": 3,
              "variableName": "authenticatorId",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "",
              "code": "            }\n        }\n\n        logger.debugf(\"Using provider '%s' for authentication of client '%s'\", authenticatorId, clientId);\n\n        Map<String, ClientCredentialsProvider> authenticators = new HashMap<>();\n        loadAuthenticators(authenticators, ClientCredentialsProviderUtils.class.getClassLoader());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 45,
      "fileName": "ClientCredentialsProviderUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "CredentialRepresentation.SECRET",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientIdAndSecretCredentialsProvider.java",
              "type": "String",
              "code": "\n    private static Logger logger = Logger.getLogger(ClientIdAndSecretCredentialsProvider.class);\n\n    public static final String PROVIDER_ID = CredentialRepresentation.SECRET;\n\n    private String clientSecret;\n"
            },
            {
              "step": 1,
              "variableName": "PROVIDER_ID",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientIdAndSecretCredentialsProvider.java",
              "type": "String",
              "code": "\n    private static Logger logger = Logger.getLogger(ClientIdAndSecretCredentialsProvider.class);\n\n    public static final String PROVIDER_ID = CredentialRepresentation.SECRET;\n\n    private String clientSecret;\n"
            },
            {
              "step": 2,
              "variableName": "PROVIDER_ID",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientIdAndSecretCredentialsProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return PROVIDER_ID;\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "authenticator.getId()",
              "uri": "keycloak-26.1.2/core/src/main/java/org/keycloak/protocol/oidc/client/authentication/ClientCredentialsProviderUtils.java",
              "type": "",
              "code": "        while (iterator.hasNext()) {\n            try {\n                ClientCredentialsProvider authenticator = iterator.next();\n                logger.debugf(\"Loaded clientCredentialsProvider %s\", authenticator.getId());\n                authenticators.put(authenticator.getId(), authenticator);\n            } catch (ServiceConfigurationError e) {\n                if (logger.isDebugEnabled()) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 46,
      "fileName": "Ipatuura.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;\n        }"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return user;\n    }\n\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }\n\n    public SCIMUser getUserByEmail(String username) {"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return search;\n    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";\n        SCIMUser user = null;"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return response;\n    }\n\n    private SCIMSearchRequest setupSearch(String username, String attribute) {\n        List<String> schemas = new ArrayList<String>();\n        SCIMSearchRequest search = new SCIMSearchRequest();\n        String filter;"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 27,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "Object[] [[]] : String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 28,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 29,
              "variableName": "filter",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "",
              "code": "\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);\n\n        return search;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "         */\n        int idx = username.indexOf(\"@\");\n        if (idx != -1) {\n            username = username.substring(0, idx);\n        }\n\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);"
            },
            {
              "step": 23,
              "variableName": "username.substring(0, idx)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "         */\n        int idx = username.indexOf(\"@\");\n        if (idx != -1) {\n            username = username.substring(0, idx);\n        }\n\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;\n        }"
            },
            {
              "step": 27,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return user;\n    }\n\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }"
            },
            {
              "step": 28,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }\n\n    public SCIMUser getUserByEmail(String username) {"
            },
            {
              "step": 29,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return search;\n    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";\n        SCIMUser user = null;"
            },
            {
              "step": 31,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return response;\n    }\n\n    private SCIMSearchRequest setupSearch(String username, String attribute) {\n        List<String> schemas = new ArrayList<String>();\n        SCIMSearchRequest search = new SCIMSearchRequest();\n        String filter;"
            },
            {
              "step": 32,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 33,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "Object[] [[]] : String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 34,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 35,
              "variableName": "filter",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "",
              "code": "\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);\n\n        return search;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;\n        }"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return user;\n    }\n\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }\n\n    public SCIMUser getUserByEmail(String username) {"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return search;\n    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";\n        SCIMUser user = null;"
            },
            {
              "step": 27,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return response;\n    }\n\n    private SCIMSearchRequest setupSearch(String username, String attribute) {\n        List<String> schemas = new ArrayList<String>();\n        SCIMSearchRequest search = new SCIMSearchRequest();\n        String filter;"
            },
            {
              "step": 28,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 29,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "Object[] [[]] : String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 30,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 31,
              "variableName": "filter",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "",
              "code": "\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);\n\n        return search;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;\n        }"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return user;\n    }\n\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "\n    public SCIMUser getUserByUsername(String username) {\n        String attribute = \"userName\";\n        return getUserByAttr(username, attribute);\n    }\n\n    public SCIMUser getUserByEmail(String username) {"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return search;\n    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "    }\n\n    private SCIMUser getUserByAttr(String username, String attribute) {\n        SCIMSearchRequest newSearch = setupSearch(username, attribute);\n\n        String usersSearchUrl = \"Users/.search\";\n        SCIMUser user = null;"
            },
            {
              "step": 27,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        return response;\n    }\n\n    private SCIMSearchRequest setupSearch(String username, String attribute) {\n        List<String> schemas = new ArrayList<String>();\n        SCIMSearchRequest search = new SCIMSearchRequest();\n        String filter;"
            },
            {
              "step": 28,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 29,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "Object[] [[]] : String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 30,
              "variableName": "String.format(\"%s eq \\\"%s\\\"\", attribute, username)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "String",
              "code": "        schemas.add(SCHEMA_API_MESSAGES_SEARCHREQUEST);\n        search.setSchemas(schemas);\n\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);"
            },
            {
              "step": 31,
              "variableName": "filter",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/Ipatuura.java",
              "type": "",
              "code": "\n        filter = String.format(\"%s eq \\\"%s\\\"\", attribute, username);\n        search.setFilter(filter);\n        logger.debugv(\"filter: {0}\", filter);\n        logger.debugv(\"Schema: {0}\", SCHEMA_API_MESSAGES_SEARCHREQUEST);\n\n        return search;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 47,
      "fileName": "IpatuuraUserStorageProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "",
              "code": "            user.joinGroup(group);\n        }\n\n        logger.debugv(\"Creating SCIM user {0} in keycloak\", username);\n        return new IpatuuraUserModelDelegate(ipatuura, user, model);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "         */\n        int idx = username.indexOf(\"@\");\n        if (idx != -1) {\n            username = username.substring(0, idx);\n        }\n\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);"
            },
            {
              "step": 23,
              "variableName": "username.substring(0, idx)",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "         */\n        int idx = username.indexOf(\"@\");\n        if (idx != -1) {\n            username = username.substring(0, idx);\n        }\n\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "",
              "code": "            user.joinGroup(group);\n        }\n\n        logger.debugv(\"Creating SCIM user {0} in keycloak\", username);\n        return new IpatuuraUserModelDelegate(ipatuura, user, model);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "",
              "code": "            user.joinGroup(group);\n        }\n\n        logger.debugv(\"Creating SCIM user {0} in keycloak\", username);\n        return new IpatuuraUserModelDelegate(ipatuura, user, model);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        /*\n         * Remove @realm, this is needed as GSSAPI auth users reach here as user@realm\n         */"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "            logger.debug(\"User already exists in keycloak\");\n            return user;\n        } else {\n            return createUserInKeycloak(realm, username);\n        }\n    }\n"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "String",
              "code": "        }\n    }\n\n    protected UserModel createUserInKeycloak(RealmModel realm, String username) {\n        SCIMUser scimuser = ipatuura.getUserByUsername(username);\n        if (scimuser.getTotalResults() == 0) {\n            return null;"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/ipatuura/src/main/java/org/keycloak/ipatuura_user_spi/IpatuuraUserStorageProvider.java",
              "type": "",
              "code": "            user.joinGroup(group);\n        }\n\n        logger.debugv(\"Creating SCIM user {0} in keycloak\", username);\n        return new IpatuuraUserModelDelegate(ipatuura, user, model);\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 48,
      "fileName": "KerberosFederationProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialAuthentication",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "CredentialAuthentication",
              "code": "                .collect(Collectors.toList())) {\n            CredentialValidationOutput validationOutput = session.getProvider(TracingProvider.class).trace(credentialAuthentication.getClass(), \"authenticate\",\n                    span -> {\n                        CredentialValidationOutput output = credentialAuthentication.authenticate(realm, input);\n                        if (span.isRecording()) {\n                            if (output != null) {\n                                CredentialValidationOutput.Status status = output.getAuthStatus();"
            },
            {
              "step": 1,
              "variableName": "authenticate",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "KerberosFederationProvider",
              "code": "    }\n\n    @Override\n    public CredentialValidationOutput authenticate(RealmModel realm, CredentialInput input) {\n        if (!(input instanceof UserCredentialModel)) return null;\n        UserCredentialModel credential = (UserCredentialModel)input;\n        if (credential.getType().equals(UserCredentialModel.KERBEROS)) {"
            },
            {
              "step": 2,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "",
              "code": "        if (credential.getType().equals(UserCredentialModel.KERBEROS)) {\n            SPNEGOAuthenticator spnegoAuthenticator = (SPNEGOAuthenticator) credential.getNote(KerberosConstants.AUTHENTICATED_SPNEGO_CONTEXT);\n            if (spnegoAuthenticator != null) {\n                logger.debugf(\"SPNEGO authentication already performed by previous provider. Provider '%s' will try to lookup user with kerberos principal '%s'\", this, spnegoAuthenticator.getAuthenticatedKerberosPrincipal());\n            } else {\n                String spnegoToken = credential.getChallengeResponse();\n                spnegoAuthenticator = factory.createSPNEGOAuthenticator(spnegoToken, kerberosConfig);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 49,
      "fileName": "KerberosUsernamePasswordAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {\n                String kerberosPrincipal = authenticator.getKerberosPrincipal(username);\n                return findOrCreateAuthenticatedUser(realm, new KerberosPrincipal(kerberosPrincipal));"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "String",
              "code": "     * @param username username without Kerberos realm attached or with correct realm attached\n     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "",
              "code": "     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);\n            loginContext = new LoginContext(\"does-not-matter\", null,"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {\n                String kerberosPrincipal = authenticator.getKerberosPrincipal(username);\n                return findOrCreateAuthenticatedUser(realm, new KerberosPrincipal(kerberosPrincipal));"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "String",
              "code": "     * @param username username without Kerberos realm attached or with correct realm attached\n     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "",
              "code": "     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);\n            loginContext = new LoginContext(\"does-not-matter\", null,"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {\n                String kerberosPrincipal = authenticator.getKerberosPrincipal(username);\n                return findOrCreateAuthenticatedUser(realm, new KerberosPrincipal(kerberosPrincipal));"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "String",
              "code": "     * @param username username without Kerberos realm attached or with correct realm attached\n     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "",
              "code": "     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);\n            loginContext = new LoginContext(\"does-not-matter\", null,"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/KerberosFederationProvider.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        KerberosUsernamePasswordAuthenticator authenticator = factory.createKerberosUsernamePasswordAuthenticator(kerberosConfig);\n        if (authenticator.isUserAvailable(username)) {\n            try {\n                String kerberosPrincipal = authenticator.getKerberosPrincipal(username);\n                return findOrCreateAuthenticatedUser(realm, new KerberosPrincipal(kerberosPrincipal));"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "String",
              "code": "     * @param username username without Kerberos realm attached or with correct realm attached\n     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/KerberosUsernamePasswordAuthenticator.java",
              "type": "",
              "code": "     * @return true if user available\n     */\n    public boolean isUserAvailable(String username) {\n        logger.debugf(\"Checking existence of user: %s\", username);\n        try {\n            String principal = getKerberosPrincipal(username);\n            loginContext = new LoginContext(\"does-not-matter\", null,"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 50,
      "fileName": "SPNEGOAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "delegationCredential",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/SPNEGOAuthenticator.java",
              "type": "GSSCredential",
              "code": "\n        try {\n            if (log.isTraceEnabled()) {\n                log.trace(\"Serializing credential \" + delegationCredential);\n            }\n            return KerberosSerializationUtils.serializeCredential(kerberosTicket, delegationCredential);\n        } catch (KerberosSerializationUtils.KerberosSerializationException kse) {"
            },
            {
              "step": 1,
              "variableName": "\"Serializing credential \" + delegationCredential",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/SPNEGOAuthenticator.java",
              "type": "",
              "code": "\n        try {\n            if (log.isTraceEnabled()) {\n                log.trace(\"Serializing credential \" + delegationCredential);\n            }\n            return KerberosSerializationUtils.serializeCredential(kerberosTicket, delegationCredential);\n        } catch (KerberosSerializationUtils.KerberosSerializationException kse) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 51,
      "fileName": "SPNEGOAuthenticator.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "delegationCredential",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/SPNEGOAuthenticator.java",
              "type": "GSSCredential",
              "code": "            }\n            return KerberosSerializationUtils.serializeCredential(kerberosTicket, delegationCredential);\n        } catch (KerberosSerializationUtils.KerberosSerializationException kse) {\n            log.warn(\"Couldn't serialize credential: \" + delegationCredential, kse);\n            return null;\n        }\n    }"
            },
            {
              "step": 1,
              "variableName": "\"Couldn't serialize credential: \" + delegationCredential",
              "uri": "keycloak-26.1.2/federation/kerberos/src/main/java/org/keycloak/federation/kerberos/impl/SPNEGOAuthenticator.java",
              "type": "",
              "code": "            }\n            return KerberosSerializationUtils.serializeCredential(kerberosTicket, delegationCredential);\n        } catch (KerberosSerializationUtils.KerberosSerializationException kse) {\n            log.warn(\"Couldn't serialize credential: \" + delegationCredential, kse);\n            return null;\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 52,
      "fileName": "LDAPStorageProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialAuthentication",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "CredentialAuthentication",
              "code": "                .collect(Collectors.toList())) {\n            CredentialValidationOutput validationOutput = session.getProvider(TracingProvider.class).trace(credentialAuthentication.getClass(), \"authenticate\",\n                    span -> {\n                        CredentialValidationOutput output = credentialAuthentication.authenticate(realm, input);\n                        if (span.isRecording()) {\n                            if (output != null) {\n                                CredentialValidationOutput.Status status = output.getAuthStatus();"
            },
            {
              "step": 1,
              "variableName": "authenticate",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java",
              "type": "LDAPStorageProvider",
              "code": "    }\n\n    @Override\n    public CredentialValidationOutput authenticate(RealmModel realm, CredentialInput cred) {\n        if (!(cred instanceof UserCredentialModel)) return CredentialValidationOutput.fallback();\n        UserCredentialModel credential = (UserCredentialModel)cred;\n        if (credential.getType().equals(UserCredentialModel.KERBEROS)) {"
            },
            {
              "step": 2,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPStorageProvider.java",
              "type": "",
              "code": "            if (kerberosConfig.isAllowKerberosAuthentication()) {\n                SPNEGOAuthenticator spnegoAuthenticator = (SPNEGOAuthenticator) credential.getNote(KerberosConstants.AUTHENTICATED_SPNEGO_CONTEXT);\n                if (spnegoAuthenticator != null) {\n                    logger.debugf(\"SPNEGO authentication already performed by previous provider. Provider '%s' will try to lookup user with principal kerberos principal '%s'\", this, spnegoAuthenticator.getAuthenticatedKerberosPrincipal());\n                } else {\n                    String spnegoToken = credential.getChallengeResponse();\n                    spnegoAuthenticator = factory.createSPNEGOAuthenticator(spnegoToken, kerberosConfig);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 53,
      "fileName": "LDAPObject.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "        }\n\n        protected long getPwdLastSet() {\n            String pwdLastSet = ldapUser.getAttributeAsString(LDAPConstants.PWD_LAST_SET);\n            return pwdLastSet == null ? 0 : Long.parseLong(pwdLastSet);\n        }\n"
            },
            {
              "step": 1,
              "variableName": "String name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "    }\n\n    // Case-insensitive\n    public String getAttributeAsString(String name) {\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(name.toLowerCase());\n        if (entry == null || entry.getValue().isEmpty()) {\n            return null;"
            },
            {
              "step": 2,
              "variableName": "name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "",
              "code": "        if (entry == null || entry.getValue().isEmpty()) {\n            return null;\n        } else if (entry.getValue().size() > 1) {\n            logger.warnf(\"Expected String but attribute '%s' has more values '%s' on object '%s' . Returning just first value\", name, entry.getValue(), dn);\n        }\n\n        return entry.getValue().iterator().next();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.MSDS_USER_PASSWORD_NOTREQD",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msadlds/MSADLDSUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "            if (ldapProvider.getEditMode() == UserStorageProvider.EditMode.WRITABLE && RequiredAction.UPDATE_PASSWORD.toString().equals(action)) {\n\n                // Don't set pwdLastSet in MSAD LDS when it is new user\n                if (!Boolean.parseBoolean(ldapUser.getAttributeAsString(LDAPConstants.MSDS_USER_PASSWORD_NOTREQD))) {\n                    logger.debugf(\"Going to remove required action UPDATE_PASSWORD from MSAD LDS for ldap user '%s' \", ldapUser.getDn().toString());\n\n                    // Normally it's read-only"
            },
            {
              "step": 1,
              "variableName": "String name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "    }\n\n    // Case-insensitive\n    public String getAttributeAsString(String name) {\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(name.toLowerCase());\n        if (entry == null || entry.getValue().isEmpty()) {\n            return null;"
            },
            {
              "step": 2,
              "variableName": "name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "",
              "code": "        if (entry == null || entry.getValue().isEmpty()) {\n            return null;\n        } else if (entry.getValue().size() > 1) {\n            logger.warnf(\"Expected String but attribute '%s' has more values '%s' on object '%s' . Returning just first value\", name, entry.getValue(), dn);\n        }\n\n        return entry.getValue().iterator().next();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.MSDS_USER_PASSWORD_EXPIRED",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msadlds/MSADLDSUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "\n            if (ldapProvider.getEditMode() == UserStorageProvider.EditMode.WRITABLE) {\n                    // update password only if force or expired and not updated (-1)\n                    if (getPwdLastSet() == 0 || (getPwdLastSet() != -1 && Boolean.parseBoolean(ldapUser.getAttributeAsString(LDAPConstants.MSDS_USER_PASSWORD_EXPIRED)))) {\n                        return Stream.concat(requiredActions, Stream.of(RequiredAction.UPDATE_PASSWORD.toString())).distinct();\n                    }\n            }"
            },
            {
              "step": 1,
              "variableName": "String name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "    }\n\n    // Case-insensitive\n    public String getAttributeAsString(String name) {\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(name.toLowerCase());\n        if (entry == null || entry.getValue().isEmpty()) {\n            return null;"
            },
            {
              "step": 2,
              "variableName": "name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "",
              "code": "        if (entry == null || entry.getValue().isEmpty()) {\n            return null;\n        } else if (entry.getValue().size() > 1) {\n            logger.warnf(\"Expected String but attribute '%s' has more values '%s' on object '%s' . Returning just first value\", name, entry.getValue(), dn);\n        }\n\n        return entry.getValue().iterator().next();"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msadlds/MSADLDSUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "        }\n\n        protected long getPwdLastSet() {\n            String pwdLastSet = ldapUser.getAttributeAsString(LDAPConstants.PWD_LAST_SET);\n            return pwdLastSet == null ? 0 : Long.parseLong(pwdLastSet);\n        }\n"
            },
            {
              "step": 1,
              "variableName": "String name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "    }\n\n    // Case-insensitive\n    public String getAttributeAsString(String name) {\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(name.toLowerCase());\n        if (entry == null || entry.getValue().isEmpty()) {\n            return null;"
            },
            {
              "step": 2,
              "variableName": "name",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "",
              "code": "        if (entry == null || entry.getValue().isEmpty()) {\n            return null;\n        } else if (entry.getValue().size() > 1) {\n            logger.warnf(\"Expected String but attribute '%s' has more values '%s' on object '%s' . Returning just first value\", name, entry.getValue(), dn);\n        }\n\n        return entry.getValue().iterator().next();"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 54,
      "fileName": "LDAPContextManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            config.setAuthType(LDAPConstants.AUTH_TYPE_NONE);\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 19,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 21,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 23,
              "variableName": "LDAPContextManager.create(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 24,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation\n                ldapContext.reconnect(null);"
            },
            {
              "step": 25,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 26,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 27,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 28,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {\n            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();"
            },
            {
              "step": 29,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {\n            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();"
            },
            {
              "step": 30,
              "variableName": "LDAPConfig ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    // Get connection properties of admin connection\n    private Hashtable<Object, Object> getConnectionProperties(LDAPConfig ldapConfig) {\n        Hashtable<Object, Object> env = getNonAuthConnectionProperties(ldapConfig);\n\n        if(!ldapConfig.isStartTls()) {"
            },
            {
              "step": 31,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n            if (authType != null) env.put(Context.SECURITY_AUTHENTICATION, authType);\n\n            String bindDN = ldapConfig.getBindDN();\n\n            char[] bindCredential = null;\n"
            },
            {
              "step": 32,
              "variableName": "getBindDN",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return userObjClasses;\n    }\n\n    public String getBindDN() {\n        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindDN() {\n        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindDN() {\n        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {"
            },
            {
              "step": 35,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 37,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 38,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 39,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 40,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 41,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 42,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 43,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 44,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 45,
              "variableName": "config.getFirst(LDAPConstants.BIND_DN)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindDN() {\n        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {"
            },
            {
              "step": 46,
              "variableName": "ldapConfig.getBindDN()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "\n            if (authType != null) env.put(Context.SECURITY_AUTHENTICATION, authType);\n\n            String bindDN = ldapConfig.getBindDN();\n\n            char[] bindCredential = null;\n"
            },
            {
              "step": 47,
              "variableName": "bindDN",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "            }\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(authType)) {\n                if (bindDN != null) env.put(Context.SECURITY_PRINCIPAL, bindDN);\n                if (bindCredential != null) env.put(Context.SECURITY_CREDENTIALS, bindCredential);\n            }\n        }"
            },
            {
              "step": 48,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "            }\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(authType)) {\n                if (bindDN != null) env.put(Context.SECURITY_PRINCIPAL, bindDN);\n                if (bindCredential != null) env.put(Context.SECURITY_CREDENTIALS, bindCredential);\n            }\n        }"
            },
            {
              "step": 49,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 50,
              "variableName": "new Hashtable<>(env)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 51,
              "variableName": "copyEnv",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "",
              "code": "            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }\n            logger.debugf(\"Creating LdapContext using properties: [%s]\", copyEnv);\n        }\n\n        return env;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            return Collections.emptySet();\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 17,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 19,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "LDAPOperationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPOperationManager(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "LDAPIdentityStore",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 25,
              "variableName": "new LDAPIdentityStore(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 26,
              "variableName": "queryServerCapabilities",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    @Override\n    public Set<LDAPCapabilityRepresentation> queryServerCapabilities() {\n        Set<LDAPCapabilityRepresentation> result = new LinkedHashSet<>();\n        try {\n            List<String> attrs = new ArrayList<>();"
            },
            {
              "step": 27,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 28,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 29,
              "variableName": "search",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return parentDn.getLdapName();\n    }\n\n    public List<SearchResult> search(final LdapName baseDN, final Condition condition, Collection<String> returningAttributes, int searchScope) throws NamingException {\n        final List<SearchResult> result = new ArrayList<>();\n        final SearchControls cons = getSearchControls(returningAttributes, searchScope);\n        final String filter = condition.toFilter();"
            },
            {
              "step": 30,
              "variableName": "this <.method> : LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        final String filter = condition.toFilter();\n\n        try {\n            return execute(new LdapOperation<List<SearchResult>>() {\n                @Override\n                public List<SearchResult> execute(LdapContext context) throws NamingException {\n                    NamingEnumeration<SearchResult> search = context.search(baseDN, filter, cons);"
            },
            {
              "step": 31,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "execute(operation, null)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {"
            },
            {
              "step": 33,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 35,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 36,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 37,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 38,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 39,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 40,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 41,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 42,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 43,
              "variableName": "LDAPContextManager.create(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 44,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }\n"
            },
            {
              "step": 45,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 46,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 47,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 48,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {\n            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();"
            },
            {
              "step": 49,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {\n            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();"
            },
            {
              "step": 50,
              "variableName": "LDAPConfig ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    // Get connection properties of admin connection\n    private Hashtable<Object, Object> getConnectionProperties(LDAPConfig ldapConfig) {\n        Hashtable<Object, Object> env = getNonAuthConnectionProperties(ldapConfig);\n\n        if(!ldapConfig.isStartTls()) {"
            },
            {
              "step": 51,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        Hashtable<Object, Object> env = getNonAuthConnectionProperties(ldapConfig);\n\n        if(!ldapConfig.isStartTls()) {\n            String authType = ldapConfig.getAuthType();\n\n            if (authType != null) env.put(Context.SECURITY_AUTHENTICATION, authType);\n"
            },
            {
              "step": 52,
              "variableName": "getAuthType",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return \"com.sun.jndi.ldap.LdapCtxFactory\";\n    }\n\n    public String getAuthType() {\n        String value = config.getFirst(LDAPConstants.AUTH_TYPE);\n        if (value == null) {\n            return LDAPConstants.AUTH_TYPE_SIMPLE;"
            },
            {
              "step": 53,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getAuthType() {\n        String value = config.getFirst(LDAPConstants.AUTH_TYPE);\n        if (value == null) {\n            return LDAPConstants.AUTH_TYPE_SIMPLE;\n        } else {"
            },
            {
              "step": 54,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getAuthType() {\n        String value = config.getFirst(LDAPConstants.AUTH_TYPE);\n        if (value == null) {\n            return LDAPConstants.AUTH_TYPE_SIMPLE;\n        } else {"
            },
            {
              "step": 55,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 57,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 58,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 59,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 60,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 61,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 62,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 63,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 64,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 65,
              "variableName": "config.getFirst(LDAPConstants.AUTH_TYPE)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getAuthType() {\n        String value = config.getFirst(LDAPConstants.AUTH_TYPE);\n        if (value == null) {\n            return LDAPConstants.AUTH_TYPE_SIMPLE;\n        } else {"
            },
            {
              "step": 66,
              "variableName": "value",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "        if (value == null) {\n            return LDAPConstants.AUTH_TYPE_SIMPLE;\n        } else {\n            return value;\n        }\n    }\n"
            },
            {
              "step": 67,
              "variableName": "ldapConfig.getAuthType()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "        Hashtable<Object, Object> env = getNonAuthConnectionProperties(ldapConfig);\n\n        if(!ldapConfig.isStartTls()) {\n            String authType = ldapConfig.getAuthType();\n\n            if (authType != null) env.put(Context.SECURITY_AUTHENTICATION, authType);\n"
            },
            {
              "step": 68,
              "variableName": "authType",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "        if(!ldapConfig.isStartTls()) {\n            String authType = ldapConfig.getAuthType();\n\n            if (authType != null) env.put(Context.SECURITY_AUTHENTICATION, authType);\n\n            String bindDN = ldapConfig.getBindDN();\n"
            },
            {
              "step": 69,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "        if(!ldapConfig.isStartTls()) {\n            String authType = ldapConfig.getAuthType();\n\n            if (authType != null) env.put(Context.SECURITY_AUTHENTICATION, authType);\n\n            String bindDN = ldapConfig.getBindDN();\n"
            },
            {
              "step": 70,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 71,
              "variableName": "new Hashtable<>(env)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 72,
              "variableName": "copyEnv",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "",
              "code": "            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }\n            logger.debugf(\"Creating LdapContext using properties: [%s]\", copyEnv);\n        }\n\n        return env;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            config.setAuthType(LDAPConstants.AUTH_TYPE_NONE);\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 19,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 21,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 23,
              "variableName": "LDAPContextManager.create(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 24,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation\n                ldapContext.reconnect(null);"
            },
            {
              "step": 25,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 26,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 27,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 28,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {\n            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();"
            },
            {
              "step": 29,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {\n            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();"
            },
            {
              "step": 30,
              "variableName": "LDAPConfig ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    // Get connection properties of admin connection\n    private Hashtable<Object, Object> getConnectionProperties(LDAPConfig ldapConfig) {\n        Hashtable<Object, Object> env = getNonAuthConnectionProperties(ldapConfig);\n\n        if(!ldapConfig.isStartTls()) {"
            },
            {
              "step": 31,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    // Get connection properties of admin connection\n    private Hashtable<Object, Object> getConnectionProperties(LDAPConfig ldapConfig) {\n        Hashtable<Object, Object> env = getNonAuthConnectionProperties(ldapConfig);\n\n        if(!ldapConfig.isStartTls()) {\n            String authType = ldapConfig.getAuthType();"
            },
            {
              "step": 32,
              "variableName": "LDAPConfig ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "     * @param ldapConfig\n     * @return\n     */\n    public static Hashtable<Object, Object> getNonAuthConnectionProperties(LDAPConfig ldapConfig) {\n        HashMap<String, Object> env = new HashMap<>();\n\n        env.put(Context.INITIAL_CONTEXT_FACTORY, ldapConfig.getFactoryName());"
            },
            {
              "step": 33,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n        env.put(Context.INITIAL_CONTEXT_FACTORY, ldapConfig.getFactoryName());\n\n        String url = ldapConfig.getConnectionUrl();\n\n        if (url != null) {\n            env.put(Context.PROVIDER_URL, url);"
            },
            {
              "step": 34,
              "variableName": "getConnectionUrl",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.config = config;\n    }\n\n    public String getConnectionUrl() {\n        return config.getFirst(LDAPConstants.CONNECTION_URL);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getConnectionUrl() {\n        return config.getFirst(LDAPConstants.CONNECTION_URL);\n    }\n\n    public String getFactoryName() {"
            },
            {
              "step": 36,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getConnectionUrl() {\n        return config.getFirst(LDAPConstants.CONNECTION_URL);\n    }\n\n    public String getFactoryName() {"
            },
            {
              "step": 37,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 38,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 39,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 40,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 41,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 42,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 43,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 44,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 45,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 46,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 47,
              "variableName": "config.getFirst(LDAPConstants.CONNECTION_URL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getConnectionUrl() {\n        return config.getFirst(LDAPConstants.CONNECTION_URL);\n    }\n\n    public String getFactoryName() {"
            },
            {
              "step": 48,
              "variableName": "ldapConfig.getConnectionUrl()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "\n        env.put(Context.INITIAL_CONTEXT_FACTORY, ldapConfig.getFactoryName());\n\n        String url = ldapConfig.getConnectionUrl();\n\n        if (url != null) {\n            env.put(Context.PROVIDER_URL, url);"
            },
            {
              "step": 49,
              "variableName": "url",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "        String url = ldapConfig.getConnectionUrl();\n\n        if (url != null) {\n            env.put(Context.PROVIDER_URL, url);\n        } else {\n            logger.warn(\"LDAP URL is null. LDAPOperationManager won't work correctly\");\n        }"
            },
            {
              "step": 50,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        String url = ldapConfig.getConnectionUrl();\n\n        if (url != null) {\n            env.put(Context.PROVIDER_URL, url);\n        } else {\n            logger.warn(\"LDAP URL is null. LDAPOperationManager won't work correctly\");\n        }"
            },
            {
              "step": 51,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            env.put(Context.REFERRAL, referral);\n        }\n\n        return new Hashtable<>(env);\n    }\n\n    @Override"
            },
            {
              "step": 52,
              "variableName": "new Hashtable<>(env)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "            env.put(Context.REFERRAL, referral);\n        }\n\n        return new Hashtable<>(env);\n    }\n\n    @Override"
            },
            {
              "step": 53,
              "variableName": "getNonAuthConnectionProperties(ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "\n    // Get connection properties of admin connection\n    private Hashtable<Object, Object> getConnectionProperties(LDAPConfig ldapConfig) {\n        Hashtable<Object, Object> env = getNonAuthConnectionProperties(ldapConfig);\n\n        if(!ldapConfig.isStartTls()) {\n            String authType = ldapConfig.getAuthType();"
            },
            {
              "step": 54,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 55,
              "variableName": "new Hashtable<>(env)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : String",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 56,
              "variableName": "copyEnv",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "",
              "code": "            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }\n            logger.debugf(\"Creating LdapContext using properties: [%s]\", copyEnv);\n        }\n\n        return env;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "char[]",
              "code": "\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(authType)) {\n                if (bindDN != null) env.put(Context.SECURITY_PRINCIPAL, bindDN);\n                if (bindCredential != null) env.put(Context.SECURITY_CREDENTIALS, bindCredential);\n            }\n        }\n"
            },
            {
              "step": 1,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : char[]",
              "code": "\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(authType)) {\n                if (bindDN != null) env.put(Context.SECURITY_PRINCIPAL, bindDN);\n                if (bindCredential != null) env.put(Context.SECURITY_CREDENTIALS, bindCredential);\n            }\n        }\n"
            },
            {
              "step": 2,
              "variableName": "env",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : char[]",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 3,
              "variableName": "new Hashtable<>(env)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "Hashtable [<map.value>] : char[]",
              "code": "        }\n\n        if (logger.isDebugEnabled()) {\n            Map<Object, Object> copyEnv = new Hashtable<>(env);\n            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }"
            },
            {
              "step": 4,
              "variableName": "copyEnv",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "",
              "code": "            if (copyEnv.containsKey(Context.SECURITY_CREDENTIALS)) {\n                copyEnv.put(Context.SECURITY_CREDENTIALS, \"**************************************\");\n            }\n            logger.debugf(\"Creating LdapContext using properties: [%s]\", copyEnv);\n        }\n\n        return env;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 55,
      "fileName": "LDAPIdentityStore.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "        // Normally it's read-only\n        ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n\n        ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"-1\");\n\n        UserAccountControl control = getUserAccountControl(ldapUser);\n        control.remove(UserAccountControl.PASSWD_NOTREQD);"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "\n            if (attrValue == null) {\n                // Shouldn't happen\n                logger.warnf(\"Attribute '%s' is null on LDAP object '%s' . Using empty value to be saved to LDAP\", attrName, ldapObject.getDn().toString());\n                attrValue = Collections.emptySet();\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "                // Normally it's read-only\n                ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n\n                ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"0\");\n\n                markUpdatedRequiredActionInTransaction(action);\n            } else {"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "\n            if (attrValue == null) {\n                // Shouldn't happen\n                logger.warnf(\"Attribute '%s' is null on LDAP object '%s' . Using empty value to be saved to LDAP\", attrName, ldapObject.getDn().toString());\n                attrValue = Collections.emptySet();\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "                    // Normally it's read-only\n                    ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n\n                    ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"-1\");\n\n                    markUpdatedRequiredActionInTransaction(action);\n                } else {"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "\n            if (attrValue == null) {\n                // Shouldn't happen\n                logger.warnf(\"Attribute '%s' is null on LDAP object '%s' . Using empty value to be saved to LDAP\", attrName, ldapObject.getDn().toString());\n                attrValue = Collections.emptySet();\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msadlds/MSADLDSUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "        // Normally it's read-only and adlds do this automaticly\n        ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n        // set but not commit in AD LDS (-1 set pwdLastSet time to now)\n        ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"-1\");\n\n        if (user.isEnabled()) {\n            // TODO: Use removeAttribute once available"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "\n            if (attrValue == null) {\n                // Shouldn't happen\n                logger.warnf(\"Attribute '%s' is null on LDAP object '%s' . Using empty value to be saved to LDAP\", attrName, ldapObject.getDn().toString());\n                attrValue = Collections.emptySet();\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 56,
      "fileName": "LDAPIdentityStore.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "        // Normally it's read-only\n        ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n\n        ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"-1\");\n\n        UserAccountControl control = getUserAccountControl(ldapUser);\n        control.remove(UserAccountControl.PASSWD_NOTREQD);"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "            ) {\n                if (getConfig().getBinaryAttributeNames().contains(attrName)) {\n                    // Binary attribute\n                    entryAttributes.put(createBinaryBasicAttribute(attrName, attrValue));\n                } else {\n                    // Text attribute\n                    entryAttributes.put(createBasicAttribute(attrName, attrValue));"
            },
            {
              "step": 27,
              "variableName": "String attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "        return attr;\n    }\n\n    private BasicAttribute createBinaryBasicAttribute(String attrName, Set<String> attrValue) {\n        BasicAttribute attr = new BasicAttribute(attrName);\n\n        for (String value : attrValue) {"
            },
            {
              "step": 28,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "                byte[] bytes = Base64.decode(value);\n                attr.add(bytes);\n            } catch (IOException ioe) {\n                logger.warnf(\"Wasn't able to Base64 decode the attribute value. Ignoring attribute update. Attribute: %s, Attribute value: %s\", attrName, attrValue);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "                // Normally it's read-only\n                ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n\n                ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"0\");\n\n                markUpdatedRequiredActionInTransaction(action);\n            } else {"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "            ) {\n                if (getConfig().getBinaryAttributeNames().contains(attrName)) {\n                    // Binary attribute\n                    entryAttributes.put(createBinaryBasicAttribute(attrName, attrValue));\n                } else {\n                    // Text attribute\n                    entryAttributes.put(createBasicAttribute(attrName, attrValue));"
            },
            {
              "step": 27,
              "variableName": "String attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "        return attr;\n    }\n\n    private BasicAttribute createBinaryBasicAttribute(String attrName, Set<String> attrValue) {\n        BasicAttribute attr = new BasicAttribute(attrName);\n\n        for (String value : attrValue) {"
            },
            {
              "step": 28,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "                byte[] bytes = Base64.decode(value);\n                attr.add(bytes);\n            } catch (IOException ioe) {\n                logger.warnf(\"Wasn't able to Base64 decode the attribute value. Ignoring attribute update. Attribute: %s, Attribute value: %s\", attrName, attrValue);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msad/MSADUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "                    // Normally it's read-only\n                    ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n\n                    ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"-1\");\n\n                    markUpdatedRequiredActionInTransaction(action);\n                } else {"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "            ) {\n                if (getConfig().getBinaryAttributeNames().contains(attrName)) {\n                    // Binary attribute\n                    entryAttributes.put(createBinaryBasicAttribute(attrName, attrValue));\n                } else {\n                    // Text attribute\n                    entryAttributes.put(createBasicAttribute(attrName, attrValue));"
            },
            {
              "step": 27,
              "variableName": "String attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "        return attr;\n    }\n\n    private BasicAttribute createBinaryBasicAttribute(String attrName, Set<String> attrValue) {\n        BasicAttribute attr = new BasicAttribute(attrName);\n\n        for (String value : attrValue) {"
            },
            {
              "step": 28,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "                byte[] bytes = Base64.decode(value);\n                attr.add(bytes);\n            } catch (IOException ioe) {\n                logger.warnf(\"Wasn't able to Base64 decode the attribute value. Ignoring attribute update. Attribute: %s, Attribute value: %s\", attrName, attrValue);\n            }\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "LDAPConstants.PWD_LAST_SET",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/mappers/msadlds/MSADLDSUserAccountControlStorageMapper.java",
              "type": "String",
              "code": "        // Normally it's read-only and adlds do this automaticly\n        ldapUser.removeReadOnlyAttributeName(LDAPConstants.PWD_LAST_SET);\n        // set but not commit in AD LDS (-1 set pwdLastSet time to now)\n        ldapUser.setSingleAttribute(LDAPConstants.PWD_LAST_SET, \"-1\");\n\n        if (user.isEnabled()) {\n            // TODO: Use removeAttribute once available"
            },
            {
              "step": 1,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        this.rdnAttributeNames.add(rdnAttributeName);\n    }\n\n    public void setSingleAttribute(String attributeName, String attributeValue) {\n        Set<String> asSet = new LinkedHashSet<>();\n        if (attributeValue != null) {\n            asSet.add(attributeValue);"
            },
            {
              "step": 2,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        if (attributeValue != null) {\n            asSet.add(attributeValue);\n        }\n        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {"
            },
            {
              "step": 3,
              "variableName": "String attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        setAttribute(attributeName, asSet);\n    }\n\n    public void setAttribute(String attributeName, Set<String> attributeValue) {\n        final String attributeNameLowerCase = attributeName.toLowerCase();\n        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);"
            },
            {
              "step": 4,
              "variableName": "attributeName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 5,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 6,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        final Set<String> valueSet = attributeValue == null? Collections.emptySet() : attributeValue;\n        Map.Entry<String, Set<String>> entry = lowerCasedAttributes.get(attributeNameLowerCase);\n        if (entry == null) {\n            attributes.put(attributeName, valueSet);\n            lowerCasedAttributes.put(attributeNameLowerCase, Map.entry(attributeName, valueSet));\n        } else {\n            // existing entry, maintain previous case for the attribute name"
            },
            {
              "step": 7,
              "variableName": "executeConsumerOnMandatoryAttributesComplete()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            } else if (mandatoryAttributeNames.contains(attributeNameLowerCase)) {\n                mandatoryAttributeNamesRemaining.add(attributeNameLowerCase);\n            }\n            executeConsumerOnMandatoryAttributesComplete();\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "executeConsumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                \", readOnly attribute names: \" + readOnlyAttributeNames + \", ranges: \" + rangedAttributes + \" ]\";\n    }\n\n    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;"
            },
            {
              "step": 9,
              "variableName": "consumerOnMandatoryAttributesComplete",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    private void executeConsumerOnMandatoryAttributesComplete() {\n        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);"
            },
            {
              "step": 10,
              "variableName": "mandatoryAttributeNames",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        if (mandatoryAttributeNamesRemaining.isEmpty()) {\n            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }"
            },
            {
              "step": 11,
              "variableName": "mandatoryAttributeNamesRemaining",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            final Consumer<LDAPObject> consumer = consumerOnMandatoryAttributesComplete;\n            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            consumerOnMandatoryAttributesComplete = null;\n            mandatoryAttributeNames = null;\n            mandatoryAttributeNamesRemaining = null;\n            consumer.accept(this);\n        }\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n        mandatoryAttrs.add(ldapConfig.getRdnLdapAttribute());\n\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {"
            },
            {
              "step": 14,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPUtils.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "\n        ldapUser.executeOnMandatoryAttributesComplete(mandatoryAttrs, ldapObject -> {\n            LDAPUtils.computeAndSetDn(ldapConfig, ldapObject);\n            ldapStore.add(ldapObject);\n            if (consumerOnCreated != null) {\n                consumerOnCreated.accept(ldapObject);\n            }"
            },
            {
              "step": 15,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    @Override\n    public void add(LDAPObject ldapObject) {\n        // id will be assigned by the ldap server\n        if (ldapObject.getUuid() != null) {\n            throw new ModelException(\"Can't add object with already assigned uuid\");"
            },
            {
              "step": 16,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "            throw new ModelException(\"Can't add object with already assigned uuid\");\n        }\n\n        BasicAttributes ldapAttributes = extractAttributesForSaving(ldapObject, true);\n        ldapObject.setUuid(operationManager.createSubContext(ldapObject.getDn().getLdapName(), ldapAttributes));\n\n        if (logger.isDebugEnabled()) {"
            },
            {
              "step": 17,
              "variableName": "LDAPObject ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n\n    protected BasicAttributes extractAttributesForSaving(LDAPObject ldapObject, boolean isCreate) {\n        BasicAttributes entryAttributes = new BasicAttributes();\n\n        Set<String> rdnAttrNamesLowerCased = ldapObject.getRdnAttributeNames().stream()"
            },
            {
              "step": 18,
              "variableName": "ldapObject",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 19,
              "variableName": "getAttributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "        }\n    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "LDAPObject [attributes, <map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "attributes",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/model/LDAPObject.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public Map<String, Set<String>> getAttributes() {\n        return attributes;\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "ldapObject.getAttributes()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 23,
              "variableName": "ldapObject.getAttributes().entrySet()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "                .map(String::toLowerCase)\n                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n"
            },
            {
              "step": 24,
              "variableName": "attrEntry",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "Entry [<map.key>] : String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 25,
              "variableName": "attrEntry.getKey()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "                .collect(Collectors.toSet());\n\n        for (Map.Entry<String, Set<String>> attrEntry : ldapObject.getAttributes().entrySet()) {\n            String attrName = attrEntry.getKey();\n            Set<String> attrValue = attrEntry.getValue();\n\n            if (attrValue == null) {"
            },
            {
              "step": 26,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "            ) {\n                if (getConfig().getBinaryAttributeNames().contains(attrName)) {\n                    // Binary attribute\n                    entryAttributes.put(createBinaryBasicAttribute(attrName, attrValue));\n                } else {\n                    // Text attribute\n                    entryAttributes.put(createBasicAttribute(attrName, attrValue));"
            },
            {
              "step": 27,
              "variableName": "String attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "String",
              "code": "        return attr;\n    }\n\n    private BasicAttribute createBinaryBasicAttribute(String attrName, Set<String> attrValue) {\n        BasicAttribute attr = new BasicAttribute(attrName);\n\n        for (String value : attrValue) {"
            },
            {
              "step": 28,
              "variableName": "attrName",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "",
              "code": "                byte[] bytes = Base64.decode(value);\n                attr.add(bytes);\n            } catch (IOException ioe) {\n                logger.warnf(\"Wasn't able to Base64 decode the attribute value. Ignoring attribute update. Attribute: %s, Attribute value: %s\", attrName, attrValue);\n            }\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 57,
      "fileName": "SSSDFederationProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 20,
              "variableName": "\"SSSD authenticated user \" + username + \" found in Keycloak storage\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 24,
              "variableName": "\"SSSD authenticated user \" + username + \" found in Keycloak storage\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"SSSD authenticated user \" + username + \" found in Keycloak storage\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"SSSD authenticated user \" + username + \" found in Keycloak storage\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 58,
      "fileName": "SSSDFederationProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 20,
              "variableName": "\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");\n                return null;\n            } else {\n                UserModel proxied = validateAndProxy(realm, user);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 24,
              "variableName": "\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");\n                return null;\n            } else {\n                UserModel proxied = validateAndProxy(realm, user);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");\n                return null;\n            } else {\n                UserModel proxied = validateAndProxy(realm, user);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");\n\n            if (!model.getId().equals(user.getFederationLink())) {\n                logger.warn(\"User with username \" + username + \" already exists, but is not linked to provider [\" + model.getName() + \"]\");\n                return null;\n            } else {\n                UserModel proxied = validateAndProxy(realm, user);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 59,
      "fileName": "SSSDFederationProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 20,
              "variableName": "\"User with username \" + usern",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "                if (proxied != null) {\n                    return proxied;\n                } else {\n                    logger.warn(\"User with username \" + username + \" already exists and is linked to provider [\" + model.getName() +\n                            \"] but principal is not correct.\");\n                    logger.warn(\"Will re-create user\");\n                    new UserManager(session).removeUser(realm, user, UserStoragePrivateUtil.userLocalStorage(session));"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 24,
              "variableName": "\"User with username \" + usern",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "                if (proxied != null) {\n                    return proxied;\n                } else {\n                    logger.warn(\"User with username \" + username + \" already exists and is linked to provider [\" + model.getName() +\n                            \"] but principal is not correct.\");\n                    logger.warn(\"Will re-create user\");\n                    new UserManager(session).removeUser(realm, user, UserStoragePrivateUtil.userLocalStorage(session));"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"User with username \" + usern",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "                if (proxied != null) {\n                    return proxied;\n                } else {\n                    logger.warn(\"User with username \" + username + \" already exists and is linked to provider [\" + model.getName() +\n                            \"] but principal is not correct.\");\n                    logger.warn(\"Will re-create user\");\n                    new UserManager(session).removeUser(realm, user, UserStoragePrivateUtil.userLocalStorage(session));"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"User with username \" + usern",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "                if (proxied != null) {\n                    return proxied;\n                } else {\n                    logger.warn(\"User with username \" + username + \" already exists and is linked to provider [\" + model.getName() +\n                            \"] but principal is not correct.\");\n                    logger.warn(\"Will re-create user\");\n                    new UserManager(session).removeUser(realm, user, UserStoragePrivateUtil.userLocalStorage(session));"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 60,
      "fileName": "SSSDFederationProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 20,
              "variableName": "\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            }\n        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 24,
              "variableName": "\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            }\n        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            }\n        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\"",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            }\n        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 61,
      "fileName": "SSSDFederationProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            return null;\n        }\n\n        logger.debugf(\"Creating SSSD user: %s to local Keycloak storage\", username);\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).addUser(realm, username);\n        user.setEnabled(true);\n        user.setEmail(sssdUser.getEmail());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            return null;\n        }\n\n        logger.debugf(\"Creating SSSD user: %s to local Keycloak storage\", username);\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).addUser(realm, username);\n        user.setEnabled(true);\n        user.setEmail(sssdUser.getEmail());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            return null;\n        }\n\n        logger.debugf(\"Creating SSSD user: %s to local Keycloak storage\", username);\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).addUser(realm, username);\n        user.setEnabled(true);\n        user.setEmail(sssdUser.getEmail());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "",
              "code": "            return null;\n        }\n\n        logger.debugf(\"Creating SSSD user: %s to local Keycloak storage\", username);\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).addUser(realm, username);\n        user.setEnabled(true);\n        user.setEmail(sssdUser.getEmail());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 62,
      "fileName": "Sssd.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 12,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 13,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 14,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 25,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 26,
              "variableName": "Sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 27,
              "variableName": "new Sssd(username, factory.getDbusConnection())",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 28,
              "variableName": "sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;\n        }"
            },
            {
              "step": 29,
              "variableName": "getUser",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "        return userGroups;\n    }\n\n    public User getUser() {\n        String[] attr = {\"mail\", \"givenname\", \"sn\", \"telephoneNumber\"};\n        User user = null;\n        try {"
            },
            {
              "step": 30,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }\n        return user;\n    }"
            },
            {
              "step": 31,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "",
              "code": "            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }\n        return user;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 7,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 10,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 12,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 13,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 16,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 17,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 18,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 27,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 28,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 29,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 30,
              "variableName": "Sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 31,
              "variableName": "new Sssd(username, factory.getDbusConnection())",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 32,
              "variableName": "sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;\n        }"
            },
            {
              "step": 33,
              "variableName": "getUser",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "        return userGroups;\n    }\n\n    public User getUser() {\n        String[] attr = {\"mail\", \"givenname\", \"sn\", \"telephoneNumber\"};\n        User user = null;\n        try {"
            },
            {
              "step": 34,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "        User user = null;\n        try {\n            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }"
            },
            {
              "step": 35,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "        User user = null;\n        try {\n            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }"
            },
            {
              "step": 36,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "",
              "code": "            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }\n        return user;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 27,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 29,
              "variableName": "new Sssd(username, factory.getDbusConnection())",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 30,
              "variableName": "sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;\n        }"
            },
            {
              "step": 31,
              "variableName": "getUser",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "        return userGroups;\n    }\n\n    public User getUser() {\n        String[] attr = {\"mail\", \"givenname\", \"sn\", \"telephoneNumber\"};\n        User user = null;\n        try {"
            },
            {
              "step": 32,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }\n        return user;\n    }"
            },
            {
              "step": 33,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "",
              "code": "            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }\n        return user;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "Function<T, R> applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     * @param <R> Result of applyFunction\n     * @return First result from StorageProviders\n     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);"
            },
            {
              "step": 6,
              "variableName": "applyFunction",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "Function<T, R> func",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "\n    public static <T, R> Function<? super T, R> timeBoundOne(KeycloakSession session,\n                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time"
            },
            {
              "step": 8,
              "variableName": "func : new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 9,
              "variableName": "...->... : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 10,
              "variableName": "ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction)",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/storage/AbstractStorageManager.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "     */\n    protected <R, T> Stream<R> mapEnabledStorageProvidersWithTimeout(RealmModel realm, Class<T> capabilityInterface, Function<T, R> applyFunction) {\n        return getEnabledStorageProviders(realm, capabilityInterface)\n                .map(ServicesUtils.timeBoundOne(session, getStorageProviderTimeout(), applyFunction))\n                .filter(Objects::nonNull);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Function<? super R, ? extends R1> mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "    }\n\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n"
            },
            {
              "step": 12,
              "variableName": "mapper",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/utils/ClosingStream.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "\n    @Override\n    public <R1> Stream<R1> map(Function<? super R, ? extends R1> mapper) {\n        return new ClosingStream<>(delegate.map(mapper));\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "parameter this : new Function<T,R>(...) { ... } [func, username] : String",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                                                                                     long timeout,\n                                                                                     Function<T, R> func) {\n        ExecutorService executor = session.getProvider(ExecutorsProvider.class).getExecutor(\"storage-provider-threads\");\n        return p -> {\n            // We are running another thread here, which serves as a time checking thread. When timeout is hit, the time\n            // checking thread will send interrupted flag to main thread, which can cause interruption of func execution.\n            // To support interruption func implementation should react to interrupt flag."
            },
            {
              "step": 14,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "new Function<T,R>(...) { ... } [func, username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 15,
              "variableName": "func",
              "uri": "keycloak-26.1.2/model/storage/src/main/java/org/keycloak/utils/ServicesUtils.java",
              "type": "Function [username] : String",
              "code": "                // We cannot run func in different than main thread, because main thread have, for example, EntityManager\n                // transaction context. If we run any operation on EntityManager in a different thread, it will fail\n                // with a transaction doesn't exist error\n                return func.apply(p);\n            } finally {\n                warningThreadFuture.cancel(true);\n"
            },
            {
              "step": 16,
              "variableName": "provider -> provider.getUserByUsername(realm, username)",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "new Function<UserLookupProvider,UserModel>(...) { ... } [username] : String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "        }\n\n        return mapEnabledStorageProvidersWithTimeout(realm, UserLookupProvider.class,\n                provider -> provider.getUserByUsername(realm, username)).findFirst().orElse(null);\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        return findOrCreateAuthenticatedUser(realm, username);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "         * @param username username without realm prefix\n         * @return user if found or successfully created. Null if user with same username already exists, but is not linked to this provider\n         */\n    protected UserModel findOrCreateAuthenticatedUser(RealmModel realm, String username) {\n        UserModel user = UserStoragePrivateUtil.userLocalStorage(session).getUserByUsername(realm, username);\n        if (user != null) {\n            logger.debug(\"SSSD authenticated user \" + username + \" found in Keycloak storage\");"
            },
            {
              "step": 22,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        }\n\n        logger.debug(\"SSSD authenticated user \" + username + \" not in Keycloak storage. Creating...\");\n        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {"
            },
            {
              "step": 23,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "        return importUserToKeycloak(realm, username);\n    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {"
            },
            {
              "step": 24,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 25,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 26,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 27,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }\n"
            },
            {
              "step": 28,
              "variableName": "Sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "    private final String username;\n    private static final Logger logger = Logger.getLogger(Sssd.class);\n\n    public Sssd(String username, DBusConnection dbusConnection) throws SSSDException {\n        this.username = username;\n        this.dBusConnection = dbusConnection;\n    }"
            },
            {
              "step": 29,
              "variableName": "new Sssd(username, factory.getDbusConnection())",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "    }\n\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;"
            },
            {
              "step": 30,
              "variableName": "sssd",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/SSSDFederationProvider.java",
              "type": "Sssd [username] : String",
              "code": "\n    protected UserModel importUserToKeycloak(RealmModel realm, String username) {\n        Sssd sssd = new Sssd(username, factory.getDbusConnection());\n        User sssdUser = sssd.getUser();\n        if (sssdUser == null) {\n            return null;\n        }"
            },
            {
              "step": 31,
              "variableName": "getUser",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "        return userGroups;\n    }\n\n    public User getUser() {\n        String[] attr = {\"mail\", \"givenname\", \"sn\", \"telephoneNumber\"};\n        User user = null;\n        try {"
            },
            {
              "step": 32,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "Sssd [username] : String",
              "code": "            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }\n        return user;\n    }"
            },
            {
              "step": 33,
              "variableName": "username",
              "uri": "keycloak-26.1.2/federation/sssd/src/main/java/org/keycloak/federation/sssd/api/Sssd.java",
              "type": "",
              "code": "            InfoPipe infoPipe = dBusConnection.getRemoteObject(InfoPipe.BUSNAME, InfoPipe.OBJECTPATH, InfoPipe.class);\n            user = new User(infoPipe.getUserAttributes(username, Arrays.asList(attr)));\n        } catch (Exception e) {\n            logger.debugf(e, \"Failed to retrieve attributes for user '%s'. Check if SSSD service is active.\", username);\n        }\n        return user;\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 63,
      "fileName": "CacheManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        return getClientById(realm, id);\n    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "realmId + \".client.query.by.clientId.\" + clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "getClientByClientIdCacheKey(clientId, realm.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 7,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        if (query != null) {\n            logger.tracev(\"client by name cache hit: {0}\", clientId);\n            String id = query.getClients().iterator().next();"
            },
            {
              "step": 8,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    }\n\n    public <T extends Revisioned> T get(String id, Class<T> type) {\n        Revisioned o = (Revisioned)cache.get(id);\n        if (o == null) {\n            return null;"
            },
            {
              "step": 9,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "        Long rev = revisions.get(id);\n        if (rev == null) {\n            if (getLogger().isTraceEnabled()) {\n                getLogger().tracev(\"get() missing rev {0}\", id);\n            }\n            /* id is no longer in this.revisions\n             ** => remove it also from this.cache"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 5,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 6,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        return getClientById(realm, id);\n    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n"
            },
            {
              "step": 7,
              "variableName": "realmId + \".client.query.by.clientId.\" + clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "getClientByClientIdCacheKey(clientId, realm.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 9,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 10,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all\n     * other requests will use the cached realm, which is much more efficient.\n     */\n    public <T> T computeSerialized(KeycloakSession session, String id, BiFunction<String, KeycloakSession, T> compute) {\n        // this locking is only to ensure that if there is a computation for the same id in the \"synchronized\" block below,\n        // it will have the same object instance to lock the current execution until the other is finished.\n        ReentrantLock lock = cacheInteractions.computeIfAbsent(id, s -> new ReentrantLock());"
            },
            {
              "step": 11,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "                logger.debugf(\"Concurrent execution detected for realm '%s'.\", id);\n            }\n\n            return compute.apply(id, session);\n        } finally {\n            lock.unlock();\n            cacheInteractions.remove(id, lock);"
            },
            {
              "step": 12,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 13,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 14,
              "variableName": "String cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        }\n    }\n\n    private ClientModel prepareCachedClientByClientId(RealmModel realm, String clientId, String cacheKey) {\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        String id;\n        if (query == null) {"
            },
            {
              "step": 15,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    private ClientModel prepareCachedClientByClientId(RealmModel realm, String clientId, String cacheKey) {\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        String id;\n        if (query == null) {\n            Long loaded = cache.getCurrentRevision(cacheKey);"
            },
            {
              "step": 16,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    }\n\n    public <T extends Revisioned> T get(String id, Class<T> type) {\n        Revisioned o = (Revisioned)cache.get(id);\n        if (o == null) {\n            return null;"
            },
            {
              "step": 17,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "        Long rev = revisions.get(id);\n        if (rev == null) {\n            if (getLogger().isTraceEnabled()) {\n                getLogger().tracev(\"get() missing rev {0}\", id);\n            }\n            /* id is no longer in this.revisions\n             ** => remove it also from this.cache"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        return adapter;\n    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n"
            },
            {
              "step": 7,
              "variableName": "realmId + \".username.\" + username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n\n    static String getUserByEmailCacheKey(String realmId, String email) {"
            },
            {
              "step": 8,
              "variableName": "getUserByUsernameCacheKey(realm.getId(), username)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 9,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        UserListQuery query = cache.get(cacheKey, UserListQuery.class);\n\n        String userId = null;\n        if (query == null) {"
            },
            {
              "step": 10,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    }\n\n    public <T extends Revisioned> T get(String id, Class<T> type) {\n        Revisioned o = (Revisioned)cache.get(id);\n        if (o == null) {\n            return null;"
            },
            {
              "step": 11,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "        Long rev = revisions.get(id);\n        if (rev == null) {\n            if (getLogger().isTraceEnabled()) {\n                getLogger().tracev(\"get() missing rev {0}\", id);\n            }\n            /* id is no longer in this.revisions\n             ** => remove it also from this.cache"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);\n        }"
            },
            {
              "step": 4,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 6,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 7,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        return adapter;\n    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "realmId + \".username.\" + username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n\n    static String getUserByEmailCacheKey(String realmId, String email) {"
            },
            {
              "step": 10,
              "variableName": "getUserByUsernameCacheKey(realm.getId(), username)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 11,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        UserListQuery query = cache.get(cacheKey, UserListQuery.class);\n\n        String userId = null;\n        if (query == null) {"
            },
            {
              "step": 12,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    }\n\n    public <T extends Revisioned> T get(String id, Class<T> type) {\n        Revisioned o = (Revisioned)cache.get(id);\n        if (o == null) {\n            return null;"
            },
            {
              "step": 13,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "        Long rev = revisions.get(id);\n        if (rev == null) {\n            if (getLogger().isTraceEnabled()) {\n                getLogger().tracev(\"get() missing rev {0}\", id);\n            }\n            /* id is no longer in this.revisions\n             ** => remove it also from this.cache"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 64,
      "fileName": "CacheManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        return getClientById(realm, id);\n    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "realmId + \".client.query.by.clientId.\" + clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "getClientByClientIdCacheKey(clientId, realm.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 7,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all\n     * other requests will use the cached realm, which is much more efficient.\n     */\n    public <T> T computeSerialized(KeycloakSession session, String id, BiFunction<String, KeycloakSession, T> compute) {\n        // this locking is only to ensure that if there is a computation for the same id in the \"synchronized\" block below,\n        // it will have the same object instance to lock the current execution until the other is finished.\n        ReentrantLock lock = cacheInteractions.computeIfAbsent(id, s -> new ReentrantLock());"
            },
            {
              "step": 9,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "                logger.debugf(\"Concurrent execution detected for realm '%s'.\", id);\n            }\n\n            return compute.apply(id, session);\n        } finally {\n            lock.unlock();\n            cacheInteractions.remove(id, lock);"
            },
            {
              "step": 10,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 11,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 12,
              "variableName": "String cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        }\n    }\n\n    private ClientModel prepareCachedClientByClientId(RealmModel realm, String clientId, String cacheKey) {\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        String id;\n        if (query == null) {"
            },
            {
              "step": 13,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "                return null;\n            }\n            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {"
            },
            {
              "step": 14,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "String",
              "code": "        this.clients = clients;\n    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 15,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "String",
              "code": "    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.clients = new HashSet<>();"
            },
            {
              "step": 16,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 17,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "AbstractRevisioned",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 20,
              "variableName": "super(revisioned, id);",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "ClientListQuery [id] : String",
              "code": "    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.clients = new HashSet<>();"
            },
            {
              "step": 21,
              "variableName": "ClientListQuery",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "ClientListQuery [id] : String",
              "code": "        this.clients = clients;\n    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 22,
              "variableName": "new ClientListQuery(loaded, cacheKey, realm, id)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "ClientListQuery [id] : String",
              "code": "                return null;\n            }\n            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {"
            },
            {
              "step": 23,
              "variableName": "query",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "ClientListQuery [id] : String",
              "code": "            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {\n                return model;\n            }"
            },
            {
              "step": 24,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "        revisions.put(id, next);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {"
            },
            {
              "step": 26,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {"
            },
            {
              "step": 27,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 28,
              "variableName": "getId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "ClientListQuery [id] : String",
              "code": "    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n"
            },
            {
              "step": 29,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "ClientListQuery [id] : String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 30,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "object.getId()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 32,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "            revisions.startBatch();\n            if (!revisions.getAdvancedCache().lock(id)) {\n                if (getLogger().isTraceEnabled()) {\n                    getLogger().tracev(\"Could not obtain version lock: {0}\", id);\n                }\n                return;\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 5,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 6,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        return getClientById(realm, id);\n    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n"
            },
            {
              "step": 7,
              "variableName": "realmId + \".client.query.by.clientId.\" + clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "getClientByClientIdCacheKey(clientId, realm.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 9,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 10,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all\n     * other requests will use the cached realm, which is much more efficient.\n     */\n    public <T> T computeSerialized(KeycloakSession session, String id, BiFunction<String, KeycloakSession, T> compute) {\n        // this locking is only to ensure that if there is a computation for the same id in the \"synchronized\" block below,\n        // it will have the same object instance to lock the current execution until the other is finished.\n        ReentrantLock lock = cacheInteractions.computeIfAbsent(id, s -> new ReentrantLock());"
            },
            {
              "step": 11,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "                logger.debugf(\"Concurrent execution detected for realm '%s'.\", id);\n            }\n\n            return compute.apply(id, session);\n        } finally {\n            lock.unlock();\n            cacheInteractions.remove(id, lock);"
            },
            {
              "step": 12,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 13,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 14,
              "variableName": "String cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        }\n    }\n\n    private ClientModel prepareCachedClientByClientId(RealmModel realm, String clientId, String cacheKey) {\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        String id;\n        if (query == null) {"
            },
            {
              "step": 15,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "                return null;\n            }\n            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {"
            },
            {
              "step": 16,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "String",
              "code": "        this.clients = clients;\n    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 17,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "String",
              "code": "    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.clients = new HashSet<>();"
            },
            {
              "step": 18,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 19,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "AbstractRevisioned",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 22,
              "variableName": "super(revisioned, id);",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "ClientListQuery [id] : String",
              "code": "    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.clients = new HashSet<>();"
            },
            {
              "step": 23,
              "variableName": "ClientListQuery",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/ClientListQuery.java",
              "type": "ClientListQuery [id] : String",
              "code": "        this.clients = clients;\n    }\n\n    public ClientListQuery(Long revisioned, String id, RealmModel realm, String client) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 24,
              "variableName": "new ClientListQuery(loaded, cacheKey, realm, id)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "ClientListQuery [id] : String",
              "code": "                return null;\n            }\n            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {"
            },
            {
              "step": 25,
              "variableName": "query",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "ClientListQuery [id] : String",
              "code": "            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {\n                return model;\n            }"
            },
            {
              "step": 26,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "        revisions.put(id, next);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {"
            },
            {
              "step": 28,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {"
            },
            {
              "step": 29,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "ClientListQuery [id] : String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 30,
              "variableName": "getId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "ClientListQuery [id] : String",
              "code": "    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n"
            },
            {
              "step": 31,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "ClientListQuery [id] : String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 32,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 33,
              "variableName": "object.getId()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 34,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "            revisions.startBatch();\n            if (!revisions.getAdvancedCache().lock(id)) {\n                if (getLogger().isTraceEnabled()) {\n                    getLogger().tracev(\"Could not obtain version lock: {0}\", id);\n                }\n                return;\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 4,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 6,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        return adapter;\n    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n"
            },
            {
              "step": 7,
              "variableName": "realmId + \".username.\" + username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n\n    static String getUserByEmailCacheKey(String realmId, String email) {"
            },
            {
              "step": 8,
              "variableName": "getUserByUsernameCacheKey(realm.getId(), username)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 9,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "\n            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n            if (adapter instanceof UserAdapter) { // this was cached, so we can cache query too\n                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n                cache.addRevisioned(query, startupRevision);\n            }\n            managedUsers.put(userId, adapter);"
            },
            {
              "step": 10,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "String",
              "code": "        this.users = users;\n    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 11,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "String",
              "code": "    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.users = new HashSet<>();"
            },
            {
              "step": 12,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 13,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "this",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "AbstractRevisioned",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 16,
              "variableName": "super(revisioned, id);",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "UserListQuery [id] : String",
              "code": "    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.users = new HashSet<>();"
            },
            {
              "step": 17,
              "variableName": "UserListQuery",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "UserListQuery [id] : String",
              "code": "        this.users = users;\n    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 18,
              "variableName": "new UserListQuery(loaded, cacheKey, realm, model.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "UserListQuery [id] : String",
              "code": "\n            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n            if (adapter instanceof UserAdapter) { // this was cached, so we can cache query too\n                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n                cache.addRevisioned(query, startupRevision);\n            }\n            managedUsers.put(userId, adapter);"
            },
            {
              "step": 19,
              "variableName": "query",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "UserListQuery [id] : String",
              "code": "            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n            if (adapter instanceof UserAdapter) { // this was cached, so we can cache query too\n                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n                cache.addRevisioned(query, startupRevision);\n            }\n            managedUsers.put(userId, adapter);\n            return adapter;"
            },
            {
              "step": 20,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "        revisions.put(id, next);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {"
            },
            {
              "step": 22,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {"
            },
            {
              "step": 23,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 24,
              "variableName": "getId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "UserListQuery [id] : String",
              "code": "    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n"
            },
            {
              "step": 25,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "UserListQuery [id] : String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "object.getId()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 28,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "            revisions.startBatch();\n            if (!revisions.getAdvancedCache().lock(id)) {\n                if (getLogger().isTraceEnabled()) {\n                    getLogger().tracev(\"Could not obtain version lock: {0}\", id);\n                }\n                return;\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);\n        }"
            },
            {
              "step": 4,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 6,
              "variableName": "username.toLowerCase()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 7,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 8,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "        return adapter;\n    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "realmId + \".username.\" + username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getUserByUsernameCacheKey(String realmId, String username) {\n        return realmId + \".username.\" + username;\n    }\n\n    static String getUserByEmailCacheKey(String realmId, String email) {"
            },
            {
              "step": 10,
              "variableName": "getUserByUsernameCacheKey(realm.getId(), username)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "            logger.tracev(\"realmInvalidations\");\n            return getDelegate().getUserByUsername(realm, username);\n        }\n        String cacheKey = getUserByUsernameCacheKey(realm.getId(), username);\n        if (invalidations.contains(cacheKey)) {\n            logger.tracev(\"invalidations\");\n            return getDelegate().getUserByUsername(realm, username);"
            },
            {
              "step": 11,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "\n            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n            if (adapter instanceof UserAdapter) { // this was cached, so we can cache query too\n                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n                cache.addRevisioned(query, startupRevision);\n            }\n            managedUsers.put(userId, adapter);"
            },
            {
              "step": 12,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "String",
              "code": "        this.users = users;\n    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 13,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "String",
              "code": "    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.users = new HashSet<>();"
            },
            {
              "step": 14,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 15,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "this",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "AbstractRevisioned",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "AbstractRevisioned [id] : String",
              "code": "    private Long revision;\n    private final long cacheTimestamp = Time.currentTimeMillis();\n\n    public AbstractRevisioned(Long revision, String id) {\n        this.revision = revision;\n        this.id = id;\n    }"
            },
            {
              "step": 18,
              "variableName": "super(revisioned, id);",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "UserListQuery [id] : String",
              "code": "    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();\n        this.users = new HashSet<>();"
            },
            {
              "step": 19,
              "variableName": "UserListQuery",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/UserListQuery.java",
              "type": "UserListQuery [id] : String",
              "code": "        this.users = users;\n    }\n\n    public UserListQuery(Long revisioned, String id, RealmModel realm, String user) {\n        super(revisioned, id);\n        this.realm = realm.getId();\n        this.realmName = realm.getName();"
            },
            {
              "step": 20,
              "variableName": "new UserListQuery(loaded, cacheKey, realm, model.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "UserListQuery [id] : String",
              "code": "\n            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n            if (adapter instanceof UserAdapter) { // this was cached, so we can cache query too\n                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n                cache.addRevisioned(query, startupRevision);\n            }\n            managedUsers.put(userId, adapter);"
            },
            {
              "step": 21,
              "variableName": "query",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "UserListQuery [id] : String",
              "code": "            UserModel adapter = getUserAdapter(realm, userId, loaded, model);\n            if (adapter instanceof UserAdapter) { // this was cached, so we can cache query too\n                query = new UserListQuery(loaded, cacheKey, realm, model.getId());\n                cache.addRevisioned(query, startupRevision);\n            }\n            managedUsers.put(userId, adapter);\n            return adapter;"
            },
            {
              "step": 22,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "        revisions.put(id, next);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "    }\n\n    public void addRevisioned(Revisioned object, long startupRevision) {\n        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {"
            },
            {
              "step": 24,
              "variableName": "Revisioned object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "        addRevisioned(object, startupRevision, -1);\n    }\n\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {"
            },
            {
              "step": 25,
              "variableName": "object",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "UserListQuery [id] : String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 26,
              "variableName": "getId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "UserListQuery [id] : String",
              "code": "    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n"
            },
            {
              "step": 27,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "UserListQuery [id] : String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/entities/AbstractRevisioned.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "object.getId()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "String",
              "code": "\n    public void addRevisioned(Revisioned object, long startupRevision, long lifespan) {\n        //startRevisionBatch();\n        String id = object.getId();\n        try {\n            //revisions.getAdvancedCache().lock(id);\n            Long rev = revisions.get(id);"
            },
            {
              "step": 30,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/CacheManager.java",
              "type": "",
              "code": "            revisions.startBatch();\n            if (!revisions.getAdvancedCache().lock(id)) {\n                if (getLogger().isTraceEnabled()) {\n                    getLogger().tracev(\"Could not obtain version lock: {0}\", id);\n                }\n                return;\n            }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 65,
      "fileName": "RealmCacheManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        return getClientById(realm, id);\n    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "realmId + \".client.query.by.clientId.\" + clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "getClientByClientIdCacheKey(clientId, realm.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 7,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all\n     * other requests will use the cached realm, which is much more efficient.\n     */\n    public <T> T computeSerialized(KeycloakSession session, String id, BiFunction<String, KeycloakSession, T> compute) {\n        // this locking is only to ensure that if there is a computation for the same id in the \"synchronized\" block below,\n        // it will have the same object instance to lock the current execution until the other is finished.\n        ReentrantLock lock = cacheInteractions.computeIfAbsent(id, s -> new ReentrantLock());"
            },
            {
              "step": 9,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "",
              "code": "            // in case the previous thread has removed the entry in the finally block\n            ReentrantLock existingLock = cacheInteractions.putIfAbsent(id, lock);\n            if (existingLock != lock) {\n                logger.debugf(\"Concurrent execution detected for realm '%s'.\", id);\n            }\n\n            return compute.apply(id, session);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 5,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 6,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        return getClientById(realm, id);\n    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n"
            },
            {
              "step": 7,
              "variableName": "realmId + \".client.query.by.clientId.\" + clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    static String getClientByClientIdCacheKey(String clientId, String realmId) {\n        return realmId + \".client.query.by.clientId.\" + clientId;\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "getClientByClientIdCacheKey(clientId, realm.getId())",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }"
            },
            {
              "step": 9,
              "variableName": "cacheKey",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 10,
              "variableName": "String id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "String",
              "code": "     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all\n     * other requests will use the cached realm, which is much more efficient.\n     */\n    public <T> T computeSerialized(KeycloakSession session, String id, BiFunction<String, KeycloakSession, T> compute) {\n        // this locking is only to ensure that if there is a computation for the same id in the \"synchronized\" block below,\n        // it will have the same object instance to lock the current execution until the other is finished.\n        ReentrantLock lock = cacheInteractions.computeIfAbsent(id, s -> new ReentrantLock());"
            },
            {
              "step": 11,
              "variableName": "id",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "",
              "code": "            // in case the previous thread has removed the entry in the finally block\n            ReentrantLock existingLock = cacheInteractions.putIfAbsent(id, lock);\n            if (existingLock != lock) {\n                logger.debugf(\"Concurrent execution detected for realm '%s'.\", id);\n            }\n\n            return compute.apply(id, session);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 66,
      "fileName": "RealmCacheSession.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "",
              "code": "        }\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        if (query != null) {\n            logger.tracev(\"client by name cache hit: {0}\", clientId);\n            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 5,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "",
              "code": "        }\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        if (query != null) {\n            logger.tracev(\"client by name cache hit: {0}\", clientId);\n            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 67,
      "fileName": "RealmCacheSession.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 3,
              "variableName": "(key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 4,
              "variableName": "(key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 5,
              "variableName": "BiFunction<String, KeycloakSession, T> compute",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all\n     * other requests will use the cached realm, which is much more efficient.\n     */\n    public <T> T computeSerialized(KeycloakSession session, String id, BiFunction<String, KeycloakSession, T> compute) {\n        // this locking is only to ensure that if there is a computation for the same id in the \"synchronized\" block below,\n        // it will have the same object instance to lock the current execution until the other is finished.\n        ReentrantLock lock = cacheInteractions.computeIfAbsent(id, s -> new ReentrantLock());"
            },
            {
              "step": 6,
              "variableName": "compute",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "                logger.debugf(\"Concurrent execution detected for realm '%s'.\", id);\n            }\n\n            return compute.apply(id, session);\n        } finally {\n            lock.unlock();\n            cacheInteractions.remove(id, lock);"
            },
            {
              "step": 7,
              "variableName": "(key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 9,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 10,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        }\n    }\n\n    private ClientModel prepareCachedClientByClientId(RealmModel realm, String clientId, String cacheKey) {\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        String id;\n        if (query == null) {"
            },
            {
              "step": 11,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "",
              "code": "            }\n            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {\n                return model;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 5,
              "variableName": "(key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 6,
              "variableName": "(key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 7,
              "variableName": "BiFunction<String, KeycloakSession, T> compute",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "     * Instead of each request loading the realm in parallel, this lets the first request load the realm, and all\n     * other requests will use the cached realm, which is much more efficient.\n     */\n    public <T> T computeSerialized(KeycloakSession session, String id, BiFunction<String, KeycloakSession, T> compute) {\n        // this locking is only to ensure that if there is a computation for the same id in the \"synchronized\" block below,\n        // it will have the same object instance to lock the current execution until the other is finished.\n        ReentrantLock lock = cacheInteractions.computeIfAbsent(id, s -> new ReentrantLock());"
            },
            {
              "step": 8,
              "variableName": "compute",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheManager.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "                logger.debugf(\"Concurrent execution detected for realm '%s'.\", id);\n            }\n\n            return compute.apply(id, session);\n        } finally {\n            lock.unlock();\n            cacheInteractions.remove(id, lock);"
            },
            {
              "step": 9,
              "variableName": "(key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 10,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "new BiFunction<String,KeycloakSession,ClientModel>(...) { ... } [clientId] : String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 11,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "            String id = query.getClients().iterator().next();\n            return getClientById(realm, id);\n        } else {\n            return cache.computeSerialized(session, cacheKey, (key, keycloakSession) -> prepareCachedClientByClientId(realm, clientId, key));\n        }\n    }\n"
            },
            {
              "step": 12,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "        }\n    }\n\n    private ClientModel prepareCachedClientByClientId(RealmModel realm, String clientId, String cacheKey) {\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        String id;\n        if (query == null) {"
            },
            {
              "step": 13,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "",
              "code": "            }\n            id = model.getId();\n            query = new ClientListQuery(loaded, cacheKey, realm, id);\n            logger.tracev(\"adding client by name cache miss: {0}\", clientId);\n            cache.addRevisioned(query, startupRevision);\n            if (invalidations.contains(model.getId())) {\n                return model;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 68,
      "fileName": "UserCacheSession.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameAndPassword",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String[]",
              "code": "\n        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force"
            },
            {
              "step": 1,
              "variableName": "username",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/saml/profile/ecp/authenticator/HttpBasicAuthenticator.java",
              "type": "String",
              "code": "        if (usernameAndPassword != null) {\n            final RealmModel realm = context.getRealm();\n            final String username = usernameAndPassword[0];\n            final UserModel user = context.getSession().users().getUserByUsername(realm, username);\n\n            // to allow success/failure logging for brute force\n            context.getEvent().detail(Details.USERNAME, username);"
            },
            {
              "step": 2,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);"
            },
            {
              "step": 3,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        UserModel user = localStorage().getUserByUsername(realm, username);\n        if (user != null) {\n            return importValidation(realm, user);\n        }"
            },
            {
              "step": 4,
              "variableName": "String username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {"
            },
            {
              "step": 5,
              "variableName": "username",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/UserCacheSession.java",
              "type": "",
              "code": "\n    @Override\n    public UserModel getUserByUsername(RealmModel realm, String username) {\n        logger.tracev(\"getUserByUsername: {0}\", username);\n        username = username.toLowerCase();\n        if (realmInvalidations.contains(realm.getId())) {\n            logger.tracev(\"realmInvalidations\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 69,
      "fileName": "InfinispanKeycloakTransaction.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "secret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 1,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 2,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 4,
              "variableName": "OAuth2DeviceUserCodeModel",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 5,
              "variableName": "new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 6,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 7,
              "variableName": "serializeKey",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 9,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 10,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "        return userCode;\n    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 12,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "Object[] [[]] : String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 13,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 14,
              "variableName": "createKey(realm, userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 15,
              "variableName": "userCode.serializeKey()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 16,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void put(String key, long lifespanSeconds, Map<String, String> notes) {\n        SingleUseObjectValueEntity tokenValue = new SingleUseObjectValueEntity(notes);\n        try {\n            BasicCache<String, SingleUseObjectValueEntity> cache = singleUseObjectCache.get();"
            },
            {
              "step": 17,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "        SingleUseObjectValueEntity tokenValue = new SingleUseObjectValueEntity(notes);\n        try {\n            BasicCache<String, SingleUseObjectValueEntity> cache = singleUseObjectCache.get();\n            tx.put(cache, key, tokenValue, InfinispanUtil.toHotrodTimeMs(cache, Time.toMillis(lifespanSeconds)), TimeUnit.MILLISECONDS);\n        } catch (HotRodClientException re) {\n            // No need to retry. The hotrod (remoteCache) has some retries in itself in case of some random network error happened.\n            if (logger.isDebugEnabled()) {"
            },
            {
              "step": 18,
              "variableName": "K key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanKeycloakTransaction.java",
              "type": "String",
              "code": "        return active;\n    }\n\n    public <K, V> void put(BasicCache<K, V> cache, K key, V value, long lifespan, TimeUnit lifespanUnit) {\n        log.tracev(\"Adding cache operation: {0} on {1}\", CacheOperation.ADD_WITH_LIFESPAN, key);\n\n        Object taskKey = getTaskKey(cache, key);"
            },
            {
              "step": 19,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanKeycloakTransaction.java",
              "type": "",
              "code": "    }\n\n    public <K, V> void put(BasicCache<K, V> cache, K key, V value, long lifespan, TimeUnit lifespanUnit) {\n        log.tracev(\"Adding cache operation: {0} on {1}\", CacheOperation.ADD_WITH_LIFESPAN, key);\n\n        Object taskKey = getTaskKey(cache, key);\n        if (tasks.containsKey(taskKey)) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 70,
      "fileName": "InfinispanSingleUseObjectProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "secret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 1,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 2,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 4,
              "variableName": "OAuth2DeviceUserCodeModel",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 5,
              "variableName": "new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 6,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 7,
              "variableName": "serializeKey",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 9,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 10,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "        return userCode;\n    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 12,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "Object[] [[]] : String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 13,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 14,
              "variableName": "createKey(realm, userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 15,
              "variableName": "userCode.serializeKey()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 16,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void put(String key, long lifespanSeconds, Map<String, String> notes) {\n        SingleUseObjectValueEntity tokenValue = new SingleUseObjectValueEntity(notes);\n        try {\n            BasicCache<String, SingleUseObjectValueEntity> cache = singleUseObjectCache.get();"
            },
            {
              "step": 17,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProvider.java",
              "type": "",
              "code": "        } catch (HotRodClientException re) {\n            // No need to retry. The hotrod (remoteCache) has some retries in itself in case of some random network error happened.\n            if (logger.isDebugEnabled()) {\n                logger.debugf(re, \"Failed when adding code %s\", key);\n            }\n            throw re;\n        }"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 71,
      "fileName": "InfinispanSingleUseObjectProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credential",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java",
              "type": "CredentialModel",
              "code": "\n                SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n                final long validLifespan = (long) credentialData.getPeriod() * (2L * policy.getLookAheadWindow() + 1);\n                final String searchKey = credential.getId() + \".\" + challengeResponse;\n\n                return singleUseStore.putIfAbsent(searchKey, validLifespan);\n            }"
            },
            {
              "step": 1,
              "variableName": "getId",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialModel.java",
              "type": "CredentialModel",
              "code": "        return res;\n    }\n\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {"
            },
            {
              "step": 2,
              "variableName": "id",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialModel.java",
              "type": "String",
              "code": "    }\n\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;"
            },
            {
              "step": 3,
              "variableName": "credential.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java",
              "type": "String",
              "code": "\n                SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n                final long validLifespan = (long) credentialData.getPeriod() * (2L * policy.getLookAheadWindow() + 1);\n                final String searchKey = credential.getId() + \".\" + challengeResponse;\n\n                return singleUseStore.putIfAbsent(searchKey, validLifespan);\n            }"
            },
            {
              "step": 4,
              "variableName": "searchKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java",
              "type": "String",
              "code": "                final long validLifespan = (long) credentialData.getPeriod() * (2L * policy.getLookAheadWindow() + 1);\n                final String searchKey = credential.getId() + \".\" + challengeResponse;\n\n                return singleUseStore.putIfAbsent(searchKey, validLifespan);\n            }\n        }\n        return false;"
            },
            {
              "step": 5,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public boolean putIfAbsent(String key, long lifespanInSeconds) {\n        if (persistRevokedTokens && key.endsWith(REVOKED_KEY)) {\n            throw new ModelException(\"Revoked tokens can't be used in putIfAbsent\");\n        }"
            },
            {
              "step": 6,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/InfinispanSingleUseObjectProvider.java",
              "type": "",
              "code": "        } catch (HotRodClientException re) {\n            // No need to retry. The hotrod (remoteCache) has some retries in itself in case of some random network error happened.\n            // In case of lock conflict, we don't want to retry anyway as there was likely an attempt to use the token from different place.\n            logger.debugf(re, \"Failed when adding token %s\", key);\n\n            return false;\n        }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 72,
      "fileName": "RemoteInfinispanSingleUseObjectProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credential",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java",
              "type": "CredentialModel",
              "code": "\n                SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n                final long validLifespan = (long) credentialData.getPeriod() * (2L * policy.getLookAheadWindow() + 1);\n                final String searchKey = credential.getId() + \".\" + challengeResponse;\n\n                return singleUseStore.putIfAbsent(searchKey, validLifespan);\n            }"
            },
            {
              "step": 1,
              "variableName": "getId",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialModel.java",
              "type": "CredentialModel",
              "code": "        return res;\n    }\n\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {"
            },
            {
              "step": 2,
              "variableName": "id",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialModel.java",
              "type": "String",
              "code": "    }\n\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;"
            },
            {
              "step": 3,
              "variableName": "credential.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java",
              "type": "String",
              "code": "\n                SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n                final long validLifespan = (long) credentialData.getPeriod() * (2L * policy.getLookAheadWindow() + 1);\n                final String searchKey = credential.getId() + \".\" + challengeResponse;\n\n                return singleUseStore.putIfAbsent(searchKey, validLifespan);\n            }"
            },
            {
              "step": 4,
              "variableName": "searchKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/OTPCredentialProvider.java",
              "type": "String",
              "code": "                final long validLifespan = (long) credentialData.getPeriod() * (2L * policy.getLookAheadWindow() + 1);\n                final String searchKey = credential.getId() + \".\" + challengeResponse;\n\n                return singleUseStore.putIfAbsent(searchKey, validLifespan);\n            }\n        }\n        return false;"
            },
            {
              "step": 5,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public boolean putIfAbsent(String key, long lifespanInSeconds) {\n        try {\n            return withReturnValue().putIfAbsent(key, wrap(null), lifespanInSeconds, TimeUnit.SECONDS) == null;\n        } catch (HotRodClientException re) {"
            },
            {
              "step": 6,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "",
              "code": "        } catch (HotRodClientException re) {\n            // No need to retry. The hotrod (remoteCache) has some retries in itself in case of some random network error happened.\n            // In case of lock conflict, we don't want to retry anyway as there was likely an attempt to use the token from different place.\n            logger.debugf(re, \"Failed when adding token %s\", key);\n            return false;\n        }\n    }"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 73,
      "fileName": "RemoteInfinispanKeycloakTransaction.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "secret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 1,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 2,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 4,
              "variableName": "OAuth2DeviceUserCodeModel",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 5,
              "variableName": "new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 6,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 7,
              "variableName": "serializeKey",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 9,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 10,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "        return userCode;\n    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 12,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "Object[] [[]] : String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 13,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 14,
              "variableName": "createKey(realm, userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 15,
              "variableName": "userCode.serializeKey()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 16,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void put(String key, long lifespanSeconds, Map<String, String> notes) {\n        if (key.endsWith(REVOKED_KEY)) {\n            revokeToken(key, lifespanSeconds);\n            return;"
            },
            {
              "step": 17,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "            revokeToken(key, lifespanSeconds);\n            return;\n        }\n        transaction.put(key, wrap(notes), lifespanSeconds, TimeUnit.SECONDS);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "K key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/transaction/RemoteInfinispanKeycloakTransaction.java",
              "type": "String",
              "code": "        tasks.clear();\n    }\n\n    public void put(K key, V value, long lifespan, TimeUnit timeUnit) {\n        logger.tracef(\"Adding %s.put(%S)\", cache.getName(), key);\n\n        if (tasks.containsKey(key)) {"
            },
            {
              "step": 19,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/transaction/RemoteInfinispanKeycloakTransaction.java",
              "type": "",
              "code": "    }\n\n    public void put(K key, V value, long lifespan, TimeUnit timeUnit) {\n        logger.tracef(\"Adding %s.put(%S)\", cache.getName(), key);\n\n        if (tasks.containsKey(key)) {\n            throw new IllegalStateException(\"Can't add entry: task \" + tasks.get(key) + \" in progress for session\");"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "secret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 1,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 2,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 3,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;\n    }\n\n    public static OAuth2DeviceUserCodeModel fromCache(RealmModel realm, String userCode, Map<String, String> data) {"
            },
            {
              "step": 4,
              "variableName": "OAuth2DeviceUserCodeModel",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    private final String deviceCode;\n    private final String userCode;\n\n    public OAuth2DeviceUserCodeModel(RealmModel realm, String deviceCode, String userCode) {\n        this.realm = realm;\n        this.deviceCode = deviceCode;\n        this.userCode = userCode;"
            },
            {
              "step": 5,
              "variableName": "new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "            request.getAdditionalReqParams(), request.getCodeChallenge(), request.getCodeChallengeMethod());\n        OAuth2DeviceUserCodeProvider userCodeProvider = session.getProvider(OAuth2DeviceUserCodeProvider.class);\n        String secret = userCodeProvider.generate();\n        OAuth2DeviceUserCodeModel userCode = new OAuth2DeviceUserCodeModel(realm, deviceCode.getDeviceCode(), secret);\n\n        // To inform \"expired_token\" to the client, the lifespan of the cache provider is longer than device code\n        int lifespanSeconds = expiresIn + interval + 10;"
            },
            {
              "step": 6,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 7,
              "variableName": "serializeKey",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "OAuth2DeviceUserCodeModel [userCode] : String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 9,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 10,
              "variableName": "String userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "        return userCode;\n    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "userCode",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 12,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "Object[] [[]] : String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 13,
              "variableName": "String.format(\"%s.uc.%s\", realm.getId(), userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public static String createKey(RealmModel realm, String userCode) {\n        return String.format(\"%s.uc.%s\", realm.getId(), userCode);\n    }\n\n    public String serializeKey() {"
            },
            {
              "step": 14,
              "variableName": "createKey(realm, userCode)",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/models/OAuth2DeviceUserCodeModel.java",
              "type": "String",
              "code": "    }\n\n    public String serializeKey() {\n        return createKey(realm, userCode);\n    }\n\n    public Map<String, String> serializeValue() {"
            },
            {
              "step": 15,
              "variableName": "userCode.serializeKey()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/device/endpoints/DeviceEndpoint.java",
              "type": "String",
              "code": "        SingleUseObjectProvider singleUseStore = session.singleUseObjects();\n\n        singleUseStore.put(deviceCode.serializeKey(), lifespanSeconds, deviceCode.toMap());\n        singleUseStore.put(userCode.serializeKey(), lifespanSeconds, userCode.serializeValue());\n\n        try {\n            String deviceUrl = realm.getAttribute(SHORT_VERIFICATION_URI);"
            },
            {
              "step": 16,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void put(String key, long lifespanSeconds, Map<String, String> notes) {\n        if (key.endsWith(REVOKED_KEY)) {\n            revokeToken(key, lifespanSeconds);\n            return;"
            },
            {
              "step": 17,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    @Override\n    public void put(String key, long lifespanSeconds, Map<String, String> notes) {\n        if (key.endsWith(REVOKED_KEY)) {\n            revokeToken(key, lifespanSeconds);\n            return;\n        }\n        transaction.put(key, wrap(notes), lifespanSeconds, TimeUnit.SECONDS);"
            },
            {
              "step": 18,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "        return transaction.getCache().withFlags(Flag.FORCE_RETURN_VALUE);\n    }\n\n    private void revokeToken(String key, long lifespanSeconds) {\n        transaction.put(key, REVOKED_TOKEN_VALUE, lifespanSeconds, TimeUnit.SECONDS);\n        var token = key.substring(0, key.length() - REVOKED_KEY.length());\n        revokeTokenConsumer.onTokenRevoke(token, lifespanSeconds);"
            },
            {
              "step": 19,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/RemoteInfinispanSingleUseObjectProvider.java",
              "type": "String",
              "code": "    }\n\n    private void revokeToken(String key, long lifespanSeconds) {\n        transaction.put(key, REVOKED_TOKEN_VALUE, lifespanSeconds, TimeUnit.SECONDS);\n        var token = key.substring(0, key.length() - REVOKED_KEY.length());\n        revokeTokenConsumer.onTokenRevoke(token, lifespanSeconds);\n    }"
            },
            {
              "step": 20,
              "variableName": "K key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/transaction/RemoteInfinispanKeycloakTransaction.java",
              "type": "String",
              "code": "        tasks.clear();\n    }\n\n    public void put(K key, V value, long lifespan, TimeUnit timeUnit) {\n        logger.tracef(\"Adding %s.put(%S)\", cache.getName(), key);\n\n        if (tasks.containsKey(key)) {"
            },
            {
              "step": 21,
              "variableName": "key",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/remote/transaction/RemoteInfinispanKeycloakTransaction.java",
              "type": "",
              "code": "    }\n\n    public void put(K key, V value, long lifespan, TimeUnit timeUnit) {\n        logger.tracef(\"Adding %s.put(%S)\", cache.getName(), key);\n\n        if (tasks.containsKey(key)) {\n            throw new IllegalStateException(\"Can't add entry: task \" + tasks.get(key) + \" in progress for session\");"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 74,
      "fileName": "JpaRealmProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;\n        }"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        logger.tracef(\"getClientByClientId(%s, %s)%s\", realm, clientId, getShortStackTrace());\n\n        TypedQuery<String> query = em.createNamedQuery(\"findClientIdByClientId\", String.class);"
            },
            {
              "step": 5,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
              "type": "",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        logger.tracef(\"getClientByClientId(%s, %s)%s\", realm, clientId, getShortStackTrace());\n\n        TypedQuery<String> query = em.createNamedQuery(\"findClientIdByClientId\", String.class);\n        query.setParameter(\"clientId\", clientId);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "usernameSecret",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String[]",
              "code": "        if (authorizationHeader != null) {\n            String[] usernameSecret = BasicAuthHelper.RFC6749.parseHeader(authorizationHeader);\n            if (usernameSecret != null) {\n                client_id = usernameSecret[0];\n                clientSecret = usernameSecret[1];\n            } else {\n"
            },
            {
              "step": 1,
              "variableName": "client_id",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/authenticators/client/ClientIdAndSecretAuthenticator.java",
              "type": "String",
              "code": "\n        context.getEvent().client(client_id);\n\n        ClientModel client = context.getSession().clients().getClientByClientId(context.getRealm(), client_id);\n        if (client == null) {\n            context.failure(AuthenticationFlowError.CLIENT_NOT_FOUND, null);\n            return;"
            },
            {
              "step": 2,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);"
            },
            {
              "step": 3,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/cache/infinispan/RealmCacheSession.java",
              "type": "String",
              "code": "    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        String cacheKey = getClientByClientIdCacheKey(clientId, realm.getId());\n        if (invalidations.contains(cacheKey) || listInvalidations.contains(realm.getId())) {\n            return getClientDelegate().getClientByClientId(realm, clientId);\n        }\n        ClientListQuery query = cache.get(cacheKey, ClientListQuery.class);\n        if (query != null) {"
            },
            {
              "step": 4,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;"
            },
            {
              "step": 5,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/ClientStorageManager.java",
              "type": "String",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        ClientModel client = localStorage().getClientByClientId(realm, clientId);\n        if (client != null) {\n            return client;\n        }"
            },
            {
              "step": 6,
              "variableName": "String clientId",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        logger.tracef(\"getClientByClientId(%s, %s)%s\", realm, clientId, getShortStackTrace());\n\n        TypedQuery<String> query = em.createNamedQuery(\"findClientIdByClientId\", String.class);"
            },
            {
              "step": 7,
              "variableName": "clientId",
              "uri": "keycloak-26.1.2/model/jpa/src/main/java/org/keycloak/models/jpa/JpaRealmProvider.java",
              "type": "",
              "code": "\n    @Override\n    public ClientModel getClientByClientId(RealmModel realm, String clientId) {\n        logger.tracef(\"getClientByClientId(%s, %s)%s\", realm, clientId, getShortStackTrace());\n\n        TypedQuery<String> query = em.createNamedQuery(\"findClientIdByClientId\", String.class);\n        query.setParameter(\"clientId\", clientId);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 75,
      "fileName": "UserStorageManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialType",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialModelInput.java",
              "type": "String",
              "code": "\n    @Override\n    public String getType() {\n        return credentialType;\n    }\n\n"
            },
            {
              "step": 1,
              "variableName": "input.getType()",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "",
              "code": "            if (Objects.nonNull(validationOutput)) {\n                CredentialValidationOutput.Status status = validationOutput.getAuthStatus();\n                if (status == CredentialValidationOutput.Status.AUTHENTICATED || status == CredentialValidationOutput.Status.CONTINUE || status == CredentialValidationOutput.Status.FAILED) {\n                    logger.tracef(\"Attempt to authenticate credential '%s' with provider '%s' finished with '%s'.\", input.getType(), credentialAuthentication, status);\n                    if (status == CredentialValidationOutput.Status.AUTHENTICATED) {\n                        logger.tracef(\"Authenticated user is '%s'\", validationOutput.getAuthenticatedUser().getUsername());\n                    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 78,
      "fileName": "UserStorageManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialType",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialModelInput.java",
              "type": "String",
              "code": "\n    @Override\n    public String getType() {\n        return credentialType;\n    }\n\n"
            },
            {
              "step": 1,
              "variableName": "input.getType()",
              "uri": "keycloak-26.1.2/model/storage-private/src/main/java/org/keycloak/storage/UserStorageManager.java",
              "type": "",
              "code": "                    break;\n                }\n            }\n            logger.tracef(\"Did not authenticate user by provider '%s' with the credential type '%s'. Will try to fallback to other user storage providers\", credentialAuthentication, input.getType());\n        }\n        return result;\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 79,
      "fileName": "KeycloakProcessor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "PasswordPolicy.PASSWORD_AGE",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/policy/AgePasswordPolicyProviderFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return PasswordPolicy.PASSWORD_AGE;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java",
              "type": "",
              "code": "                    providers.computeIfAbsent(spi.getProviderClass(), aClass -> new HashMap<>()).put(factory.getId(),\n                            factory);\n                } else {\n                    logger.debugv(\"SPI {0} provider {1} disabled\", spi.getName(), factory.getId());\n                }\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.CLIENT_CREDENTIALS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ClientCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.CLIENT_CREDENTIALS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java",
              "type": "",
              "code": "                    providers.computeIfAbsent(spi.getProviderClass(), aClass -> new HashMap<>()).put(factory.getId(),\n                            factory);\n                } else {\n                    logger.debugv(\"SPI {0} provider {1} disabled\", spi.getName(), factory.getId());\n                }\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.PASSWORD",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ResourceOwnerPasswordCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.PASSWORD;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/quarkus/deployment/src/main/java/org/keycloak/quarkus/deployment/KeycloakProcessor.java",
              "type": "",
              "code": "                    providers.computeIfAbsent(spi.getProviderClass(), aClass -> new HashMap<>()).put(factory.getId(),\n                            factory);\n                } else {\n                    logger.debugv(\"SPI {0} provider {1} disabled\", spi.getName(), factory.getId());\n                }\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 80,
      "fileName": "CredentialTypeMetadata.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "WebAuthnCredentialModel.TYPE_PASSWORDLESS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public String getType() {\n        return WebAuthnCredentialModel.TYPE_PASSWORDLESS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "getType()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "String",
              "code": "    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")\n                .helpText(\"webauthn-help-text\")"
            },
            {
              "step": 2,
              "variableName": "String type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "String",
              "code": "\n        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }"
            },
            {
              "step": 3,
              "variableName": "type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 4,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadata [type] : String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 5,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder displayName(String displayName) {"
            },
            {
              "step": 7,
              "variableName": "CredentialTypeMet",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 8,
              "variableName": "category",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder category(Category category) {\n            instance.category = category;\n            return this;\n        }"
            },
            {
              "step": 9,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder category(Category category) {\n            instance.category = category;\n            return this;\n        }\n\n        /**"
            },
            {
              "step": 10,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder displayName(String displayName) {\n            instance.displayName = displayName;\n            return this;\n        }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder displayName(String displayName) {\n            instance.displayName = displayName;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder helpText(String helpText) {"
            },
            {
              "step": 13,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 14,
              "variableName": "helpText",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder helpText(String helpText) {\n            instance.helpText = helpText;\n            return this;\n        }"
            },
            {
              "step": 15,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder helpText(String helpText) {\n            instance.helpText = helpText;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {"
            },
            {
              "step": 16,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 17,
              "variableName": "iconCssClass",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {\n            instance.iconCssClass = iconCssClass;\n            return this;\n        }"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {\n            instance.iconCssClass = iconCssClass;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder createAction(String createAction) {"
            },
            {
              "step": 19,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 20,
              "variableName": "createAction",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder createAction(String createAction) {\n            instance.createAction = createAction;\n            return this;\n        }"
            },
            {
              "step": 21,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder createAction(String createAction) {\n            instance.createAction = createAction;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder updateAction(String updateAction) {"
            },
            {
              "step": 22,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 23,
              "variableName": "removeable",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder removeable(boolean removeable) {\n            instance.removeable = removeable;\n            return this;\n        }"
            },
            {
              "step": 24,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder removeable(boolean removeable) {\n            instance.removeable = removeable;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder category(Category category) {"
            },
            {
              "step": 25,
              "variableName": "CredentialTypeMeta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 26,
              "variableName": "build",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "         *\n         * @return metadata\n         */\n        public CredentialTypeMetadata build(KeycloakSession session) {\n            assertNotNull(instance.type, \"type\");\n            assertNotNull(instance.displayName, \"displayName\");\n            assertNotNull(instance.helpText, \"helpText\");"
            },
            {
              "step": 27,
              "variableName": "verifyRequiredAction(session, instance.createAction)",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            assertNotNull(instance.removeable, \"removeable\");\n            assertNotNull(instance.category, \"category\");\n\n            if (!verifyRequiredAction(session, instance.createAction)) {\n                instance.createAction = null;\n            }\n            if (!verifyRequiredAction(session, instance.updateAction)) {"
            },
            {
              "step": 28,
              "variableName": "verifyRequiredAction",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "        }\n\n        // Check if required action of specified providerId is registered in the realm and enabled\n        private boolean verifyRequiredAction(KeycloakSession session, String requiredActionProviderId) {\n            if (requiredActionProviderId == null) {\n                return false;\n            }"
            },
            {
              "step": 29,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            },
            {
              "step": 30,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadata [type] : String",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            },
            {
              "step": 31,
              "variableName": "instance.type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "WebAuthnCredentialModel.TYPE_PASSWORDLESS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public String getType() {\n        return WebAuthnCredentialModel.TYPE_PASSWORDLESS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "getType()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "String",
              "code": "    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")\n                .helpText(\"webauthn-passwordless-help-text\")"
            },
            {
              "step": 2,
              "variableName": "String type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "String",
              "code": "\n        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }"
            },
            {
              "step": 3,
              "variableName": "type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 4,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadata [type] : String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 5,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder displayName(String displayName) {"
            },
            {
              "step": 7,
              "variableName": "CredentialTypeMet",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")"
            },
            {
              "step": 8,
              "variableName": "category",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder category(Category category) {\n            instance.category = category;\n            return this;\n        }"
            },
            {
              "step": 9,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder category(Category category) {\n            instance.category = category;\n            return this;\n        }\n\n        /**"
            },
            {
              "step": 10,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder displayName(String displayName) {\n            instance.displayName = displayName;\n            return this;\n        }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder displayName(String displayName) {\n            instance.displayName = displayName;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder helpText(String helpText) {"
            },
            {
              "step": 13,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")"
            },
            {
              "step": 14,
              "variableName": "helpText",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder helpText(String helpText) {\n            instance.helpText = helpText;\n            return this;\n        }"
            },
            {
              "step": 15,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder helpText(String helpText) {\n            instance.helpText = helpText;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {"
            },
            {
              "step": 16,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")"
            },
            {
              "step": 17,
              "variableName": "iconCssClass",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {\n            instance.iconCssClass = iconCssClass;\n            return this;\n        }"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {\n            instance.iconCssClass = iconCssClass;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder createAction(String createAction) {"
            },
            {
              "step": 19,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")"
            },
            {
              "step": 20,
              "variableName": "createAction",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder createAction(String createAction) {\n            instance.createAction = createAction;\n            return this;\n        }"
            },
            {
              "step": 21,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder createAction(String createAction) {\n            instance.createAction = createAction;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder updateAction(String updateAction) {"
            },
            {
              "step": 22,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")"
            },
            {
              "step": 23,
              "variableName": "removeable",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder removeable(boolean removeable) {\n            instance.removeable = removeable;\n            return this;\n        }"
            },
            {
              "step": 24,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder removeable(boolean removeable) {\n            instance.removeable = removeable;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder category(Category category) {"
            },
            {
              "step": 25,
              "variableName": "CredentialTypeMeta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.PASSWORDLESS)\n                .displayName(\"webauthn-passwordless-display-name\")"
            },
            {
              "step": 26,
              "variableName": "build",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "         *\n         * @return metadata\n         */\n        public CredentialTypeMetadata build(KeycloakSession session) {\n            assertNotNull(instance.type, \"type\");\n            assertNotNull(instance.displayName, \"displayName\");\n            assertNotNull(instance.helpText, \"helpText\");"
            },
            {
              "step": 27,
              "variableName": "verifyRequiredAction(session, instance.updateAction)",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            if (!verifyRequiredAction(session, instance.createAction)) {\n                instance.createAction = null;\n            }\n            if (!verifyRequiredAction(session, instance.updateAction)) {\n                instance.updateAction = null;\n            }\n            // Assume credential can't have both createAction and updateAction."
            },
            {
              "step": 28,
              "variableName": "verifyRequiredAction",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "        }\n\n        // Check if required action of specified providerId is registered in the realm and enabled\n        private boolean verifyRequiredAction(KeycloakSession session, String requiredActionProviderId) {\n            if (requiredActionProviderId == null) {\n                return false;\n            }"
            },
            {
              "step": 29,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            },
            {
              "step": 30,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadata [type] : String",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            },
            {
              "step": 31,
              "variableName": "instance.type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "WebAuthnCredentialModel.TYPE_PASSWORDLESS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnPasswordlessCredentialProvider.java",
              "type": "String",
              "code": "\n    @Override\n    public String getType() {\n        return WebAuthnCredentialModel.TYPE_PASSWORDLESS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "getType()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "String",
              "code": "    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")\n                .helpText(\"webauthn-help-text\")"
            },
            {
              "step": 2,
              "variableName": "String type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "String",
              "code": "\n        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }"
            },
            {
              "step": 3,
              "variableName": "type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 4,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadata [type] : String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 5,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "        private CredentialTypeMetadata instance = new CredentialTypeMetadata();\n\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n"
            },
            {
              "step": 6,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder type(String type) {\n            instance.type = type;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder displayName(String displayName) {"
            },
            {
              "step": 7,
              "variableName": "CredentialTypeMet",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 8,
              "variableName": "category",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder category(Category category) {\n            instance.category = category;\n            return this;\n        }"
            },
            {
              "step": 9,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder category(Category category) {\n            instance.category = category;\n            return this;\n        }\n\n        /**"
            },
            {
              "step": 10,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 11,
              "variableName": "displayName",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder displayName(String displayName) {\n            instance.displayName = displayName;\n            return this;\n        }"
            },
            {
              "step": 12,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder displayName(String displayName) {\n            instance.displayName = displayName;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder helpText(String helpText) {"
            },
            {
              "step": 13,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 14,
              "variableName": "helpText",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder helpText(String helpText) {\n            instance.helpText = helpText;\n            return this;\n        }"
            },
            {
              "step": 15,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder helpText(String helpText) {\n            instance.helpText = helpText;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {"
            },
            {
              "step": 16,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 17,
              "variableName": "iconCssClass",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {\n            instance.iconCssClass = iconCssClass;\n            return this;\n        }"
            },
            {
              "step": 18,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder iconCssClass(String iconCssClass) {\n            instance.iconCssClass = iconCssClass;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder createAction(String createAction) {"
            },
            {
              "step": 19,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 20,
              "variableName": "createAction",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder createAction(String createAction) {\n            instance.createAction = createAction;\n            return this;\n        }"
            },
            {
              "step": 21,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder createAction(String createAction) {\n            instance.createAction = createAction;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder updateAction(String updateAction) {"
            },
            {
              "step": 22,
              "variableName": "CredentialTypeMetadata.builder()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 23,
              "variableName": "removeable",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            return this;\n        }\n\n        public CredentialTypeMetadataBuilder removeable(boolean removeable) {\n            instance.removeable = removeable;\n            return this;\n        }"
            },
            {
              "step": 24,
              "variableName": "this",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n        public CredentialTypeMetadataBuilder removeable(boolean removeable) {\n            instance.removeable = removeable;\n            return this;\n        }\n\n        public CredentialTypeMetadataBuilder category(Category category) {"
            },
            {
              "step": 25,
              "variableName": "CredentialTypeMeta",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n    @Override\n    public CredentialTypeMetadata getCredentialTypeMetadata(CredentialTypeMetadataContext metadataContext) {\n        return CredentialTypeMetadata.builder()\n                .type(getType())\n                .category(CredentialTypeMetadata.Category.TWO_FACTOR)\n                .displayName(\"webauthn-display-name\")"
            },
            {
              "step": 26,
              "variableName": "build",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "         *\n         * @return metadata\n         */\n        public CredentialTypeMetadata build(KeycloakSession session) {\n            assertNotNull(instance.type, \"type\");\n            assertNotNull(instance.displayName, \"displayName\");\n            assertNotNull(instance.helpText, \"helpText\");"
            },
            {
              "step": 27,
              "variableName": "verifyRequiredAction(session, \"delete_credential\")",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "            if (instance.createAction != null && instance.updateAction != null) {\n                throw new IllegalStateException(\"Both createAction and updateAction are not null when building CredentialTypeMetadata for the credential type '\" + instance.type);\n            }\n            if (!verifyRequiredAction(session, \"delete_credential\")) {\n                instance.removeable = false;\n            }\n"
            },
            {
              "step": 28,
              "variableName": "verifyRequiredAction",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "        }\n\n        // Check if required action of specified providerId is registered in the realm and enabled\n        private boolean verifyRequiredAction(KeycloakSession session, String requiredActionProviderId) {\n            if (requiredActionProviderId == null) {\n                return false;\n            }"
            },
            {
              "step": 29,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadataBuilder [instance, type] : String",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            },
            {
              "step": 30,
              "variableName": "instance",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "CredentialTypeMetadata [type] : String",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            },
            {
              "step": 31,
              "variableName": "instance.type",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/credential/CredentialTypeMetadata.java",
              "type": "",
              "code": "\n            RealmModel realm = session.getContext().getRealm();\n            if (realm == null) {\n                logger.warnf(\"Realm was not set in context when trying to get credential metadata of provider '%s'\", instance.type);\n                return false;\n            }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 83,
      "fileName": "PasswordCredentialProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialData",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/credential/PasswordCredentialModel.java",
              "type": "PasswordCredentialData",
              "code": "\n\n    public PasswordCredentialData getPasswordCredentialData() {\n        return credentialData;\n    }\n\n    public PasswordSecretData getPasswordSecretData() {"
            },
            {
              "step": 1,
              "variableName": "password.getPasswordCredentialData()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/PasswordCredentialProvider.java",
              "type": "PasswordCredentialData",
              "code": "            logger.debugv(\"No password stored for user {0} \", user.getUsername());\n            return false;\n        }\n        String algorithm = password.getPasswordCredentialData().getAlgorithm();\n        PasswordHashProvider hash = session.getProvider(PasswordHashProvider.class, algorithm);\n        if (hash == null) {\n            logger.debugv(\"PasswordHashProvider {0} not found for user {1} \", algorithm, user.getUsername());"
            },
            {
              "step": 2,
              "variableName": "getAlgorithm",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/credential/dto/PasswordCredentialData.java",
              "type": "PasswordCredentialData",
              "code": "        return hashIterations;\n    }\n\n    public String getAlgorithm() {\n        return algorithm;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "algorithm",
              "uri": "keycloak-26.1.2/server-spi/src/main/java/org/keycloak/models/credential/dto/PasswordCredentialData.java",
              "type": "String",
              "code": "    }\n\n    public String getAlgorithm() {\n        return algorithm;\n    }\n\n    /**"
            },
            {
              "step": 4,
              "variableName": "password.getPasswordCredentialData().getAlgorithm()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/PasswordCredentialProvider.java",
              "type": "String",
              "code": "            logger.debugv(\"No password stored for user {0} \", user.getUsername());\n            return false;\n        }\n        String algorithm = password.getPasswordCredentialData().getAlgorithm();\n        PasswordHashProvider hash = session.getProvider(PasswordHashProvider.class, algorithm);\n        if (hash == null) {\n            logger.debugv(\"PasswordHashProvider {0} not found for user {1} \", algorithm, user.getUsername());"
            },
            {
              "step": 5,
              "variableName": "algorithm",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/PasswordCredentialProvider.java",
              "type": "",
              "code": "        String algorithm = password.getPasswordCredentialData().getAlgorithm();\n        PasswordHashProvider hash = session.getProvider(PasswordHashProvider.class, algorithm);\n        if (hash == null) {\n            logger.debugv(\"PasswordHashProvider {0} not found for user {1} \", algorithm, user.getUsername());\n            return false;\n        }\n        try {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 85,
      "fileName": "WebAuthnCredentialProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credential",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/authentication/requiredactions/WebAuthnRegister.java",
              "type": "WebAuthnCredentialModelInput",
              "code": "            String aaguid = newCredentialModel.getWebAuthnCredentialData().getAaguid();\n            logger.debugv(\"WebAuthn credential registration success for user {0}. credentialType = {1}, publicKeyCredentialId = {2}, publicKeyCredentialLabel = {3}, publicKeyCredentialAAGUID = {4}\",\n                    context.getUser().getUsername(), getCredentialType(), publicKeyCredentialId, label, aaguid);\n            webAuthnCredProvider.dumpCredentialModel(newCredentialModel, credential);\n\n            context.getEvent()\n                .detail(WebAuthnConstants.PUBKEY_CRED_ID_ATTR, publicKeyCredentialId)"
            },
            {
              "step": 1,
              "variableName": "WebAuthnCredentialModelInput auth",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "WebAuthnCredentialModelInput",
              "code": "                .collect(Collectors.toList());\n    }\n\n    public void dumpCredentialModel(WebAuthnCredentialModel credential, WebAuthnCredentialModelInput auth) {\n        if(logger.isDebugEnabled()) {\n            logger.debug(\"  Persisted Credential Info::\");\n            logger.debug(credential);"
            },
            {
              "step": 2,
              "variableName": "auth",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialProvider.java",
              "type": "",
              "code": "            logger.debug(\"  Persisted Credential Info::\");\n            logger.debug(credential);\n            logger.debug(\"  Context Credential Info::\");\n            logger.debug(auth);\n        }\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 87,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "supportedCredentialConfiguration",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "SupportedCredentialConfiguration",
              "code": "\n        // check that the user is allowed to get such credential\n        if (getClientsOfScope(supportedCredentialConfiguration.getScope(), format).isEmpty()) {\n            LOGGER.debugf(\"No OID4VP-Client supporting type %s registered.\", supportedCredentialConfiguration.getScope());\n            throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_TYPE));\n        }\n        // calculate the expiration of the preAuthorizedCode. The sessionCode will also expire at that time."
            },
            {
              "step": 1,
              "variableName": "getScope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "SupportedCredentialConfiguration",
              "code": "        return this;\n    }\n\n    public String getScope() {\n        return scope;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "scope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getScope() {\n        return scope;\n    }\n\n    public SupportedCredentialConfiguration setScope(String scope) {"
            },
            {
              "step": 3,
              "variableName": "supportedCredentialConfiguration.getScope()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "\n        // check that the user is allowed to get such credential\n        if (getClientsOfScope(supportedCredentialConfiguration.getScope(), format).isEmpty()) {\n            LOGGER.debugf(\"No OID4VP-Client supporting type %s registered.\", supportedCredentialConfiguration.getScope());\n            throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_TYPE));\n        }\n        // calculate the expiration of the preAuthorizedCode. The sessionCode will also expire at that time."
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 89,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialRequestVO",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "CredentialRequest",
              "code": "        if (vcIssuanceFlow == null || !vcIssuanceFlow.equals(PreAuthorizedCodeGrantTypeFactory.GRANT_TYPE)) {\n            // authz code flow\n            ClientModel client = clientSession.getClient();\n            String credentialIdentifier = credentialRequestVO.getCredentialIdentifier();\n            String scope = client.getAttributes().get(\"vc.\" + credentialIdentifier + \".scope\"); // following credential identifier in client attribute\n            AccessToken accessToken = bearerTokenAuthenticator.authenticate().getToken();\n            if (Arrays.stream(accessToken.getScope().split(\" \")).sequential().noneMatch(i -> i.equals(scope))) {"
            },
            {
              "step": 1,
              "variableName": "credentialIdentifier",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "            String scope = client.getAttributes().get(\"vc.\" + credentialIdentifier + \".scope\"); // following credential identifier in client attribute\n            AccessToken accessToken = bearerTokenAuthenticator.authenticate().getToken();\n            if (Arrays.stream(accessToken.getScope().split(\" \")).sequential().noneMatch(i -> i.equals(scope))) {\n                LOGGER.debugf(\"Scope check failure: credentialIdentifier = %s, required scope = %s, scope in access token = %s.\", credentialIdentifier, scope, accessToken.getScope());\n                throw new CorsErrorResponseException(cors, ErrorType.UNSUPPORTED_CREDENTIAL_TYPE.toString(), \"Scope check failure\", Response.Status.BAD_REQUEST);\n            } else {\n                LOGGER.debugf(\"Scope check success: credentialIdentifier = %s, required scope = %s, scope in access token = %s.\", credentialIdentifier, scope, accessToken.getScope());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 90,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialRequestVO",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "CredentialRequest",
              "code": "        if (vcIssuanceFlow == null || !vcIssuanceFlow.equals(PreAuthorizedCodeGrantTypeFactory.GRANT_TYPE)) {\n            // authz code flow\n            ClientModel client = clientSession.getClient();\n            String credentialIdentifier = credentialRequestVO.getCredentialIdentifier();\n            String scope = client.getAttributes().get(\"vc.\" + credentialIdentifier + \".scope\"); // following credential identifier in client attribute\n            AccessToken accessToken = bearerTokenAuthenticator.authenticate().getToken();\n            if (Arrays.stream(accessToken.getScope().split(\" \")).sequential().noneMatch(i -> i.equals(scope))) {"
            },
            {
              "step": 1,
              "variableName": "credentialIdentifier",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "                LOGGER.debugf(\"Scope check failure: credentialIdentifier = %s, required scope = %s, scope in access token = %s.\", credentialIdentifier, scope, accessToken.getScope());\n                throw new CorsErrorResponseException(cors, ErrorType.UNSUPPORTED_CREDENTIAL_TYPE.toString(), \"Scope check failure\", Response.Status.BAD_REQUEST);\n            } else {\n                LOGGER.debugf(\"Scope check success: credentialIdentifier = %s, required scope = %s, scope in access token = %s.\", credentialIdentifier, scope, accessToken.getScope());\n            }\n        } else {\n            clientSession.removeNote(PreAuthorizedCodeGrantType.VC_ISSUANCE_FLOW);"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 92,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialRequestVO",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "CredentialRequest",
              "code": "        // If the credential_identifier is present, Format can't be present. But this implementation will\n        // tolerate the presence of both, waiting for clarity in specifications.\n        // This implementation will privilege the presence of the credential config identifier.\n        String requestedCredentialId = credentialRequestVO.getCredentialIdentifier();\n        String requestedFormat = credentialRequestVO.getFormat();\n\n        // Check if at least one of both is available."
            },
            {
              "step": 1,
              "variableName": "requestedCredentialId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "        if (requestedCredentialId != null) {\n            supportedCredentialConfiguration = supportedCredentials.get(requestedCredentialId);\n            if (supportedCredentialConfiguration == null) {\n                LOGGER.debugf(\"Credential with configuration id %s not found.\", requestedCredentialId);\n                throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_TYPE));\n            }\n            // Then for format. We know spec does not allow both parameter. But we are tolerant if you send both"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 93,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialRequestVO",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "CredentialRequest",
              "code": "        // If the credential_identifier is present, Format can't be present. But this implementation will\n        // tolerate the presence of both, waiting for clarity in specifications.\n        // This implementation will privilege the presence of the credential config identifier.\n        String requestedCredentialId = credentialRequestVO.getCredentialIdentifier();\n        String requestedFormat = credentialRequestVO.getFormat();\n\n        // Check if at least one of both is available."
            },
            {
              "step": 1,
              "variableName": "requestedCredentialId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "            // Then for format. We know spec does not allow both parameter. But we are tolerant if you send both\n            // Was found by id, check that the format matches.\n            if (requestedFormat != null && !requestedFormat.equals(supportedCredentialConfiguration.getFormat())) {\n                LOGGER.debugf(\"Credential with configuration id %s does not support requested format %s, but supports %s.\", requestedCredentialId, requestedFormat, supportedCredentialConfiguration.getFormat());\n                throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_FORMAT));\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 94,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialRequestVO",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "CredentialRequest",
              "code": "        // tolerate the presence of both, waiting for clarity in specifications.\n        // This implementation will privilege the presence of the credential config identifier.\n        String requestedCredentialId = credentialRequestVO.getCredentialIdentifier();\n        String requestedFormat = credentialRequestVO.getFormat();\n\n        // Check if at least one of both is available.\n        if (requestedCredentialId == null && requestedFormat == null) {"
            },
            {
              "step": 1,
              "variableName": "requestedFormat",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "            // Then for format. We know spec does not allow both parameter. But we are tolerant if you send both\n            // Was found by id, check that the format matches.\n            if (requestedFormat != null && !requestedFormat.equals(supportedCredentialConfiguration.getFormat())) {\n                LOGGER.debugf(\"Credential with configuration id %s does not support requested format %s, but supports %s.\", requestedCredentialId, requestedFormat, supportedCredentialConfiguration.getFormat());\n                throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_FORMAT));\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 95,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "supportedCredentialConfiguration",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "SupportedCredentialConfiguration",
              "code": "            // Then for format. We know spec does not allow both parameter. But we are tolerant if you send both\n            // Was found by id, check that the format matches.\n            if (requestedFormat != null && !requestedFormat.equals(supportedCredentialConfiguration.getFormat())) {\n                LOGGER.debugf(\"Credential with configuration id %s does not support requested format %s, but supports %s.\", requestedCredentialId, requestedFormat, supportedCredentialConfiguration.getFormat());\n                throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_FORMAT));\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "getFormat",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "SupportedCredentialConfiguration",
              "code": "    @JsonIgnore\n    private CredentialBuildConfig credentialBuildConfig;\n\n    public String getFormat() {\n        return format;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "String",
              "code": "    private CredentialBuildConfig credentialBuildConfig;\n\n    public String getFormat() {\n        return format;\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "supportedCredentialConfiguration.getFormat()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "            // Then for format. We know spec does not allow both parameter. But we are tolerant if you send both\n            // Was found by id, check that the format matches.\n            if (requestedFormat != null && !requestedFormat.equals(supportedCredentialConfiguration.getFormat())) {\n                LOGGER.debugf(\"Credential with configuration id %s does not support requested format %s, but supports %s.\", requestedCredentialId, requestedFormat, supportedCredentialConfiguration.getFormat());\n                throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_FORMAT));\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 96,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialRequestVO",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "CredentialRequest",
              "code": "        // tolerate the presence of both, waiting for clarity in specifications.\n        // This implementation will privilege the presence of the credential config identifier.\n        String requestedCredentialId = credentialRequestVO.getCredentialIdentifier();\n        String requestedFormat = credentialRequestVO.getFormat();\n\n        // Check if at least one of both is available.\n        if (requestedCredentialId == null && requestedFormat == null) {"
            },
            {
              "step": 1,
              "variableName": "requestedFormat",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "            // Search by format\n            supportedCredentialConfiguration = getSupportedCredentialConfiguration(credentialRequestVO, supportedCredentials, requestedFormat);\n            if (supportedCredentialConfiguration == null) {\n                LOGGER.debugf(\"Credential with requested format %s, not supported.\", requestedFormat);\n                throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_FORMAT));\n            }\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 97,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "supportedCredentialConfiguration",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "SupportedCredentialConfiguration",
              "code": "        String format = supportedCredentialConfiguration.getFormat();\n\n        // check that the user is allowed to get such credential\n        if (getClientsOfScope(supportedCredentialConfiguration.getScope(), format).isEmpty()) {\n            LOGGER.debugf(\"No OID4VP-Client supporting type %s registered.\", supportedCredentialConfiguration.getScope());\n            throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_TYPE));\n        }"
            },
            {
              "step": 1,
              "variableName": "getScope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "SupportedCredentialConfiguration",
              "code": "        return this;\n    }\n\n    public String getScope() {\n        return scope;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "scope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getScope() {\n        return scope;\n    }\n\n    public SupportedCredentialConfiguration setScope(String scope) {"
            },
            {
              "step": 3,
              "variableName": "supportedCredentialConfiguration.getScope()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "        String format = supportedCredentialConfiguration.getFormat();\n\n        // check that the user is allowed to get such credential\n        if (getClientsOfScope(supportedCredentialConfiguration.getScope(), format).isEmpty()) {\n            LOGGER.debugf(\"No OID4VP-Client supporting type %s registered.\", supportedCredentialConfiguration.getScope());\n            throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_TYPE));\n        }"
            },
            {
              "step": 4,
              "variableName": "String vcScope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "\n    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {"
            },
            {
              "step": 5,
              "variableName": "vcScope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {\n            throw new BadRequestException(\"No VerifiableCredential-Scope was provided in the request.\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialConfig",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "SupportedCredentialConfiguration",
              "code": "     */\n    private Object getCredential(AuthenticationManager.AuthResult authResult, SupportedCredentialConfiguration credentialConfig, CredentialRequest credentialRequestVO) {\n\n        List<OID4VCClient> clients = getClientsOfScope(credentialConfig.getScope(), credentialConfig.getFormat());\n\n        List<OID4VCMapper> protocolMappers = getProtocolMappers(clients)\n                .stream()"
            },
            {
              "step": 1,
              "variableName": "getScope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "SupportedCredentialConfiguration",
              "code": "        return this;\n    }\n\n    public String getScope() {\n        return scope;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "scope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getScope() {\n        return scope;\n    }\n\n    public SupportedCredentialConfiguration setScope(String scope) {"
            },
            {
              "step": 3,
              "variableName": "credentialConfig.getScope()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "     */\n    private Object getCredential(AuthenticationManager.AuthResult authResult, SupportedCredentialConfiguration credentialConfig, CredentialRequest credentialRequestVO) {\n\n        List<OID4VCClient> clients = getClientsOfScope(credentialConfig.getScope(), credentialConfig.getFormat());\n\n        List<OID4VCMapper> protocolMappers = getProtocolMappers(clients)\n                .stream()"
            },
            {
              "step": 4,
              "variableName": "String vcScope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "\n    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {"
            },
            {
              "step": 5,
              "variableName": "vcScope",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {\n            throw new BadRequestException(\"No VerifiableCredential-Scope was provided in the request.\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 98,
      "fileName": "OID4VCIssuerEndpoint.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "supportedCredentialConfiguration",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "SupportedCredentialConfiguration",
              "code": "            throw new BadRequestException(getErrorResponse(ErrorType.INVALID_CREDENTIAL_REQUEST));\n        }\n        SupportedCredentialConfiguration supportedCredentialConfiguration = credentialsMap.get(vcId);\n        String format = supportedCredentialConfiguration.getFormat();\n\n        // check that the user is allowed to get such credential\n        if (getClientsOfScope(supportedCredentialConfiguration.getScope(), format).isEmpty()) {"
            },
            {
              "step": 1,
              "variableName": "getFormat",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "SupportedCredentialConfiguration",
              "code": "    @JsonIgnore\n    private CredentialBuildConfig credentialBuildConfig;\n\n    public String getFormat() {\n        return format;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "String",
              "code": "    private CredentialBuildConfig credentialBuildConfig;\n\n    public String getFormat() {\n        return format;\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "supportedCredentialConfiguration.getFormat()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "            throw new BadRequestException(getErrorResponse(ErrorType.INVALID_CREDENTIAL_REQUEST));\n        }\n        SupportedCredentialConfiguration supportedCredentialConfiguration = credentialsMap.get(vcId);\n        String format = supportedCredentialConfiguration.getFormat();\n\n        // check that the user is allowed to get such credential\n        if (getClientsOfScope(supportedCredentialConfiguration.getScope(), format).isEmpty()) {"
            },
            {
              "step": 4,
              "variableName": "format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "        String format = supportedCredentialConfiguration.getFormat();\n\n        // check that the user is allowed to get such credential\n        if (getClientsOfScope(supportedCredentialConfiguration.getScope(), format).isEmpty()) {\n            LOGGER.debugf(\"No OID4VP-Client supporting type %s registered.\", supportedCredentialConfiguration.getScope());\n            throw new BadRequestException(getErrorResponse(ErrorType.UNSUPPORTED_CREDENTIAL_TYPE));\n        }"
            },
            {
              "step": 5,
              "variableName": "String format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "\n    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {"
            },
            {
              "step": 6,
              "variableName": "format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {\n            throw new BadRequestException(\"No VerifiableCredential-Scope was provided in the request.\");"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialConfig",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "SupportedCredentialConfiguration",
              "code": "     */\n    private Object getCredential(AuthenticationManager.AuthResult authResult, SupportedCredentialConfiguration credentialConfig, CredentialRequest credentialRequestVO) {\n\n        List<OID4VCClient> clients = getClientsOfScope(credentialConfig.getScope(), credentialConfig.getFormat());\n\n        List<OID4VCMapper> protocolMappers = getProtocolMappers(clients)\n                .stream()"
            },
            {
              "step": 1,
              "variableName": "getFormat",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "SupportedCredentialConfiguration",
              "code": "    @JsonIgnore\n    private CredentialBuildConfig credentialBuildConfig;\n\n    public String getFormat() {\n        return format;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/model/SupportedCredentialConfiguration.java",
              "type": "String",
              "code": "    private CredentialBuildConfig credentialBuildConfig;\n\n    public String getFormat() {\n        return format;\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "credentialConfig.getFormat()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "     */\n    private Object getCredential(AuthenticationManager.AuthResult authResult, SupportedCredentialConfiguration credentialConfig, CredentialRequest credentialRequestVO) {\n\n        List<OID4VCClient> clients = getClientsOfScope(credentialConfig.getScope(), credentialConfig.getFormat());\n\n        List<OID4VCMapper> protocolMappers = getProtocolMappers(clients)\n                .stream()"
            },
            {
              "step": 4,
              "variableName": "String format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "String",
              "code": "\n    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {"
            },
            {
              "step": 5,
              "variableName": "format",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oid4vc/issuance/OID4VCIssuerEndpoint.java",
              "type": "",
              "code": "    // Return all {@link  OID4VCClient}s that support the given scope and format\n    // Scope might be different from vct. In the case of sd-jwt for example\n    private List<OID4VCClient> getClientsOfScope(String vcScope, String format) {\n        LOGGER.debugf(\"Retrieve all clients of scope %s, supporting format %s\", vcScope, format);\n\n        if (Optional.ofNullable(vcScope).filter(scope -> !scope.isEmpty()).isEmpty()) {\n            throw new BadRequestException(\"No VerifiableCredential-Scope was provided in the request.\");"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 99,
      "fileName": "DefaultKeycloakSessionFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "PasswordPolicy.PASSWORD_AGE",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/policy/AgePasswordPolicyProviderFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return PasswordPolicy.PASSWORD_AGE;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "            Map<String, ProviderFactory> registered = copy.get(entry.getKey());\n            for (ProviderFactory factory : entry.getValue()) {\n                undeployed.add(factory);\n                logger.debugv(\"undeploying {0} of id {1}\", factory.getClass().getName(), factory.getId());\n                if (registered != null) {\n                    registered.remove(factory.getId());\n                }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.CLIENT_CREDENTIALS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ClientCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.CLIENT_CREDENTIALS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "            Map<String, ProviderFactory> registered = copy.get(entry.getKey());\n            for (ProviderFactory factory : entry.getValue()) {\n                undeployed.add(factory);\n                logger.debugv(\"undeploying {0} of id {1}\", factory.getClass().getName(), factory.getId());\n                if (registered != null) {\n                    registered.remove(factory.getId());\n                }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.PASSWORD",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ResourceOwnerPasswordCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.PASSWORD;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "            Map<String, ProviderFactory> registered = copy.get(entry.getKey());\n            for (ProviderFactory factory : entry.getValue()) {\n                undeployed.add(factory);\n                logger.debugv(\"undeploying {0} of id {1}\", factory.getClass().getName(), factory.getId());\n                if (registered != null) {\n                    registered.remove(factory.getId());\n                }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 100,
      "fileName": "DefaultKeycloakSessionFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "PasswordPolicy.PASSWORD_AGE",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/policy/AgePasswordPolicyProviderFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return PasswordPolicy.PASSWORD_AGE;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factories.values().iterator().next().getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "String",
              "code": "                throw new RuntimeException(\"Failed to find provider \" + defaultProvider + \" for \" + spi.getName());\n            }\n        } else if (factories.size() == 1) {\n            defaultProvider = factories.values().iterator().next().getId();\n        } else {\n            Optional<ProviderFactory> highestPriority = factories.values().stream().filter(p -> p.order() > 0).max(Comparator.comparing(ProviderFactory::order));\n            if (highestPriority.isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "defaultProvider",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "        }\n\n        if (defaultProvider != null) {\n            logger.debugv(\"Set default provider for {0} to {1}\", spi.getName(), defaultProvider);\n            return defaultProvider;\n        } else {\n            logger.debugv(\"No default provider for {0}\", spi.getName());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "PasswordPolicy.PASSWORD_AGE",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/policy/AgePasswordPolicyProviderFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return PasswordPolicy.PASSWORD_AGE;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "highestPriority.get().getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "String",
              "code": "        } else {\n            Optional<ProviderFactory> highestPriority = factories.values().stream().filter(p -> p.order() > 0).max(Comparator.comparing(ProviderFactory::order));\n            if (highestPriority.isPresent()) {\n                defaultProvider = highestPriority.get().getId();\n            } else if (factories.containsKey(\"default\")) {\n                defaultProvider = \"default\";\n            }"
            },
            {
              "step": 2,
              "variableName": "defaultProvider",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "        }\n\n        if (defaultProvider != null) {\n            logger.debugv(\"Set default provider for {0} to {1}\", spi.getName(), defaultProvider);\n            return defaultProvider;\n        } else {\n            logger.debugv(\"No default provider for {0}\", spi.getName());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.CLIENT_CREDENTIALS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ClientCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.CLIENT_CREDENTIALS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factories.values().iterator().next().getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "String",
              "code": "                throw new RuntimeException(\"Failed to find provider \" + defaultProvider + \" for \" + spi.getName());\n            }\n        } else if (factories.size() == 1) {\n            defaultProvider = factories.values().iterator().next().getId();\n        } else {\n            Optional<ProviderFactory> highestPriority = factories.values().stream().filter(p -> p.order() > 0).max(Comparator.comparing(ProviderFactory::order));\n            if (highestPriority.isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "defaultProvider",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "        }\n\n        if (defaultProvider != null) {\n            logger.debugv(\"Set default provider for {0} to {1}\", spi.getName(), defaultProvider);\n            return defaultProvider;\n        } else {\n            logger.debugv(\"No default provider for {0}\", spi.getName());"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.PASSWORD",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ResourceOwnerPasswordCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.PASSWORD;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factories.values().iterator().next().getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "String",
              "code": "                throw new RuntimeException(\"Failed to find provider \" + defaultProvider + \" for \" + spi.getName());\n            }\n        } else if (factories.size() == 1) {\n            defaultProvider = factories.values().iterator().next().getId();\n        } else {\n            Optional<ProviderFactory> highestPriority = factories.values().stream().filter(p -> p.order() > 0).max(Comparator.comparing(ProviderFactory::order));\n            if (highestPriority.isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "defaultProvider",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "        }\n\n        if (defaultProvider != null) {\n            logger.debugv(\"Set default provider for {0} to {1}\", spi.getName(), defaultProvider);\n            return defaultProvider;\n        } else {\n            logger.debugv(\"No default provider for {0}\", spi.getName());"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 101,
      "fileName": "DefaultKeycloakSessionFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "PasswordPolicy.PASSWORD_AGE",
              "uri": "keycloak-26.1.2/server-spi-private/src/main/java/org/keycloak/policy/AgePasswordPolicyProviderFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return PasswordPolicy.PASSWORD_AGE;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "                        }\n                        factories.put(factory.getId(), factory);\n                    } else {\n                        logger.debugv(\"SPI {0} provider {1} disabled\", spi.getName(), factory.getId());\n                    }\n                }\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.CLIENT_CREDENTIALS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ClientCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.CLIENT_CREDENTIALS;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "                        }\n                        factories.put(factory.getId(), factory);\n                    } else {\n                        logger.debugv(\"SPI {0} provider {1} disabled\", spi.getName(), factory.getId());\n                    }\n                }\n            }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.PASSWORD",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/grants/ResourceOwnerPasswordCredentialsGrantTypeFactory.java",
              "type": "String",
              "code": "\n    @Override\n    public String getId() {\n        return OAuth2Constants.PASSWORD;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "factory.getId()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/DefaultKeycloakSessionFactory.java",
              "type": "",
              "code": "                        }\n                        factories.put(factory.getId(), factory);\n                    } else {\n                        logger.debugv(\"SPI {0} provider {1} disabled\", spi.getName(), factory.getId());\n                    }\n                }\n            }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 102,
      "fileName": "DefaultClientPolicyManager.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_REQUEST",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/context/ResourceOwnerPasswordCredentialsContext.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public ClientPolicyEvent getEvent() {\n        return ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_REQUEST;\n    }\n\n    public MultivaluedMap<String, String> getParams() {"
            },
            {
              "step": 1,
              "variableName": "context.getEvent()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/DefaultClientPolicyManager.java",
              "type": "",
              "code": "        }\n\n        RealmModel realm = session.getContext().getRealm();\n        logger.tracev(\"POLICY OPERATION :: context realm = {0}, event = {1}\", realm.getName(), context.getEvent());\n\n        doPolicyOperation(\n                (ClientPolicyConditionProvider condition) -> condition.applyPolicy(context),"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_RESPONSE",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/context/ResourceOwnerPasswordCredentialsResponseContext.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public ClientPolicyEvent getEvent() {\n        return ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_RESPONSE;\n    }\n\n    public MultivaluedMap<String, String> getParams() {"
            },
            {
              "step": 1,
              "variableName": "context.getEvent()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/DefaultClientPolicyManager.java",
              "type": "",
              "code": "        }\n\n        RealmModel realm = session.getContext().getRealm();\n        logger.tracev(\"POLICY OPERATION :: context realm = {0}, event = {1}\", realm.getName(), context.getEvent());\n\n        doPolicyOperation(\n                (ClientPolicyConditionProvider condition) -> condition.applyPolicy(context),"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 103,
      "fileName": "SecureRequestObjectExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "OAuth2Constants.CLIENT_SECRET",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
              "type": "String",
              "code": "        // Those are not OAuth/OIDC parameters, but they should never be added to the additionalRequestParameters\n        KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);\n        KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION);\n        KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_SECRET);\n    }\n\n    protected AuthzEndpointRequestParser(KeycloakSession keycloakSession) {"
            },
            {
              "step": 1,
              "variableName": "KNOWN_REQ_PARAMS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
              "type": "HashSet [<element>] : String",
              "code": "        // Those are not OAuth/OIDC parameters, but they should never be added to the additionalRequestParameters\n        KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION_TYPE);\n        KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_ASSERTION);\n        KNOWN_REQ_PARAMS.add(OAuth2Constants.CLIENT_SECRET);\n    }\n\n    protected AuthzEndpointRequestParser(KeycloakSession keycloakSession) {"
            },
            {
              "step": 2,
              "variableName": "KNOWN_REQ_PARAMS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/protocol/oidc/endpoints/request/AuthzEndpointRequestParser.java",
              "type": "HashSet [<element>] : String",
              "code": "    public static final String AUTHZ_REQUEST_OBJECT_ENCRYPTED = \"EncryptedRequestObject\";\n\n    /** Set of known protocol GET params not to be stored into additionalReqParams} */\n    public static final Set<String> KNOWN_REQ_PARAMS = new HashSet<>();\n    static {\n        KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.CLIENT_ID_PARAM);\n        KNOWN_REQ_PARAMS.add(OIDCLoginProtocol.RESPONSE_TYPE_PARAM);"
            },
            {
              "step": 3,
              "variableName": "AuthzEndpointRequestParser.KNOWN_REQ_PARAMS",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureRequestObjectExecutor.java",
              "type": "HashSet [<element>] : String",
              "code": "\n        // confirm whether all parameters in query string are included in the request object, and have the same values\n        // argument \"request\" are parameters overridden by parameters in request object\n        Optional<String> incorrectParam = AuthzEndpointRequestParser.KNOWN_REQ_PARAMS.stream()\n                .filter(param -> params.containsKey(param))\n                .filter(param -> !isSameParameterIncluded(param, params.getFirst(param), requestObject))\n                .findFirst();"
            },
            {
              "step": 4,
              "variableName": "AuthzEndpointRequestParser.KNOWN_REQ_PARAMS.stream()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureRequestObjectExecutor.java",
              "type": "Stream [<element>] : String",
              "code": "\n        // confirm whether all parameters in query string are included in the request object, and have the same values\n        // argument \"request\" are parameters overridden by parameters in request object\n        Optional<String> incorrectParam = AuthzEndpointRequestParser.KNOWN_REQ_PARAMS.stream()\n                .filter(param -> params.containsKey(param))\n                .filter(param -> !isSameParameterIncluded(param, params.getFirst(param), requestObject))\n                .findFirst();"
            },
            {
              "step": 5,
              "variableName": "AuthzEndpointRequ",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureRequestObjectExecutor.java",
              "type": "ClosingStream [<element>] : String",
              "code": "\n        // confirm whether all parameters in query string are included in the request object, and have the same values\n        // argument \"request\" are parameters overridden by parameters in request object\n        Optional<String> incorrectParam = AuthzEndpointRequestParser.KNOWN_REQ_PARAMS.stream()\n                .filter(param -> params.containsKey(param))\n                .filter(param -> !isSameParameterIncluded(param, params.getFirst(param), requestObject))\n                .findFirst();"
            },
            {
              "step": 6,
              "variableName": "AuthzEndpointRequestParser.KNOWN_REQ_PARAMS.stream()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureRequestObjectExecutor.java",
              "type": "ClosingStream [<element>] : String",
              "code": "\n        // confirm whether all parameters in query string are included in the request object, and have the same values\n        // argument \"request\" are parameters overridden by parameters in request object\n        Optional<String> incorrectParam = AuthzEndpointRequestParser.KNOWN_REQ_PARAMS.stream()\n                .filter(param -> params.containsKey(param))\n                .filter(param -> !isSameParameterIncluded(param, params.getFirst(param), requestObject))\n                .findFirst();"
            },
            {
              "step": 7,
              "variableName": "findFirst(...) : Optional [<element>] : String",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureRequestObjectExecutor.java",
              "type": "Optional [<element>] : String",
              "code": "\n        // confirm whether all parameters in query string are included in the request object, and have the same values\n        // argument \"request\" are parameters overridden by parameters in request object\n        Optional<String> incorrectParam = AuthzEndpointRequestParser.KNOWN_REQ_PARAMS.stream()\n                .filter(param -> params.containsKey(param))\n                .filter(param -> !isSameParameterIncluded(param, params.getFirst(param), requestObject))\n                .findFirst();"
            },
            {
              "step": 8,
              "variableName": "incorrectParam",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureRequestObjectExecutor.java",
              "type": "Optional [<element>] : String",
              "code": "                .filter(param -> !isSameParameterIncluded(param, params.getFirst(param), requestObject))\n                .findFirst();\n        if (incorrectParam.isPresent()) {\n            logger.warnf(\"Parameter '%s' does not have same value in 'request' object and in request parameters\", incorrectParam.get());\n            throwClientPolicyException(OAuthErrorException.INVALID_REQUEST, \"Invalid parameter. Parameters in 'request' object not matching with request parameters\",\n                    context);\n        }"
            },
            {
              "step": 9,
              "variableName": "incorrectParam.get()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SecureRequestObjectExecutor.java",
              "type": "",
              "code": "                .filter(param -> !isSameParameterIncluded(param, params.getFirst(param), requestObject))\n                .findFirst();\n        if (incorrectParam.isPresent()) {\n            logger.warnf(\"Parameter '%s' does not have same value in 'request' object and in request parameters\", incorrectParam.get());\n            throwClientPolicyException(OAuthErrorException.INVALID_REQUEST, \"Invalid parameter. Parameters in 'request' object not matching with request parameters\",\n                    context);\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 104,
      "fileName": "SuppressRefreshTokenRotationExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_REQUEST",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/context/ResourceOwnerPasswordCredentialsContext.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public ClientPolicyEvent getEvent() {\n        return ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_REQUEST;\n    }\n\n    public MultivaluedMap<String, String> getParams() {"
            },
            {
              "step": 1,
              "variableName": "context.getEvent()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SuppressRefreshTokenRotationExecutor.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {\n        ClientPolicyEvent event = context.getEvent();\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        switch (event) {\n            case TOKEN_REFRESH_RESPONSE:"
            },
            {
              "step": 2,
              "variableName": "event",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SuppressRefreshTokenRotationExecutor.java",
              "type": "",
              "code": "    @Override\n    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {\n        ClientPolicyEvent event = context.getEvent();\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        switch (event) {\n            case TOKEN_REFRESH_RESPONSE:\n                TokenRefreshResponseContext tokenRefreshResponseContext = (TokenRefreshResponseContext)context;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_RESPONSE",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/context/ResourceOwnerPasswordCredentialsResponseContext.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public ClientPolicyEvent getEvent() {\n        return ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_RESPONSE;\n    }\n\n    public MultivaluedMap<String, String> getParams() {"
            },
            {
              "step": 1,
              "variableName": "context.getEvent()",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SuppressRefreshTokenRotationExecutor.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {\n        ClientPolicyEvent event = context.getEvent();\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        switch (event) {\n            case TOKEN_REFRESH_RESPONSE:"
            },
            {
              "step": 2,
              "variableName": "event",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/executor/SuppressRefreshTokenRotationExecutor.java",
              "type": "",
              "code": "    @Override\n    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {\n        ClientPolicyEvent event = context.getEvent();\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        switch (event) {\n            case TOKEN_REFRESH_RESPONSE:\n                TokenRefreshResponseContext tokenRefreshResponseContext = (TokenRefreshResponseContext)context;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 105,
      "fileName": "SessionCodeChecks.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "RESET_CREDENTIALS_PATH",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "     * @return\n     */\n    protected Response resetCredentials(String authSessionId, String code, String execution, String clientId, String tabId, String clientData) {\n        SessionCodeChecks checks = checksForCode(authSessionId, code, execution, clientId, tabId, clientData, RESET_CREDENTIALS_PATH);\n        if (!checks.verifyActiveAndValidAction(AuthenticationSessionModel.Action.AUTHENTICATE.name(), ClientSessionCode.ActionType.USER)) {\n            return checks.getResponse();\n        }"
            },
            {
              "step": 1,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "    }\n\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;"
            },
            {
              "step": 2,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 3,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;\n        this.request = request;"
            },
            {
              "step": 4,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 6,
              "variableName": "SessionCodeChecks",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    private final String authSessionId;\n\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;"
            },
            {
              "step": 7,
              "variableName": "new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 8,
              "variableName": "res",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "initialVerify",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    }\n\n\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {"
            },
            {
              "step": 10,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {\n            return false;\n        }"
            },
            {
              "step": 11,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        session.getContext().setAuthenticationSession(authSession);\n\n        // Check cached response from previous action request\n        response = BrowserHistoryHelper.getInstance().loadSavedResponse(session, authSession);\n        if (response != null) {\n            return false;\n        }"
            },
            {
              "step": 12,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {"
            },
            {
              "step": 13,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "",
              "code": "\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "RESET_CREDENTIALS_PATH",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "     * @return\n     */\n    protected Response resetCredentials(String authSessionId, String code, String execution, String clientId, String tabId, String clientData) {\n        SessionCodeChecks checks = checksForCode(authSessionId, code, execution, clientId, tabId, clientData, RESET_CREDENTIALS_PATH);\n        if (!checks.verifyActiveAndValidAction(AuthenticationSessionModel.Action.AUTHENTICATE.name(), ClientSessionCode.ActionType.USER)) {\n            return checks.getResponse();\n        }"
            },
            {
              "step": 1,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "    }\n\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;"
            },
            {
              "step": 2,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 3,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;\n        this.request = request;"
            },
            {
              "step": 4,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 6,
              "variableName": "SessionCodeChecks",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    private final String authSessionId;\n\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;"
            },
            {
              "step": 7,
              "variableName": "new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 8,
              "variableName": "res",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "initialVerify",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    }\n\n\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {"
            },
            {
              "step": 10,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {\n            return false;\n        }"
            },
            {
              "step": 11,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        session.getContext().setAuthenticationSession(authSession);\n\n        // Check cached response from previous action request\n        response = BrowserHistoryHelper.getInstance().loadSavedResponse(session, authSession);\n        if (response != null) {\n            return false;\n        }"
            },
            {
              "step": 12,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "            String lastFlow = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already"
            },
            {
              "step": 13,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "            String lastFlow = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already"
            },
            {
              "step": 14,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "",
              "code": "\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 106,
      "fileName": "AuthenticationFlowURLHelper.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "RESET_CREDENTIALS_PATH",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "     * @return\n     */\n    protected Response resetCredentials(String authSessionId, String code, String execution, String clientId, String tabId, String clientData) {\n        SessionCodeChecks checks = checksForCode(authSessionId, code, execution, clientId, tabId, clientData, RESET_CREDENTIALS_PATH);\n        if (!checks.verifyActiveAndValidAction(AuthenticationSessionModel.Action.AUTHENTICATE.name(), ClientSessionCode.ActionType.USER)) {\n            return checks.getResponse();\n        }"
            },
            {
              "step": 1,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "    }\n\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;"
            },
            {
              "step": 2,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 3,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;\n        this.request = request;"
            },
            {
              "step": 4,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 6,
              "variableName": "SessionCodeChecks",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    private final String authSessionId;\n\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;"
            },
            {
              "step": 7,
              "variableName": "new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 8,
              "variableName": "res",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "initialVerify",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    }\n\n\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {"
            },
            {
              "step": 10,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {\n            return false;\n        }"
            },
            {
              "step": 11,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        session.getContext().setAuthenticationSession(authSession);\n\n        // Check cached response from previous action request\n        response = BrowserHistoryHelper.getInstance().loadSavedResponse(session, authSession);\n        if (response != null) {\n            return false;\n        }"
            },
            {
              "step": 12,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 13,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 14,
              "variableName": "String value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 15,
              "variableName": "value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 16,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 17,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 18,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 19,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 20,
              "variableName": "setAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 21,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 22,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                return true;\n            } else {\n                response = showPageExpired(authSession);\n                return false;\n            }\n        } else {"
            },
            {
              "step": 23,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }"
            },
            {
              "step": 24,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }\n\n    protected KeycloakSession getSession() {"
            },
            {
              "step": 25,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);"
            },
            {
              "step": 26,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 27,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n"
            },
            {
              "step": 28,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 29,
              "variableName": "getAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n"
            },
            {
              "step": 30,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "SessionEntityUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 32,
              "variableName": "getEntity",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/changes/remote/updater/authsession/RootAuthenticationSessionUpdater.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "    private record AuthenticationSessionUpdater(RootAuthenticationSessionUpdater updater, String tabId, AuthenticationSessionEntity authenticationSession) implements SessionEntityUpdater<AuthenticationSessionEntity> {\n\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n"
            },
            {
              "step": 33,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/changes/remote/updater/authsession/RootAuthenticationSessionUpdater.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 34,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/changes/remote/updater/authsession/RootAuthenticationSessionUpdater.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 35,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "getAuthNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "    }\n\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n"
            },
            {
              "step": 37,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 38,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 39,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "updater.getEntity().getAuthNotes().get(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "(updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "... : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 43,
              "variableName": "latestFlowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 44,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n"
            },
            {
              "step": 45,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {\n            uriBuilder.queryParam(Constants.EXECUTION, executionId);"
            },
            {
              "step": 46,
              "variableName": "path(...) : UriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {"
            },
            {
              "step": 47,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 48,
              "variableName": "uriBuilder.build(realm.getName())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 49,
              "variableName": "getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 50,
              "variableName": "getLastExecutionUrl(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 51,
              "variableName": "lastStepUrl",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "",
              "code": "    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n\n        return session.getProvider(LoginFormsProvider.class).setAuthenticationSession(authSession)\n                .setActionUri(lastStepUrl)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "RESET_CREDENTIALS_PATH",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "     * @return\n     */\n    protected Response resetCredentials(String authSessionId, String code, String execution, String clientId, String tabId, String clientData) {\n        SessionCodeChecks checks = checksForCode(authSessionId, code, execution, clientId, tabId, clientData, RESET_CREDENTIALS_PATH);\n        if (!checks.verifyActiveAndValidAction(AuthenticationSessionModel.Action.AUTHENTICATE.name(), ClientSessionCode.ActionType.USER)) {\n            return checks.getResponse();\n        }"
            },
            {
              "step": 1,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "    }\n\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;"
            },
            {
              "step": 2,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 3,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;\n        this.request = request;"
            },
            {
              "step": 4,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 6,
              "variableName": "SessionCodeChecks",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    private final String authSessionId;\n\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;"
            },
            {
              "step": 7,
              "variableName": "new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 8,
              "variableName": "res",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "initialVerify",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    }\n\n\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {"
            },
            {
              "step": 10,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {\n            return false;\n        }"
            },
            {
              "step": 11,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        session.getContext().setAuthenticationSession(authSession);\n\n        // Check cached response from previous action request\n        response = BrowserHistoryHelper.getInstance().loadSavedResponse(session, authSession);\n        if (response != null) {\n            return false;\n        }"
            },
            {
              "step": 12,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "            String lastFlow = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already"
            },
            {
              "step": 13,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "            String lastFlow = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already"
            },
            {
              "step": 14,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 15,
              "variableName": "String value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 16,
              "variableName": "value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 17,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 18,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 19,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 20,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 21,
              "variableName": "setAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 22,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 23,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                return true;\n            } else {\n                response = showPageExpired(authSession);\n                return false;\n            }\n        } else {"
            },
            {
              "step": 24,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }"
            },
            {
              "step": 25,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }\n\n    protected KeycloakSession getSession() {"
            },
            {
              "step": 26,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);"
            },
            {
              "step": 27,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 28,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n"
            },
            {
              "step": 29,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 30,
              "variableName": "getAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n"
            },
            {
              "step": 31,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 32,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "SessionEntityUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 33,
              "variableName": "getEntity",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/RootAuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "    private record AuthenticationSessionUpdater(RootAuthenticationSessionAdapter adapter, String tabId, AuthenticationSessionEntity authenticationSession) implements SessionEntityUpdater<AuthenticationSessionEntity> {\n\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n"
            },
            {
              "step": 34,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/RootAuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 35,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/RootAuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 36,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "getAuthNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "    }\n\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n"
            },
            {
              "step": 38,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 39,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 40,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "updater.getEntity().getAuthNotes().get(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "(updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "... : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 44,
              "variableName": "latestFlowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 45,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n"
            },
            {
              "step": 46,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {\n            uriBuilder.queryParam(Constants.EXECUTION, executionId);"
            },
            {
              "step": 47,
              "variableName": "path(...) : UriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {"
            },
            {
              "step": 48,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 49,
              "variableName": "uriBuilder.build(realm.getName())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 50,
              "variableName": "getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 51,
              "variableName": "getLastExecutionUrl(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 52,
              "variableName": "lastStepUrl",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "",
              "code": "    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n\n        return session.getProvider(LoginFormsProvider.class).setAuthenticationSession(authSession)\n                .setActionUri(lastStepUrl)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "RESET_CREDENTIALS_PATH",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "     * @return\n     */\n    protected Response resetCredentials(String authSessionId, String code, String execution, String clientId, String tabId, String clientData) {\n        SessionCodeChecks checks = checksForCode(authSessionId, code, execution, clientId, tabId, clientData, RESET_CREDENTIALS_PATH);\n        if (!checks.verifyActiveAndValidAction(AuthenticationSessionModel.Action.AUTHENTICATE.name(), ClientSessionCode.ActionType.USER)) {\n            return checks.getResponse();\n        }"
            },
            {
              "step": 1,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "    }\n\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;"
            },
            {
              "step": 2,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 3,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;\n        this.request = request;"
            },
            {
              "step": 4,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 6,
              "variableName": "SessionCodeChecks",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    private final String authSessionId;\n\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;"
            },
            {
              "step": 7,
              "variableName": "new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 8,
              "variableName": "res",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "initialVerify",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    }\n\n\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {"
            },
            {
              "step": 10,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {\n            return false;\n        }"
            },
            {
              "step": 11,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        session.getContext().setAuthenticationSession(authSession);\n\n        // Check cached response from previous action request\n        response = BrowserHistoryHelper.getInstance().loadSavedResponse(session, authSession);\n        if (response != null) {\n            return false;\n        }"
            },
            {
              "step": 12,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {"
            },
            {
              "step": 13,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n            // Check if we transitted between flows (eg. clicking \"register\" on login screen)\n            if (execution == null && !flowPath.equals(lastFlow)) {\n                logger.debugf(\"Transition between flows! Current flow: %s, Previous flow: %s\", flowPath, lastFlow);\n\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {"
            },
            {
              "step": 14,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 15,
              "variableName": "String value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 16,
              "variableName": "value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 17,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 18,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 19,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 20,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 21,
              "variableName": "setAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 22,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 23,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [authSession, updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 24,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [authSession, updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                return true;\n            } else {\n                response = showPageExpired(authSession);\n                return false;\n            }\n        } else {"
            },
            {
              "step": 25,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                return true;\n            } else {\n                response = showPageExpired(authSession);\n                return false;\n            }\n        } else {"
            },
            {
              "step": 26,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }"
            },
            {
              "step": 27,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }\n\n    protected KeycloakSession getSession() {"
            },
            {
              "step": 28,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);"
            },
            {
              "step": 29,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 30,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n"
            },
            {
              "step": 31,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 32,
              "variableName": "getAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "SessionEntityUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "getEntity",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/changes/remote/updater/authsession/RootAuthenticationSessionUpdater.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "    private record AuthenticationSessionUpdater(RootAuthenticationSessionUpdater updater, String tabId, AuthenticationSessionEntity authenticationSession) implements SessionEntityUpdater<AuthenticationSessionEntity> {\n\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n"
            },
            {
              "step": 36,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/changes/remote/updater/authsession/RootAuthenticationSessionUpdater.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 37,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/changes/remote/updater/authsession/RootAuthenticationSessionUpdater.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 38,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "getAuthNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "    }\n\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n"
            },
            {
              "step": 40,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 41,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 42,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "updater.getEntity().getAuthNotes().get(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "(updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "... : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 45,
              "variableName": "authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 46,
              "variableName": "latestFlowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 47,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n"
            },
            {
              "step": 48,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {\n            uriBuilder.queryParam(Constants.EXECUTION, executionId);"
            },
            {
              "step": 49,
              "variableName": "path(...) : UriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {"
            },
            {
              "step": 50,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 51,
              "variableName": "uriBuilder.build(realm.getName())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 52,
              "variableName": "getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 53,
              "variableName": "getLastExecutionUrl(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 54,
              "variableName": "lastStepUrl",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "",
              "code": "    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n\n        return session.getProvider(LoginFormsProvider.class).setAuthenticationSession(authSession)\n                .setActionUri(lastStepUrl)"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "RESET_CREDENTIALS_PATH",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "     * @return\n     */\n    protected Response resetCredentials(String authSessionId, String code, String execution, String clientId, String tabId, String clientData) {\n        SessionCodeChecks checks = checksForCode(authSessionId, code, execution, clientId, tabId, clientData, RESET_CREDENTIALS_PATH);\n        if (!checks.verifyActiveAndValidAction(AuthenticationSessionModel.Action.AUTHENTICATE.name(), ClientSessionCode.ActionType.USER)) {\n            return checks.getResponse();\n        }"
            },
            {
              "step": 1,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "    }\n\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;"
            },
            {
              "step": 2,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 3,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;\n        this.request = request;"
            },
            {
              "step": 4,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 5,
              "variableName": "this",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        this.execution = execution;\n        this.clientId = clientId;\n        this.tabId = tabId;\n        this.flowPath = flowPath;\n        this.authSessionId = authSessionId;\n        this.clientDataString = clientData;\n    }"
            },
            {
              "step": 6,
              "variableName": "SessionCodeChecks",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    private final String authSessionId;\n\n\n    public SessionCodeChecks(RealmModel realm, UriInfo uriInfo, HttpRequest request, ClientConnection clientConnection, KeycloakSession session, EventBuilder event,\n                             String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        this.realm = realm;\n        this.uriInfo = uriInfo;"
            },
            {
              "step": 7,
              "variableName": "new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }"
            },
            {
              "step": 8,
              "variableName": "res",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/LoginActionsService.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    private SessionCodeChecks checksForCode(String authSessionId, String code, String execution, String clientId, String tabId, String clientData, String flowPath) {\n        SessionCodeChecks res = new SessionCodeChecks(realm, session.getContext().getUri(), request, clientConnection, session, event, authSessionId, code, execution, clientId, tabId, clientData, flowPath);\n        res.initialVerify();\n        return res;\n    }\n"
            },
            {
              "step": 9,
              "variableName": "initialVerify",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "    }\n\n\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {"
            },
            {
              "step": 10,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n    public boolean initialVerify() {\n        // Basic realm checks and authenticationSession retrieve\n        authSession = initialVerifyAuthSession();\n        if (authSession == null) {\n            return false;\n        }"
            },
            {
              "step": 11,
              "variableName": "response",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "        session.getContext().setAuthenticationSession(authSession);\n\n        // Check cached response from previous action request\n        response = BrowserHistoryHelper.getInstance().loadSavedResponse(session, authSession);\n        if (response != null) {\n            return false;\n        }"
            },
            {
              "step": 12,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [flowPath] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 13,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 14,
              "variableName": "String value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 15,
              "variableName": "value",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 16,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 17,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 18,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 19,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "            if (value == null) {\n                updater.getEntity().getAuthNotes().remove(name);\n            } else {\n                updater.getEntity().getAuthNotes().put(name, value);\n            }\n        }\n        update();"
            },
            {
              "step": 20,
              "variableName": "setAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public void setAuthNote(String name, String value) {\n        if (updater.getEntity().getAuthNotes() == null) {\n            updater.getEntity().setAuthNotes(new ConcurrentHashMap<>());\n        }"
            },
            {
              "step": 21,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 22,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [authSession, updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                // Don't allow moving to different flow if I am on requiredActions already\n                if (AuthenticationSessionModel.Action.AUTHENTICATE.name().equals(authSession.getAction())) {\n                    authSession.setAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH, flowPath);\n                    authSession.removeAuthNote(AuthenticationProcessor.CURRENT_AUTHENTICATION_EXECUTION);\n                    lastExecFromSession = null;\n                }"
            },
            {
              "step": 23,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "SessionCodeChecks [authSession, updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                return true;\n            } else {\n                response = showPageExpired(authSession);\n                return false;\n            }\n        } else {"
            },
            {
              "step": 24,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n                return true;\n            } else {\n                response = showPageExpired(authSession);\n                return false;\n            }\n        } else {"
            },
            {
              "step": 25,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }"
            },
            {
              "step": 26,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/resources/SessionCodeChecks.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    private Response showPageExpired(AuthenticationSessionModel authSession) {\n        return new AuthenticationFlowURLHelper(session, realm, uriInfo)\n                .showPageExpired(authSession);\n    }\n\n    protected KeycloakSession getSession() {"
            },
            {
              "step": 27,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);"
            },
            {
              "step": 28,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 29,
              "variableName": "AuthenticationSessionModel authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n"
            },
            {
              "step": 30,
              "variableName": "authSession",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "AuthenticationSessionModel [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 31,
              "variableName": "getAuthNote",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "    }\n\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n"
            },
            {
              "step": 32,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionAdapter [updater, authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 33,
              "variableName": "updater",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "SessionEntityUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "getEntity",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/RootAuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "    private record AuthenticationSessionUpdater(RootAuthenticationSessionAdapter adapter, String tabId, AuthenticationSessionEntity authenticationSession) implements SessionEntityUpdater<AuthenticationSessionEntity> {\n\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n"
            },
            {
              "step": 35,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/RootAuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionUpdater [authenticationSession, authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 36,
              "variableName": "authenticationSession",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/RootAuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n        @Override\n        public AuthenticationSessionEntity getEntity() {\n            return authenticationSession;\n        }\n\n        @Override"
            },
            {
              "step": 37,
              "variableName": "updater.getEntity()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "getAuthNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "    }\n\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n"
            },
            {
              "step": 39,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "AuthenticationSessionEntity [authNotes, <map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 40,
              "variableName": "authNotes",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/entities/AuthenticationSessionEntity.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @ProtoField(value = 12, mapImplementation = ConcurrentHashMap.class)\n    public Map<String, String> getAuthNotes() {\n        return authNotes;\n    }\n\n    public void setAuthNotes(Map<String, String> authNotes) {"
            },
            {
              "step": 41,
              "variableName": "updater.getEntity().getAuthNotes()",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "Map [<map.value>] : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "updater.getEntity().getAuthNotes().get(name)",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "(updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null",
              "uri": "keycloak-26.1.2/model/infinispan/src/main/java/org/keycloak/models/sessions/infinispan/AuthenticationSessionAdapter.java",
              "type": "... : String",
              "code": "\n    @Override\n    public String getAuthNote(String name) {\n        return (updater.getEntity().getAuthNotes() != null && name != null) ? updater.getEntity().getAuthNotes().get(name) : null;\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(AuthenticationSessionModel authSession) {\n        String executionId = getExecutionId(authSession);\n        String latestFlowPath = authSession.getAuthNote(AuthenticationProcessor.CURRENT_FLOW_PATH);\n\n        if (latestFlowPath == null) {\n            latestFlowPath = authSession.getClientNote(AuthorizationEndpointBase.APP_INITIATED_FLOW);"
            },
            {
              "step": 45,
              "variableName": "latestFlowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 46,
              "variableName": "String flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "    }\n\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n"
            },
            {
              "step": 47,
              "variableName": "flowPath",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "String",
              "code": "\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {\n            uriBuilder.queryParam(Constants.EXECUTION, executionId);"
            },
            {
              "step": 48,
              "variableName": "path(...) : UriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "\n\n    public URI getLastExecutionUrl(String flowPath, String executionId, String clientId, String tabId, String clientData) {\n        UriBuilder uriBuilder = LoginActionsService.loginActionsBaseUrl(uriInfo)\n                .path(flowPath);\n\n        if (executionId != null) {"
            },
            {
              "step": 49,
              "variableName": "uriBuilder",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "UriBuilder",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 50,
              "variableName": "uriBuilder.build(realm.getName())",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        uriBuilder.queryParam(Constants.TAB_ID, tabId);\n        uriBuilder.queryParam(Constants.CLIENT_DATA, clientData);\n\n        return uriBuilder.build(realm.getName());\n    }\n\n"
            },
            {
              "step": 51,
              "variableName": "getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "        }\n\n        String clientData = AuthenticationProcessor.getClientData(session, authSession);\n        return getLastExecutionUrl(latestFlowPath, executionId, authSession.getClient().getClientId(), authSession.getTabId(), clientData);\n    }\n\n    private String getExecutionId(AuthenticationSessionModel authSession) {"
            },
            {
              "step": 52,
              "variableName": "getLastExecutionUrl(authSession)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "URI",
              "code": "\n\n    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n"
            },
            {
              "step": 53,
              "variableName": "lastStepUrl",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/util/AuthenticationFlowURLHelper.java",
              "type": "",
              "code": "    public Response showPageExpired(AuthenticationSessionModel authSession) {\n        URI lastStepUrl = getLastExecutionUrl(authSession);\n\n        logger.debugf(\"Redirecting to 'page expired' now. Will use last step URL: %s\", lastStepUrl);\n\n        return session.getProvider(LoginFormsProvider.class).setAuthenticationSession(authSession)\n                .setActionUri(lastStepUrl)"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 107,
      "fileName": "AbstractVaultProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            config.setAuthType(LDAPConstants.AUTH_TYPE_NONE);\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 19,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 21,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 23,
              "variableName": "LDAPContextManager.create(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 24,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation\n                ldapContext.reconnect(null);"
            },
            {
              "step": 25,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 26,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 27,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 28,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 29,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 30,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 31,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 32,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 35,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 37,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 38,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 39,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 40,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 41,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 42,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 43,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 44,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 45,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 46,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 47,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 48,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 49,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 50,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 51,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 52,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 53,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 54,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 55,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 56,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 57,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 58,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 59,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 60,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 61,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 62,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 63,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            return Collections.emptySet();\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 17,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 19,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "LDAPOperationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPOperationManager(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "LDAPIdentityStore",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 25,
              "variableName": "new LDAPIdentityStore(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 26,
              "variableName": "queryServerCapabilities",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    @Override\n    public Set<LDAPCapabilityRepresentation> queryServerCapabilities() {\n        Set<LDAPCapabilityRepresentation> result = new LinkedHashSet<>();\n        try {\n            List<String> attrs = new ArrayList<>();"
            },
            {
              "step": 27,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 28,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 29,
              "variableName": "search",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return parentDn.getLdapName();\n    }\n\n    public List<SearchResult> search(final LdapName baseDN, final Condition condition, Collection<String> returningAttributes, int searchScope) throws NamingException {\n        final List<SearchResult> result = new ArrayList<>();\n        final SearchControls cons = getSearchControls(returningAttributes, searchScope);\n        final String filter = condition.toFilter();"
            },
            {
              "step": 30,
              "variableName": "this <.method> : LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        final String filter = condition.toFilter();\n\n        try {\n            return execute(new LdapOperation<List<SearchResult>>() {\n                @Override\n                public List<SearchResult> execute(LdapContext context) throws NamingException {\n                    NamingEnumeration<SearchResult> search = context.search(baseDN, filter, cons);"
            },
            {
              "step": 31,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "execute(operation, null)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {"
            },
            {
              "step": 33,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 35,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 36,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 37,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 38,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 39,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 40,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 41,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 42,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 43,
              "variableName": "LDAPContextManager.create(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 44,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }\n"
            },
            {
              "step": 45,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 46,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 47,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 48,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 49,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 50,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 51,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 52,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 53,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 54,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 55,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 56,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 58,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 59,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 60,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 61,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 62,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 63,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 64,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 65,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 66,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 67,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 68,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 69,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 70,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 71,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 72,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 73,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 74,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 75,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 76,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 77,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 78,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 79,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 80,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 81,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 82,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 83,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 84,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "        String keystoreType = KeystoreUtil.getKeystoreType(model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_TYPE_KEY), keystorePath, \"JKS\");\n        KeyStore keyStore = KeyStore.getInstance(keystoreType);\n        String keystorePwd = model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_PASSWORD_KEY);\n        keystorePwd = vault.getStringSecret(keystorePwd).get().orElse(keystorePwd);\n        keyStore.load(inputStream, keystorePwd.toCharArray());\n        return keyStore;\n    }"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 14,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 15,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 16,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 17,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "    private <K extends KeyStore.Entry> K checkKeyEntry(KeyStore keyStore, String keyAlias, Class<K> clazz, KeyUse use) throws GeneralSecurityException {\n        checkUsage(use);\n        String keyPwd = model.get(JavaKeystoreKeyProviderFactory.KEY_PASSWORD_KEY);\n        keyPwd = vault.getStringSecret(keyPwd).get().orElse(keyPwd);\n        KeyStore.Entry keyEntry = keyStore.getEntry(keyAlias, new KeyStore.PasswordProtection(keyPwd.toCharArray()));\n        if (keyEntry == null) {\n            throw new UnrecoverableKeyException(String.format(\"Alias %s does not exists in the keystore.\", keyAlias));"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 14,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 15,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 16,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 17,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 108,
      "fileName": "AbstractVaultProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            config.setAuthType(LDAPConstants.AUTH_TYPE_NONE);\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 19,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 21,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 23,
              "variableName": "LDAPContextManager.create(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 24,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation\n                ldapContext.reconnect(null);"
            },
            {
              "step": 25,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 26,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 27,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 28,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 29,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 30,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 31,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 32,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 35,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 37,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 38,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 39,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 40,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 41,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 42,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 43,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 44,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 45,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 46,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 47,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 48,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 49,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 50,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 51,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 52,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 53,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 54,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 55,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 56,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 57,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 58,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 59,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {\n                logger.warnf(\"Validation failed for secret %s with resolved key %s\", vaultSecretId, resolvedKey);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }"
            },
            {
              "step": 60,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "     * @param resolvedKey the key after being resolved by the resolver.\n     * @return a boolean indicating whether the validation passed.\n     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;"
            },
            {
              "step": 61,
              "variableName": "key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;\n        }\n        return true;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            return Collections.emptySet();\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 17,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 19,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "LDAPOperationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPOperationManager(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "LDAPIdentityStore",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 25,
              "variableName": "new LDAPIdentityStore(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 26,
              "variableName": "queryServerCapabilities",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    @Override\n    public Set<LDAPCapabilityRepresentation> queryServerCapabilities() {\n        Set<LDAPCapabilityRepresentation> result = new LinkedHashSet<>();\n        try {\n            List<String> attrs = new ArrayList<>();"
            },
            {
              "step": 27,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 28,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 29,
              "variableName": "search",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return parentDn.getLdapName();\n    }\n\n    public List<SearchResult> search(final LdapName baseDN, final Condition condition, Collection<String> returningAttributes, int searchScope) throws NamingException {\n        final List<SearchResult> result = new ArrayList<>();\n        final SearchControls cons = getSearchControls(returningAttributes, searchScope);\n        final String filter = condition.toFilter();"
            },
            {
              "step": 30,
              "variableName": "this <.method> : LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        final String filter = condition.toFilter();\n\n        try {\n            return execute(new LdapOperation<List<SearchResult>>() {\n                @Override\n                public List<SearchResult> execute(LdapContext context) throws NamingException {\n                    NamingEnumeration<SearchResult> search = context.search(baseDN, filter, cons);"
            },
            {
              "step": 31,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "execute(operation, null)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {"
            },
            {
              "step": 33,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 35,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 36,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 37,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 38,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 39,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 40,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 41,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 42,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 43,
              "variableName": "LDAPContextManager.create(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 44,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }\n"
            },
            {
              "step": 45,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 46,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 47,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 48,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 49,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 50,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 51,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 52,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 53,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 54,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 55,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 56,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 58,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 59,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 60,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 61,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 62,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 63,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 64,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 65,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 66,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 67,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 68,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 69,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 70,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 71,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 72,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 73,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 74,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 75,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 76,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 77,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 78,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 79,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 80,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {\n                logger.warnf(\"Validation failed for secret %s with resolved key %s\", vaultSecretId, resolvedKey);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }"
            },
            {
              "step": 81,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (!super.validate(resolver, key, resolvedKey)) {\n            return false;\n        }"
            },
            {
              "step": 82,
              "variableName": "key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "String",
              "code": "\n    @Override\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (!super.validate(resolver, key, resolvedKey)) {\n            return false;\n        }\n        Path secretPath = vaultPath.resolve(resolvedKey);"
            },
            {
              "step": 83,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "     * @param resolvedKey the key after being resolved by the resolver.\n     * @return a boolean indicating whether the validation passed.\n     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;"
            },
            {
              "step": 84,
              "variableName": "key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;\n        }\n        return true;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "        String keystoreType = KeystoreUtil.getKeystoreType(model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_TYPE_KEY), keystorePath, \"JKS\");\n        KeyStore keyStore = KeyStore.getInstance(keystoreType);\n        String keystorePwd = model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_PASSWORD_KEY);\n        keystorePwd = vault.getStringSecret(keystorePwd).get().orElse(keystorePwd);\n        keyStore.load(inputStream, keystorePwd.toCharArray());\n        return keyStore;\n    }"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {\n                logger.warnf(\"Validation failed for secret %s with resolved key %s\", vaultSecretId, resolvedKey);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }"
            },
            {
              "step": 14,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "     * @param resolvedKey the key after being resolved by the resolver.\n     * @return a boolean indicating whether the validation passed.\n     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;"
            },
            {
              "step": 15,
              "variableName": "key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;\n        }\n        return true;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "    private <K extends KeyStore.Entry> K checkKeyEntry(KeyStore keyStore, String keyAlias, Class<K> clazz, KeyUse use) throws GeneralSecurityException {\n        checkUsage(use);\n        String keyPwd = model.get(JavaKeystoreKeyProviderFactory.KEY_PASSWORD_KEY);\n        keyPwd = vault.getStringSecret(keyPwd).get().orElse(keyPwd);\n        KeyStore.Entry keyEntry = keyStore.getEntry(keyAlias, new KeyStore.PasswordProtection(keyPwd.toCharArray()));\n        if (keyEntry == null) {\n            throw new UnrecoverableKeyException(String.format(\"Alias %s does not exists in the keystore.\", keyAlias));"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {\n                logger.warnf(\"Validation failed for secret %s with resolved key %s\", vaultSecretId, resolvedKey);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }"
            },
            {
              "step": 14,
              "variableName": "String key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "     * @param resolvedKey the key after being resolved by the resolver.\n     * @return a boolean indicating whether the validation passed.\n     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;"
            },
            {
              "step": 15,
              "variableName": "key",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "",
              "code": "     */\n    protected boolean validate(VaultKeyResolver resolver, String key, String resolvedKey) {\n        if (key.contains(File.separator)) {\n            logger.warnf(\"Key %s contains invalid file separator character\", key);\n            return false;\n        }\n        return true;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 109,
      "fileName": "FilesKeystoreVaultProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            config.setAuthType(LDAPConstants.AUTH_TYPE_NONE);\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 19,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 21,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 23,
              "variableName": "LDAPContextManager.create(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 24,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation\n                ldapContext.reconnect(null);"
            },
            {
              "step": 25,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 26,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 27,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 28,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 29,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 30,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 31,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 32,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 35,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 37,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 38,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 39,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 40,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 41,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 42,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 43,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 44,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 45,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 46,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 47,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 48,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 49,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 50,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 51,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 52,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 53,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 54,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 55,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 56,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 57,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 58,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 59,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 60,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 61,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 62,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 63,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 64,
              "variableName": "String alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String alias) {\n        KeyStore ks;\n        Key key;\n        try {"
            },
            {
              "step": 65,
              "variableName": "alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "",
              "code": "            ks.load(Files.newInputStream(keystorePath.toRealPath()), keystorePass.toCharArray());\n            key = ks.getKey(alias, keystorePass.toCharArray());\n            if (key == null) {\n                logger.warnf(\"Cannot find secret %s in %s\", alias, keystorePath);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }\n        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableEntryException e) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            return Collections.emptySet();\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 17,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 19,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "LDAPOperationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPOperationManager(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "LDAPIdentityStore",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 25,
              "variableName": "new LDAPIdentityStore(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 26,
              "variableName": "queryServerCapabilities",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    @Override\n    public Set<LDAPCapabilityRepresentation> queryServerCapabilities() {\n        Set<LDAPCapabilityRepresentation> result = new LinkedHashSet<>();\n        try {\n            List<String> attrs = new ArrayList<>();"
            },
            {
              "step": 27,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 28,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 29,
              "variableName": "search",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return parentDn.getLdapName();\n    }\n\n    public List<SearchResult> search(final LdapName baseDN, final Condition condition, Collection<String> returningAttributes, int searchScope) throws NamingException {\n        final List<SearchResult> result = new ArrayList<>();\n        final SearchControls cons = getSearchControls(returningAttributes, searchScope);\n        final String filter = condition.toFilter();"
            },
            {
              "step": 30,
              "variableName": "this <.method> : LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        final String filter = condition.toFilter();\n\n        try {\n            return execute(new LdapOperation<List<SearchResult>>() {\n                @Override\n                public List<SearchResult> execute(LdapContext context) throws NamingException {\n                    NamingEnumeration<SearchResult> search = context.search(baseDN, filter, cons);"
            },
            {
              "step": 31,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "execute(operation, null)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {"
            },
            {
              "step": 33,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 35,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 36,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 37,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 38,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 39,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 40,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 41,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 42,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 43,
              "variableName": "LDAPContextManager.create(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 44,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }\n"
            },
            {
              "step": 45,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 46,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 47,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 48,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 49,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 50,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 51,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 52,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 53,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 54,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 55,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 56,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 58,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 59,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 60,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 61,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 62,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 63,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 64,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 65,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 66,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 67,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 68,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 69,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 70,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 71,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 72,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 73,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 74,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 75,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 76,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 77,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 78,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 79,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 80,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 81,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 82,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 83,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 84,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 85,
              "variableName": "String alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String alias) {\n        KeyStore ks;\n        Key key;\n        try {"
            },
            {
              "step": 86,
              "variableName": "alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "",
              "code": "            ks.load(Files.newInputStream(keystorePath.toRealPath()), keystorePass.toCharArray());\n            key = ks.getKey(alias, keystorePass.toCharArray());\n            if (key == null) {\n                logger.warnf(\"Cannot find secret %s in %s\", alias, keystorePath);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }\n        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableEntryException e) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "        String keystoreType = KeystoreUtil.getKeystoreType(model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_TYPE_KEY), keystorePath, \"JKS\");\n        KeyStore keyStore = KeyStore.getInstance(keystoreType);\n        String keystorePwd = model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_PASSWORD_KEY);\n        keystorePwd = vault.getStringSecret(keystorePwd).get().orElse(keystorePwd);\n        keyStore.load(inputStream, keystorePwd.toCharArray());\n        return keyStore;\n    }"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 14,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 15,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 16,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 17,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 18,
              "variableName": "String alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String alias) {\n        KeyStore ks;\n        Key key;\n        try {"
            },
            {
              "step": 19,
              "variableName": "alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "",
              "code": "            ks.load(Files.newInputStream(keystorePath.toRealPath()), keystorePass.toCharArray());\n            key = ks.getKey(alias, keystorePass.toCharArray());\n            if (key == null) {\n                logger.warnf(\"Cannot find secret %s in %s\", alias, keystorePath);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }\n        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableEntryException e) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "    private <K extends KeyStore.Entry> K checkKeyEntry(KeyStore keyStore, String keyAlias, Class<K> clazz, KeyUse use) throws GeneralSecurityException {\n        checkUsage(use);\n        String keyPwd = model.get(JavaKeystoreKeyProviderFactory.KEY_PASSWORD_KEY);\n        keyPwd = vault.getStringSecret(keyPwd).get().orElse(keyPwd);\n        KeyStore.Entry keyEntry = keyStore.getEntry(keyAlias, new KeyStore.PasswordProtection(keyPwd.toCharArray()));\n        if (keyEntry == null) {\n            throw new UnrecoverableKeyException(String.format(\"Alias %s does not exists in the keystore.\", keyAlias));"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 14,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 15,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 16,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 17,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 18,
              "variableName": "String alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String alias) {\n        KeyStore ks;\n        Key key;\n        try {"
            },
            {
              "step": 19,
              "variableName": "alias",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesKeystoreVaultProvider.java",
              "type": "",
              "code": "            ks.load(Files.newInputStream(keystorePath.toRealPath()), keystorePass.toCharArray());\n            key = ks.getKey(alias, keystorePass.toCharArray());\n            if (key == null) {\n                logger.warnf(\"Cannot find secret %s in %s\", alias, keystorePath);\n                return DefaultVaultRawSecret.forBuffer(Optional.empty());\n            }\n        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableEntryException e) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 110,
      "fileName": "FilesPlainTextVaultProvider.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            config.setAuthType(LDAPConstants.AUTH_TYPE_NONE);\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 19,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 21,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 23,
              "variableName": "LDAPContextManager.create(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation"
            },
            {
              "step": 24,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        // Create ldapContextManager in try-with-resource so that ldapContext/tlsResponse/VaultSecret is closed/removed when it\n        // is not needed anymore\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, ldapConfig)) {\n            LdapContext ldapContext = ldapContextManager.getLdapContext();\n            if (TEST_AUTHENTICATION.equals(config.getAction()) && LDAPConstants.AUTH_TYPE_NONE.equals(config.getAuthType())) {\n                // reconnect to force an anonymous bind operation\n                ldapContext.reconnect(null);"
            },
            {
              "step": 25,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 26,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 27,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 28,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 29,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 30,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 31,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 32,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 35,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 37,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 38,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 39,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 40,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 41,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 42,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 43,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 44,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 45,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 46,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 47,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 48,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 49,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 50,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 51,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 52,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 53,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 54,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 55,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 56,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 57,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 58,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 59,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 60,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 61,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 62,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 63,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 64,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);"
            },
            {
              "step": 65,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "",
              "code": "    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);\n            return DefaultVaultRawSecret.forBuffer(Optional.empty());\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "bindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 1,
              "variableName": "V value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 3,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n"
            },
            {
              "step": 4,
              "variableName": "list",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 5,
              "variableName": "put(key, list)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance\n    }\n\n    public default void addAll(K key, V... newValues) {"
            },
            {
              "step": 6,
              "variableName": "putSingle",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedMap [<map.value>, <element>] : String",
              "code": "\npublic interface MultivaluedMap<K, V> extends Map<K, List<V>> {\n\n    public default void putSingle(K key, V value) {\n        List<V> list = createListInstance();\n        list.add(value);\n        put(key, list); // Just override with new List instance"
            },
            {
              "step": 7,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        MultivaluedHashMap<String, String> configMap = new MultivaluedHashMap<>();\n        configMap.putSingle(LDAPConstants.AUTH_TYPE, config.getAuthType());\n        configMap.putSingle(LDAPConstants.BIND_DN, config.getBindDn());\n        configMap.putSingle(LDAPConstants.BIND_CREDENTIAL, bindCredential);\n        configMap.add(LDAPConstants.CONNECTION_URL, config.getConnectionUrl());\n        configMap.add(LDAPConstants.USE_TRUSTSTORE_SPI, config.getUseTruststoreSpi());\n        // set a forced timeout even when the timeout is infinite for testing"
            },
            {
              "step": 8,
              "variableName": "configMap",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "MultivaluedHashMap<String, String> config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 11,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n\n    public String getConnectionUrl() {"
            },
            {
              "step": 12,
              "variableName": "LDAPConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final MultivaluedHashMap<String, String> config;\n    private final Set<String> binaryAttributeNames = new HashSet<>();\n\n    public LDAPConfig(MultivaluedHashMap<String, String> config) {\n        this.config = config;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new LDAPConfig(configMap)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        configMap.putSingle(LDAPConstants.CONNECTION_TIMEOUT, timeoutStr);\n        configMap.putSingle(LDAPConstants.READ_TIMEOUT, timeoutStr);\n        configMap.add(LDAPConstants.START_TLS, config.getStartTls());\n        return new LDAPConfig(configMap);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "buildLDAPConfig(config, realm)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "            return Collections.emptySet();\n        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n"
            },
            {
              "step": 15,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 16,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 17,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "LDAPConfig config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 19,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 20,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }\n\n    /**"
            },
            {
              "step": 21,
              "variableName": "LDAPOperationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    private final KeycloakSession session;\n    private final LDAPConfig config;\n\n    public LDAPOperationManager(KeycloakSession session, LDAPConfig config) {\n        this.session = session;\n        this.config = config;\n    }"
            },
            {
              "step": 22,
              "variableName": "new LDAPOperationManager(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "LDAPIdentityStore",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    private final LDAPConfig config;\n    private final LDAPOperationManager operationManager;\n\n    public LDAPIdentityStore(KeycloakSession session, LDAPConfig config) {\n        this.config = config;\n        this.operationManager = new LDAPOperationManager(session, config);\n    }"
            },
            {
              "step": 25,
              "variableName": "new LDAPIdentityStore(session, ldapConfig)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/services/managers/LDAPServerCapabilitiesManager.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "        }\n\n        LDAPConfig ldapConfig = buildLDAPConfig(config, realm);\n        return new LDAPIdentityStore(session, ldapConfig).queryServerCapabilities();\n    }\n\n    public static class InvalidBindDNException extends javax.naming.NamingException {"
            },
            {
              "step": 26,
              "variableName": "queryServerCapabilities",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    @Override\n    public Set<LDAPCapabilityRepresentation> queryServerCapabilities() {\n        Set<LDAPCapabilityRepresentation> result = new LinkedHashSet<>();\n        try {\n            List<String> attrs = new ArrayList<>();"
            },
            {
              "step": 27,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPIdentityStore [operationManager, config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 28,
              "variableName": "operationManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPIdentityStore.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "            attrs.add(\"supportedControl\");\n            attrs.add(\"supportedExtension\");\n            attrs.add(\"supportedFeatures\");\n            List<SearchResult> searchResults = operationManager\n                .search(new LdapName(Collections.emptyList()),\n                        new LDAPQueryConditionsBuilder().present(LDAPConstants.OBJECT_CLASS),\n                        Collections.unmodifiableCollection(attrs), SearchControls.OBJECT_SCOPE);"
            },
            {
              "step": 29,
              "variableName": "search",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return parentDn.getLdapName();\n    }\n\n    public List<SearchResult> search(final LdapName baseDN, final Condition condition, Collection<String> returningAttributes, int searchScope) throws NamingException {\n        final List<SearchResult> result = new ArrayList<>();\n        final SearchControls cons = getSearchControls(returningAttributes, searchScope);\n        final String filter = condition.toFilter();"
            },
            {
              "step": 30,
              "variableName": "this <.method> : LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        final String filter = condition.toFilter();\n\n        try {\n            return execute(new LdapOperation<List<SearchResult>>() {\n                @Override\n                public List<SearchResult> execute(LdapContext context) throws NamingException {\n                    NamingEnumeration<SearchResult> search = context.search(baseDN, filter, cons);"
            },
            {
              "step": 31,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "execute(operation, null)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation) throws NamingException {\n        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {"
            },
            {
              "step": 33,
              "variableName": "execute",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "        return execute(operation, null);\n    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }"
            },
            {
              "step": 34,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPOperationManager [config, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 35,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 36,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n"
            },
            {
              "step": 37,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 38,
              "variableName": "LDAPConfig connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 39,
              "variableName": "connectionProperties",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 40,
              "variableName": "this",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {"
            },
            {
              "step": 41,
              "variableName": "LDAPContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private LdapContext ldapContext;\n\n    public LDAPContextManager(KeycloakSession session, LDAPConfig connectionProperties) {\n        this.session = session;\n        this.ldapConfig = connectionProperties;\n    }"
            },
            {
              "step": 42,
              "variableName": "new LDAPContextManager(session, connectionProperties)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public static LDAPContextManager create(KeycloakSession session, LDAPConfig connectionProperties) {\n        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {"
            },
            {
              "step": 43,
              "variableName": "LDAPContextManager.create(session, config)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }"
            },
            {
              "step": 44,
              "variableName": "ldapContextManager",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPOperationManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "\n    private <R> R execute(LdapOperation<R> operation, LDAPOperationDecorator decorator) throws NamingException {\n        try (LDAPContextManager ldapContextManager = LDAPContextManager.create(session, config)) {\n            return execute(operation, ldapContextManager.getLdapContext(), decorator);\n        }\n    }\n"
            },
            {
              "step": 45,
              "variableName": "getLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        }\n    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;"
            },
            {
              "step": 46,
              "variableName": "createLdapContext()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    public LdapContext getLdapContext() throws NamingException {\n        if (ldapContext == null) createLdapContext();\n\n        return ldapContext;\n    }"
            },
            {
              "step": 47,
              "variableName": "createLdapContext",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return new LDAPContextManager(session, connectionProperties);\n    }\n\n    private void createLdapContext() throws NamingException {\n        var tracing = session.getProvider(TracingProvider.class);\n        tracing.startSpan(LDAPContextManager.class, \"createLdapContext\");\n        try {"
            },
            {
              "step": 48,
              "variableName": "getVaultSecret()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "            Hashtable<Object, Object> connProp = getConnectionProperties(ldapConfig);\n\n            if (!LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())) {\n                vaultStringSecret = getVaultSecret();\n\n                if (vaultStringSecret != null && !ldapConfig.isStartTls() && ldapConfig.getBindCredential() != null) {\n                    connProp.put(SECURITY_CREDENTIALS, vaultStringSecret.get()"
            },
            {
              "step": 49,
              "variableName": "getVaultSecret",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "        return ldapContext;\n    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());"
            },
            {
              "step": 50,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPContextManager [ldapConfig, config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 51,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }"
            },
            {
              "step": 52,
              "variableName": "ldapConfig",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 53,
              "variableName": "getBindCredential",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "        return config.getFirst(LDAPConstants.BIND_DN);\n    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n"
            },
            {
              "step": 54,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "LDAPConfig [config, <map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 55,
              "variableName": "config",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 56,
              "variableName": "getFirst",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "        getList(key).addAll(values);\n    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "MultivaluedHashMap [<map.value>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 58,
              "variableName": "get(key)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 59,
              "variableName": "Optional.ofNullable(get(key))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 60,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty())",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>, <element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 61,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 62,
              "variableName": "l",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 63,
              "variableName": "l.get(0)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 64,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0))",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "Optional [<element>] : String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 65,
              "variableName": "Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null)",
              "uri": "keycloak-26.1.2/common/src/main/java/org/keycloak/common/util/MultivaluedMap.java",
              "type": "String",
              "code": "    }\n\n    public default V getFirst(K key) {\n        return Optional.ofNullable(get(key)).filter(l -> !l.isEmpty()).map(l -> l.get(0)).orElse(null);\n    }\n\n    default V getFirstOrDefault(K key, V defaultValue) {"
            },
            {
              "step": 66,
              "variableName": "config.getFirst(LDAPConstants.BIND_CREDENTIAL)",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/LDAPConfig.java",
              "type": "String",
              "code": "    }\n\n    public String getBindCredential() {\n        return config.getFirst(LDAPConstants.BIND_CREDENTIAL);\n    }\n\n    public String getVendor() {"
            },
            {
              "step": 67,
              "variableName": "ldapConfig.getBindCredential()",
              "uri": "keycloak-26.1.2/federation/ldap/src/main/java/org/keycloak/storage/ldap/idm/store/ldap/LDAPContextManager.java",
              "type": "String",
              "code": "    private VaultStringSecret getVaultSecret() {\n        return LDAPConstants.AUTH_TYPE_NONE.equals(ldapConfig.getAuthType())\n                ? null\n                : session.vault().getStringSecret(ldapConfig.getBindCredential());\n    }\n\n    public static StartTlsResponse startTLS(LdapContext ldapContext, String authType, String bindDN, String bindCredential, SSLSocketFactory sslSocketFactory) throws NamingException {"
            },
            {
              "step": 68,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 69,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 70,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 71,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 72,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 73,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 74,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 75,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 76,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 77,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 78,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 79,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 80,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 81,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 82,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 83,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 84,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 85,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);"
            },
            {
              "step": 86,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "",
              "code": "    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);\n            return DefaultVaultRawSecret.forBuffer(Optional.empty());\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "        String keystoreType = KeystoreUtil.getKeystoreType(model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_TYPE_KEY), keystorePath, \"JKS\");\n        KeyStore keyStore = KeyStore.getInstance(keystoreType);\n        String keystorePwd = model.get(JavaKeystoreKeyProviderFactory.KEYSTORE_PASSWORD_KEY);\n        keystorePwd = vault.getStringSecret(keystorePwd).get().orElse(keystorePwd);\n        keyStore.load(inputStream, keystorePwd.toCharArray());\n        return keyStore;\n    }"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 14,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 15,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 16,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 17,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 18,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);"
            },
            {
              "step": 19,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "",
              "code": "    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);\n            return DefaultVaultRawSecret.forBuffer(Optional.empty());\n        }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "keyPwd",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/keys/JavaKeystoreKeyProvider.java",
              "type": "String",
              "code": "    private <K extends KeyStore.Entry> K checkKeyEntry(KeyStore keyStore, String keyAlias, Class<K> clazz, KeyUse use) throws GeneralSecurityException {\n        checkUsage(use);\n        String keyPwd = model.get(JavaKeystoreKeyProviderFactory.KEY_PASSWORD_KEY);\n        keyPwd = vault.getStringSecret(keyPwd).get().orElse(keyPwd);\n        KeyStore.Entry keyEntry = keyStore.getEntry(keyAlias, new KeyStore.PasswordProtection(keyPwd.toCharArray()));\n        if (keyEntry == null) {\n            throw new UnrecoverableKeyException(String.format(\"Alias %s does not exists in the keystore.\", keyAlias));"
            },
            {
              "step": 1,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {"
            },
            {
              "step": 2,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    @Override\n    public VaultStringSecret getStringSecret(final String value) {\n        // obtain the raw secret and convert it into a string string.\n        try (VaultRawSecret rawSecret = this.getRawSecret(value)) {\n            if (!rawSecret.get().isPresent()) {\n                return DefaultVaultStringSecret.forString(Optional.empty());\n            }"
            },
            {
              "step": 3,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry."
            },
            {
              "step": 4,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 5,
              "variableName": "final String value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     * @param value a {@code String} that might contain a vault entry key.\n     * @return the extracted entry key if the value follows the {@code ${vault.<KEY>}} format; null otherwise.\n     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {"
            },
            {
              "step": 6,
              "variableName": "value",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 7,
              "variableName": "pattern.matcher(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "     */\n    private String getVaultEntryKey(final String value) {\n        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }"
            },
            {
              "step": 8,
              "variableName": "matcher",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "Matcher",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 9,
              "variableName": "matcher.group(1)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        if (value != null) {\n            Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                return matcher.group(1);\n            }\n        }\n        return null;"
            },
            {
              "step": 10,
              "variableName": "this.getVaultEntryKey(value)",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "\n    @Override\n    public VaultRawSecret getRawSecret(final String value) {\n        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);"
            },
            {
              "step": 11,
              "variableName": "entryId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/DefaultVaultTranscriber.java",
              "type": "String",
              "code": "        String entryId = this.getVaultEntryKey(value);\n        if (entryId != null) {\n            // we have a valid ${vault.<KEY>} string, use the provider to retrieve the entry.\n            return this.provider.obtainSecret(entryId);\n        } else {\n            // not a vault expression - encode the value itself as a byte buffer.\n            ByteBuffer buffer = value != null ? ByteBuffer.wrap(value.getBytes(StandardCharsets.UTF_8)) : null;"
            },
            {
              "step": 12,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public VaultRawSecret obtainSecret(String vaultSecretId) {\n        for (VaultKeyResolver resolver : this.resolvers) {\n            String resolvedKey = resolver.apply(this.realm, vaultSecretId);\n            if (!validate(resolver, vaultSecretId, resolvedKey)) {"
            },
            {
              "step": 13,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "            if (secret != null && secret.get().isPresent()) {\n                return secret;\n            }\n            checkForLegacyKey(resolver, vaultSecretId, resolvedKey);\n        }\n        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }"
            },
            {
              "step": 14,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "        return DefaultVaultRawSecret.forBuffer(Optional.empty());\n    }\n\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);"
            },
            {
              "step": 15,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 16,
              "variableName": "vaultSecretId.replaceAll(\"__\", \"_\")",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "\n    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);"
            },
            {
              "step": 17,
              "variableName": "legacyKey",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/AbstractVaultProvider.java",
              "type": "String",
              "code": "    private void checkForLegacyKey(VaultKeyResolver resolver, String vaultSecretId, String resolvedKey) {\n        if (resolver == AbstractVaultProviderFactory.AvailableResolvers.KEY_ONLY.getVaultKeyResolver() && vaultSecretId.contains(\"_\")) {\n            String legacyKey = vaultSecretId.replaceAll(\"__\", \"_\");\n            VaultRawSecret legacySecret = this.obtainSecretInternal(legacyKey);\n            if (legacySecret != null && legacySecret.get().isPresent()) {\n                logger.warnf(\"Secret was found using legacy key '%s'. Please rename the key to '%s' and repeat the action.\", legacyKey, resolvedKey);\n            }"
            },
            {
              "step": 18,
              "variableName": "String vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);"
            },
            {
              "step": 19,
              "variableName": "vaultSecretId",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/vault/FilesPlainTextVaultProvider.java",
              "type": "",
              "code": "    protected VaultRawSecret obtainSecretInternal(String vaultSecretId) {\n        Path secretPath = vaultPath.resolve(vaultSecretId);\n        if (!Files.exists(secretPath)) {\n            logger.warnf(\"Cannot find secret %s in %s\", vaultSecretId, secretPath);\n            return DefaultVaultRawSecret.forBuffer(Optional.empty());\n        }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 115,
      "fileName": "BackwardsCompatibilityUserStorage.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "credentialType",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/credential/WebAuthnCredentialModelInput.java",
              "type": "String",
              "code": "\n    @Override\n    public String getType() {\n        return credentialType;\n    }\n\n"
            },
            {
              "step": 1,
              "variableName": "input.getType()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/federation/BackwardsCompatibilityUserStorage.java",
              "type": "",
              "code": "                    storedOTPCredential.getPeriod(), realm.getOTPPolicy().getLookAheadWindow());\n            return validator.validateTOTP(otpCredential.getValue(), storedOTPCredential.getValue().getBytes());\n        } else {\n            log.infof(\"Not supported to validate credential of type '%s' for user '%s'\", input.getType(), user.getUsername());\n            return false;\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 116,
      "fileName": "TestRaiseExceptionExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_REQUEST",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/context/ResourceOwnerPasswordCredentialsContext.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public ClientPolicyEvent getEvent() {\n        return ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_REQUEST;\n    }\n\n    public MultivaluedMap<String, String> getParams() {"
            },
            {
              "step": 1,
              "variableName": "context.getEvent()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/services/clientpolicy/executor/TestRaiseExceptionExecutor.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {\n        if (isThrowExceptionNeeded(context.getEvent())) throw new ClientPolicyException(context.getEvent().toString(), \"Exception thrown intentionally\");\n    }\n\n    private boolean isThrowExceptionNeeded(ClientPolicyEvent event) {"
            },
            {
              "step": 2,
              "variableName": "ClientPolicyEvent event",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/services/clientpolicy/executor/TestRaiseExceptionExecutor.java",
              "type": "ClientPolicyEvent",
              "code": "        if (isThrowExceptionNeeded(context.getEvent())) throw new ClientPolicyException(context.getEvent().toString(), \"Exception thrown intentionally\");\n    }\n\n    private boolean isThrowExceptionNeeded(ClientPolicyEvent event) {\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        if (configuration != null && configuration.getEvents() != null && !configuration.getEvents().isEmpty()) {\n            return configuration.getEvents().contains(event);"
            },
            {
              "step": 3,
              "variableName": "event",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/services/clientpolicy/executor/TestRaiseExceptionExecutor.java",
              "type": "",
              "code": "    }\n\n    private boolean isThrowExceptionNeeded(ClientPolicyEvent event) {\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        if (configuration != null && configuration.getEvents() != null && !configuration.getEvents().isEmpty()) {\n            return configuration.getEvents().contains(event);\n        }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_RESPONSE",
              "uri": "keycloak-26.1.2/services/src/main/java/org/keycloak/services/clientpolicy/context/ResourceOwnerPasswordCredentialsResponseContext.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public ClientPolicyEvent getEvent() {\n        return ClientPolicyEvent.RESOURCE_OWNER_PASSWORD_CREDENTIALS_RESPONSE;\n    }\n\n    public MultivaluedMap<String, String> getParams() {"
            },
            {
              "step": 1,
              "variableName": "context.getEvent()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/services/clientpolicy/executor/TestRaiseExceptionExecutor.java",
              "type": "ClientPolicyEvent",
              "code": "\n    @Override\n    public void executeOnEvent(ClientPolicyContext context) throws ClientPolicyException {\n        if (isThrowExceptionNeeded(context.getEvent())) throw new ClientPolicyException(context.getEvent().toString(), \"Exception thrown intentionally\");\n    }\n\n    private boolean isThrowExceptionNeeded(ClientPolicyEvent event) {"
            },
            {
              "step": 2,
              "variableName": "ClientPolicyEvent event",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/services/clientpolicy/executor/TestRaiseExceptionExecutor.java",
              "type": "ClientPolicyEvent",
              "code": "        if (isThrowExceptionNeeded(context.getEvent())) throw new ClientPolicyException(context.getEvent().toString(), \"Exception thrown intentionally\");\n    }\n\n    private boolean isThrowExceptionNeeded(ClientPolicyEvent event) {\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        if (configuration != null && configuration.getEvents() != null && !configuration.getEvents().isEmpty()) {\n            return configuration.getEvents().contains(event);"
            },
            {
              "step": 3,
              "variableName": "event",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/servers/auth-server/services/testsuite-providers/src/main/java/org/keycloak/testsuite/services/clientpolicy/executor/TestRaiseExceptionExecutor.java",
              "type": "",
              "code": "    }\n\n    private boolean isThrowExceptionNeeded(ClientPolicyEvent event) {\n        logger.tracev(\"Client Policy Trigger Event = {0}\",  event);\n        if (configuration != null && configuration.getEvents() != null && !configuration.getEvents().isEmpty()) {\n            return configuration.getEvents().contains(event);\n        }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 117,
      "fileName": "KeycloakQuarkusEmbeddedDeployableContainer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getKeystorePassword() {\n        return keystorePassword;\n    }\n\n    public void setKeystorePassword(String keystorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getKeystorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 2,
              "variableName": "\"--https-key-store-password=\" + configuration.getKeystorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(new HashMap<>())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    protected List<String> getArgs() {\n        return getArgs(new HashMap<>());\n    }\n\n    protected List<String> getArgs(Map<String, String> env) {"
            },
            {
              "step": 8,
              "variableName": "getArgs()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    @Override\n    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();"
            },
            {
              "step": 9,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "",
              "code": "    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();\n        } catch (Exception e) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "truststorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getTruststorePassword() {\n        return truststorePassword;\n    }\n\n    public void setTruststorePassword(String truststorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 2,
              "variableName": "\"--https-trust-store-password=\" + configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(new HashMap<>())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    protected List<String> getArgs() {\n        return getArgs(new HashMap<>());\n    }\n\n    protected List<String> getArgs(Map<String, String> env) {"
            },
            {
              "step": 8,
              "variableName": "getArgs()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    @Override\n    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();"
            },
            {
              "step": 9,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "",
              "code": "    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();\n        } catch (Exception e) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "truststorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getTruststorePassword() {\n        return truststorePassword;\n    }\n\n    public void setTruststorePassword(String truststorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n\n        // BCFIPS approved mode requires passwords of at least 112 bits (14 characters) to be used. To bypass this, we use this by default\n        // as testsuite uses shorter passwords everywhere"
            },
            {
              "step": 2,
              "variableName": "\"--spi-truststore-file-password=\" + configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n\n        // BCFIPS approved mode requires passwords of at least 112 bits (14 characters) to be used. To bypass this, we use this by default\n        // as testsuite uses shorter passwords everywhere"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n\n        // BCFIPS approved mode requires passwords of at least 112 bits (14 characters) to be used. To bypass this, we use this by default\n        // as testsuite uses shorter passwords everywhere"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(new HashMap<>())",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    }\n\n    protected List<String> getArgs() {\n        return getArgs(new HashMap<>());\n    }\n\n    protected List<String> getArgs(Map<String, String> env) {"
            },
            {
              "step": 8,
              "variableName": "getArgs()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "    @Override\n    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();"
            },
            {
              "step": 9,
              "variableName": "args",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusEmbeddedDeployableContainer.java",
              "type": "",
              "code": "    public void start() throws LifecycleException {\n        try {\n            List<String> args = getArgs();\n            log.debugf(\"Quarkus process arguments: %s\", args);\n            keycloak = configure().start(args);\n            waitForReadiness();\n        } catch (Exception e) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 118,
      "fileName": "KeycloakQuarkusServerDeployableContainer.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "keystorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getKeystorePassword() {\n        return keystorePassword;\n    }\n\n    public void setKeystorePassword(String keystorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getKeystorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 2,
              "variableName": "\"--https-key-store-password=\" + configuration.getKeystorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "                configuration.getKeystoreFile(),\n                configuration.getTruststoreFile());\n        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(env)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "\n    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);"
            },
            {
              "step": 8,
              "variableName": "getArgs(env).toArray(new String[0])",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "String[] [[]] : String",
              "code": "\n    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);"
            },
            {
              "step": 9,
              "variableName": "processCommands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "String[] [[]] : String",
              "code": "    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);\n"
            },
            {
              "step": 10,
              "variableName": "Arrays.asList(processCommands)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "",
              "code": "    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "truststorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getTruststorePassword() {\n        return truststorePassword;\n    }\n\n    public void setTruststorePassword(String truststorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 2,
              "variableName": "\"--https-trust-store-password=\" + configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        commands.add(\"--https-key-store-file=\" + configuration.getKeystoreFile());\n        commands.add(\"--https-key-store-password=\" + configuration.getKeystorePassword());\n        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(env)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "\n    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);"
            },
            {
              "step": 8,
              "variableName": "getArgs(env).toArray(new String[0])",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "String[] [[]] : String",
              "code": "\n    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);"
            },
            {
              "step": 9,
              "variableName": "processCommands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "String[] [[]] : String",
              "code": "    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);\n"
            },
            {
              "step": 10,
              "variableName": "Arrays.asList(processCommands)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "",
              "code": "    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "truststorePassword",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusConfiguration.java",
              "type": "String",
              "code": "    }\n\n    public String getTruststorePassword() {\n        return truststorePassword;\n    }\n\n    public void setTruststorePassword(String truststorePassword) {"
            },
            {
              "step": 1,
              "variableName": "configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n\n        // BCFIPS approved mode requires passwords of at least 112 bits (14 characters) to be used. To bypass this, we use this by default\n        // as testsuite uses shorter passwords everywhere"
            },
            {
              "step": 2,
              "variableName": "\"--spi-truststore-file-password=\" + configuration.getTruststorePassword()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "String",
              "code": "        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n\n        // BCFIPS approved mode requires passwords of at least 112 bits (14 characters) to be used. To bypass this, we use this by default\n        // as testsuite uses shorter passwords everywhere"
            },
            {
              "step": 3,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        commands.add(\"--https-trust-store-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--https-trust-store-password=\" + configuration.getTruststorePassword());\n        commands.add(\"--spi-truststore-file-file=\" + configuration.getTruststoreFile());\n        commands.add(\"--spi-truststore-file-password=\" + configuration.getTruststorePassword());\n\n        // BCFIPS approved mode requires passwords of at least 112 bits (14 characters) to be used. To bypass this, we use this by default\n        // as testsuite uses shorter passwords everywhere"
            },
            {
              "step": 4,
              "variableName": "List<String> commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        storeProvider.addStoreOptions(commands);\n    }\n\n    private void addFipsOptions(List<String> commands) {\n        commands.add(\"--fips-mode=\" + configuration.getFipsMode().toString());\n\n        log.debugf(\"Keystore file: %s, truststore file: %s\","
            },
            {
              "step": 5,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "        log.debugf(\"FIPS Mode: %s\", configuration.getFipsMode());\n\n        if (configuration.getFipsMode() != FipsMode.DISABLED) {\n            addFipsOptions(commands);\n        }\n\n        addStorageOptions(storeProvider, commands);"
            },
            {
              "step": 6,
              "variableName": "commands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/AbstractQuarkusDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "            System.setProperty(\"kc.cache-remote-create-caches\", \"true\");\n        }\n\n        return commands;\n    }\n\n    protected void addFeaturesOption(List<String> commands) {"
            },
            {
              "step": 7,
              "variableName": "getArgs(env)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "List [<element>] : String",
              "code": "\n    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);"
            },
            {
              "step": 8,
              "variableName": "getArgs(env).toArray(new String[0])",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "String[] [[]] : String",
              "code": "\n    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);"
            },
            {
              "step": 9,
              "variableName": "processCommands",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "String[] [[]] : String",
              "code": "    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);\n"
            },
            {
              "step": 10,
              "variableName": "Arrays.asList(processCommands)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/tests/base/src/main/java/org/keycloak/testsuite/arquillian/containers/KeycloakQuarkusServerDeployableContainer.java",
              "type": "",
              "code": "    private ProcessBuilder getProcessBuilder() {\n        Map<String, String> env = new HashMap<>();\n        String[] processCommands = getArgs(env).toArray(new String[0]);\n        log.debugf(\"Quarkus process arguments: %s\", Arrays.asList(processCommands));\n        ProcessBuilder pb = new ProcessBuilder(processCommands);\n        pb.environment().putAll(env);\n"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "535": [
    {
      "resultIndex": 121,
      "fileName": "IOUtil.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "Runtime.getRuntime().exec(command, null, dir)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "Process",
              "code": "    }\n\n    public static void execCommand(String command, File dir) throws IOException, InterruptedException {\n        Process process = Runtime.getRuntime().exec(command, null, dir);\n        if (process.waitFor(10, TimeUnit.SECONDS)) {\n            if (process.exitValue() != 0) {\n                getOutput(\"ERROR\", process.getErrorStream());"
            },
            {
              "step": 1,
              "variableName": "process",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "Process",
              "code": "        Process process = Runtime.getRuntime().exec(command, null, dir);\n        if (process.waitFor(10, TimeUnit.SECONDS)) {\n            if (process.exitValue() != 0) {\n                getOutput(\"ERROR\", process.getErrorStream());\n                throw new RuntimeException(\"Adapter installation failed. Process exitValue: \"\n                        + process.exitValue());\n            }"
            },
            {
              "step": 2,
              "variableName": "process.getErrorStream()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "        Process process = Runtime.getRuntime().exec(command, null, dir);\n        if (process.waitFor(10, TimeUnit.SECONDS)) {\n            if (process.exitValue() != 0) {\n                getOutput(\"ERROR\", process.getErrorStream());\n                throw new RuntimeException(\"Adapter installation failed. Process exitValue: \"\n                        + process.exitValue());\n            }"
            },
            {
              "step": 3,
              "variableName": "InputStream is",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "        }\n    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");"
            },
            {
              "step": 4,
              "variableName": "is",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 5,
              "variableName": "new InputStreamReader(is)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStreamReader",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 6,
              "variableName": "new BufferedReader(new InputStreamReader(is))",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "BufferedReader",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 7,
              "variableName": "reader",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "BufferedReader",
              "code": "        System.out.println(builder);\n        builder = new StringBuilder();\n        while (reader.ready()) {\n            System.out.println(reader.readLine());\n        }\n        builder.append(\"</\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 8,
              "variableName": "reader.readLine()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "",
              "code": "        System.out.println(builder);\n        builder = new StringBuilder();\n        while (reader.ready()) {\n            System.out.println(reader.readLine());\n        }\n        builder.append(\"</\").append(type).append(\">\");\n        System.out.println(builder);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "Runtime.getRuntime().exec(command, null, dir)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "Process",
              "code": "    }\n\n    public static void execCommand(String command, File dir) throws IOException, InterruptedException {\n        Process process = Runtime.getRuntime().exec(command, null, dir);\n        if (process.waitFor(10, TimeUnit.SECONDS)) {\n            if (process.exitValue() != 0) {\n                getOutput(\"ERROR\", process.getErrorStream());"
            },
            {
              "step": 1,
              "variableName": "process",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "Process",
              "code": "                throw new RuntimeException(\"Adapter installation failed. Process exitValue: \"\n                        + process.exitValue());\n            }\n            getOutput(\"OUTPUT\", process.getInputStream());\n            log.debug(\"process.isAlive(): \" + process.isAlive());\n        } else {\n            if (process.isAlive()) {"
            },
            {
              "step": 2,
              "variableName": "process.getInputStream()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "                throw new RuntimeException(\"Adapter installation failed. Process exitValue: \"\n                        + process.exitValue());\n            }\n            getOutput(\"OUTPUT\", process.getInputStream());\n            log.debug(\"process.isAlive(): \" + process.isAlive());\n        } else {\n            if (process.isAlive()) {"
            },
            {
              "step": 3,
              "variableName": "InputStream is",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "        }\n    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");"
            },
            {
              "step": 4,
              "variableName": "is",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 5,
              "variableName": "new InputStreamReader(is)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStreamReader",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 6,
              "variableName": "new BufferedReader(new InputStreamReader(is))",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "BufferedReader",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 7,
              "variableName": "reader",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "BufferedReader",
              "code": "        System.out.println(builder);\n        builder = new StringBuilder();\n        while (reader.ready()) {\n            System.out.println(reader.readLine());\n        }\n        builder.append(\"</\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 8,
              "variableName": "reader.readLine()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "",
              "code": "        System.out.println(builder);\n        builder = new StringBuilder();\n        while (reader.ready()) {\n            System.out.println(reader.readLine());\n        }\n        builder.append(\"</\").append(type).append(\">\");\n        System.out.println(builder);"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "process.getErrorStream()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "        Process process = Runtime.getRuntime().exec(command, null, dir);\n        if (process.waitFor(10, TimeUnit.SECONDS)) {\n            if (process.exitValue() != 0) {\n                getOutput(\"ERROR\", process.getErrorStream());\n                throw new RuntimeException(\"Adapter installation failed. Process exitValue: \"\n                        + process.exitValue());\n            }"
            },
            {
              "step": 1,
              "variableName": "InputStream is",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "        }\n    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");"
            },
            {
              "step": 2,
              "variableName": "is",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStream",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 3,
              "variableName": "new InputStreamReader(is)",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "InputStreamReader",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 4,
              "variableName": "new BufferedReader(new InputStreamReader(is))",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "BufferedReader",
              "code": "    }\n\n    public static void getOutput(String type, InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"<\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 5,
              "variableName": "reader",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "BufferedReader",
              "code": "        System.out.println(builder);\n        builder = new StringBuilder();\n        while (reader.ready()) {\n            System.out.println(reader.readLine());\n        }\n        builder.append(\"</\").append(type).append(\">\");\n        System.out.println(builder);"
            },
            {
              "step": 6,
              "variableName": "reader.readLine()",
              "uri": "keycloak-26.1.2/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/io/IOUtil.java",
              "type": "",
              "code": "        System.out.println(builder);\n        builder = new StringBuilder();\n        while (reader.ready()) {\n            System.out.println(reader.readLine());\n        }\n        builder.append(\"</\").append(type).append(\">\");\n        System.out.println(builder);"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}