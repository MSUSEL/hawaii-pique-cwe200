{
  "214": [
    {
      "resultIndex": 0,
      "fileName": "Shell.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 70,
              "startColumn": 52,
              "endLine": 70,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "                if (nodeSpec.latencyMs() < 0 || nodeSpec.rateLimitKbit() < 0) {\n                    throw new RuntimeException(\"Expected non-negative values for latencyMs and rateLimitKbit, but got \" + nodeSpec);\n                } else {\n                    enableTrafficControl(platform, device, nodeSpec.latencyMs(), nodeSpec.rateLimitKbit());\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 108,
              "startColumn": 58,
              "endLine": 108,
              "endColumn": 78,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Constructs the appropriate \"tc\" commands to apply latency and rate limiting, if they are non zero.\n     */\n    private void enableTrafficControl(Platform platform, String networkDevice, int delayMs, int rateLimitKbps) throws IOException {\n        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 112,
              "startColumn": 25,
              "endLine": 112,
              "endColumn": 38,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 3,
              "variableName": "String networkDevice",
              "startLine": 135,
              "startColumn": 30,
              "endLine": 135,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "networkDevice",
              "startLine": 136,
              "startColumn": 56,
              "endLine": 136,
              "endColumn": 69,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Object[] [[]] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Stream [<element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 8,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 9,
              "variableName": "delay",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 45,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 10,
              "variableName": "delay",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 45,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 11,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 12,
              "variableName": "consumer",
              "startLine": 136,
              "startColumn": 104,
              "endLine": 136,
              "endColumn": 112,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "Consumer<String> consumer",
              "startLine": 135,
              "startColumn": 52,
              "endLine": 135,
              "endColumn": 77,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 14,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": ":... [post update] : new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 15,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "List [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 16,
              "variableName": "delay",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 38,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "List [<element>] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 17,
              "variableName": "delay.toArray(new String[0])",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 61,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 18,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 20,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 21,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 22,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.9340734481811523
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 3,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 4,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 5,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 7,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 8,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 9,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.0851147398352623
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 96,
              "startColumn": 21,
              "endLine": 96,
              "endColumn": 28,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        if (nodeSpec.networkDevice().isEmpty()) {\n            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {\n                if (!networkInterface.isLoopback()) {\n                    devices.add(networkInterface.getName());\n                }\n            }\n        } else {"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 12,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.01114611141383648
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 100,
              "startColumn": 13,
              "endLine": 100,
              "endColumn": 20,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "                }\n            }\n        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            },
            {
              "step": 12,
              "variableName": "String... cmd",
              "startLine": 251,
              "startColumn": 38,
              "endLine": 251,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "String[] [[]] : String",
              "code": "     * @param cmd shell command to execute.\n     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "cmd",
              "startLine": 252,
              "startColumn": 28,
              "endLine": 252,
              "endColumn": 31,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Shell.java",
              "type": "",
              "code": "     * @return the output of the executed command.\n     */\n    public static String execCommand(String... cmd) throws IOException {\n        return execCommand(cmd, -1);\n    }\n\n    /**"
            }
          ],
          "label": "No",
          "probability": 0.02515565976500511
        }
      ]
    },
    {
      "resultIndex": 1,
      "fileName": "MetadataShell.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "startLine": 63,
              "startColumn": 22,
              "endLine": 63,
              "endColumn": 25,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "Object",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "\"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\"",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 75,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic())",
              "startLine": 172,
              "startColumn": 38,
              "endLine": 172,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 172,
              "startColumn": 25,
              "endLine": 172,
              "endColumn": 31,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 118,
              "startColumn": 85,
              "endLine": 118,
              "endColumn": 91,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                    0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n            } catch (Throwable t) {\n                if (skipMessageOnError) {\n                    LOG.error(\"Error processing message, skipping this message: \", t);"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 101,
              "startColumn": 96,
              "endLine": 101,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output, boolean skipMessageOnError) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;\n            try {"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 77,
              "startColumn": 76,
              "endLine": 77,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper, opts);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.skipMessageOnError());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 215,
              "startColumn": 44,
              "endLine": 215,
              "endColumn": 54,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintStream",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 17,
              "variableName": "new OutputStreamWriter(System.out, StandardCharsets.UTF_8)",
              "startLine": 215,
              "startColumn": 21,
              "endLine": 215,
              "endColumn": 79,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "OutputStreamWriter",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 18,
              "variableName": "new BufferedWriter(",
              "startLine": 214,
              "startColumn": 55,
              "endLine": 215,
              "endColumn": 80,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "BufferedWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 19,
              "variableName": "new PrintWriter(new BufferedWriter(",
              "startLine": 214,
              "startColumn": 39,
              "endLine": 215,
              "endColumn": 81,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 20,
              "variableName": "writer",
              "startLine": 217,
              "startColumn": 47,
              "endLine": 217,
              "endColumn": 53,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "",
              "code": "            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.8175622224807739
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "startLine": 63,
              "startColumn": 22,
              "endLine": 63,
              "endColumn": 25,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "Object",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "\"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\"",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 75,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic())",
              "startLine": 182,
              "startColumn": 30,
              "endLine": 182,
              "endColumn": 120,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 182,
              "startColumn": 17,
              "endLine": 182,
              "endColumn": 23,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 114,
              "startColumn": 89,
              "endLine": 114,
              "endColumn": 95,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                        0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n                consumer.acknowledge(msg, acknowledgeType);\n            } catch (Throwable t) {\n                if (rejectMessageOnError) {"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 96,
              "startColumn": 96,
              "endLine": 96,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output,\n                        boolean rejectMessageOnError, AcknowledgeType acknowledgeType) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 75,
              "startColumn": 76,
              "endLine": 75,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.rejectMessageOnError(), opts.acknowledgeType());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 215,
              "startColumn": 44,
              "endLine": 215,
              "endColumn": 54,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintStream",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 17,
              "variableName": "new OutputStreamWriter(System.out, StandardCharsets.UTF_8)",
              "startLine": 215,
              "startColumn": 21,
              "endLine": 215,
              "endColumn": 79,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "OutputStreamWriter",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 18,
              "variableName": "new BufferedWriter(",
              "startLine": 214,
              "startColumn": 55,
              "endLine": 215,
              "endColumn": 80,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "BufferedWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 19,
              "variableName": "new PrintWriter(new BufferedWriter(",
              "startLine": 214,
              "startColumn": 39,
              "endLine": 215,
              "endColumn": 81,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 20,
              "variableName": "writer",
              "startLine": 217,
              "startColumn": 47,
              "endLine": 217,
              "endColumn": 53,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "",
              "code": "            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.8175622224807739
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "primaryKey",
              "startLine": 116,
              "startColumn": 31,
              "endLine": 116,
              "endColumn": 41,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "Object",
              "code": "    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +\n            \", hash=\" + Arrays.toString(hash) +\n            \", primaryPartition=\" + primaryPartition +"
            },
            {
              "step": 1,
              "variableName": "",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 120,
              "endColumn": 16,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic())",
              "startLine": 172,
              "startColumn": 38,
              "endLine": 172,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 172,
              "startColumn": 25,
              "endLine": 172,
              "endColumn": 31,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 118,
              "startColumn": 85,
              "endLine": 118,
              "endColumn": 91,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                    0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n            } catch (Throwable t) {\n                if (skipMessageOnError) {\n                    LOG.error(\"Error processing message, skipping this message: \", t);"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 101,
              "startColumn": 96,
              "endLine": 101,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output, boolean skipMessageOnError) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;\n            try {"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 77,
              "startColumn": 76,
              "endLine": 77,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper, opts);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.skipMessageOnError());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 215,
              "startColumn": 44,
              "endLine": 215,
              "endColumn": 54,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintStream",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 17,
              "variableName": "new OutputStreamWriter(System.out, StandardCharsets.UTF_8)",
              "startLine": 215,
              "startColumn": 21,
              "endLine": 215,
              "endColumn": 79,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "OutputStreamWriter",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 18,
              "variableName": "new BufferedWriter(",
              "startLine": 214,
              "startColumn": 55,
              "endLine": 215,
              "endColumn": 80,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "BufferedWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 19,
              "variableName": "new PrintWriter(new BufferedWriter(",
              "startLine": 214,
              "startColumn": 39,
              "endLine": 215,
              "endColumn": 81,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 20,
              "variableName": "writer",
              "startLine": 217,
              "startColumn": 47,
              "endLine": 217,
              "endColumn": 53,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "",
              "code": "            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.16981780529022217
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "primaryKey",
              "startLine": 116,
              "startColumn": 31,
              "endLine": 116,
              "endColumn": 41,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "Object",
              "code": "    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +\n            \", hash=\" + Arrays.toString(hash) +\n            \", primaryPartition=\" + primaryPartition +"
            },
            {
              "step": 1,
              "variableName": "",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 120,
              "endColumn": 16,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic())",
              "startLine": 182,
              "startColumn": 30,
              "endLine": 182,
              "endColumn": 120,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 182,
              "startColumn": 17,
              "endLine": 182,
              "endColumn": 23,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 114,
              "startColumn": 89,
              "endLine": 114,
              "endColumn": 95,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                        0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n                consumer.acknowledge(msg, acknowledgeType);\n            } catch (Throwable t) {\n                if (rejectMessageOnError) {"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 96,
              "startColumn": 96,
              "endLine": 96,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output,\n                        boolean rejectMessageOnError, AcknowledgeType acknowledgeType) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 75,
              "startColumn": 76,
              "endLine": 75,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.rejectMessageOnError(), opts.acknowledgeType());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 215,
              "startColumn": 44,
              "endLine": 215,
              "endColumn": 54,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintStream",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 17,
              "variableName": "new OutputStreamWriter(System.out, StandardCharsets.UTF_8)",
              "startLine": 215,
              "startColumn": 21,
              "endLine": 215,
              "endColumn": 79,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "OutputStreamWriter",
              "code": "            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();"
            },
            {
              "step": 18,
              "variableName": "new BufferedWriter(",
              "startLine": 214,
              "startColumn": 55,
              "endLine": 215,
              "endColumn": 80,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "BufferedWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 19,
              "variableName": "new PrintWriter(new BufferedWriter(",
              "startLine": 214,
              "startColumn": 39,
              "endLine": 215,
              "endColumn": 81,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "PrintWriter",
              "code": "            // Non-interactive mode.\n            waitUntilCaughtUp();\n            Commands commands = new Commands(false);\n            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);"
            },
            {
              "step": 20,
              "variableName": "writer",
              "startLine": 217,
              "startColumn": 47,
              "endLine": 217,
              "endColumn": 53,
              "uri": "kafka-4.0.0/shell/src/main/java/org/apache/kafka/shell/MetadataShell.java",
              "type": "",
              "code": "            try (PrintWriter writer = new PrintWriter(new BufferedWriter(\n                    new OutputStreamWriter(System.out, StandardCharsets.UTF_8)))) {\n                Commands.Handler handler = commands.parseCommand(args);\n                handler.run(Optional.empty(), writer, state);\n                writer.flush();\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.16981780529022217
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "LeaderElectionCommand.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "startLine": 323,
              "startColumn": 21,
              "endLine": 323,
              "endColumn": 25,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "\n        String jsonString = stringifyTopicPartitions(new HashSet<>(partitions));\n\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }"
            },
            {
              "step": 1,
              "variableName": "file",
              "startLine": 325,
              "startColumn": 16,
              "endLine": 325,
              "endColumn": 20,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 2,
              "variableName": "file.toPath()",
              "startLine": 325,
              "startColumn": 16,
              "endLine": 325,
              "endColumn": 29,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 3,
              "variableName": "tempTopicPartitionFile(singletonList(topicPartition))",
              "startLine": 196,
              "startColumn": 39,
              "endLine": 196,
              "endColumn": 92,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            cluster.startBroker(broker3);\n            TestUtils.waitForOnlineBroker(client, broker3);\n\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),"
            },
            {
              "step": 4,
              "variableName": "topicPartitionPath",
              "startLine": 201,
              "startColumn": 44,
              "endLine": 201,
              "endColumn": 62,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 5,
              "variableName": "topicPartitionPath.toString()",
              "startLine": 201,
              "startColumn": 44,
              "endLine": 201,
              "endColumn": 73,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 6,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 202,
              "endColumn": 14,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()"
            },
            {
              "step": 7,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 8,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No",
          "probability": 0.9949452877044678
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "startLine": 325,
              "startColumn": 16,
              "endLine": 325,
              "endColumn": 20,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 1,
              "variableName": "file.toPath()",
              "startLine": 325,
              "startColumn": 16,
              "endLine": 325,
              "endColumn": 29,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "\n        Files.write(file.toPath(), jsonString.getBytes(StandardCharsets.UTF_8));\n\n        return file.toPath();\n    }\n\n    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {"
            },
            {
              "step": 2,
              "variableName": "tempTopicPartitionFile(singletonList(topicPartition))",
              "startLine": 196,
              "startColumn": 39,
              "endLine": 196,
              "endColumn": 92,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            cluster.startBroker(broker3);\n            TestUtils.waitForOnlineBroker(client, broker3);\n\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),"
            },
            {
              "step": 3,
              "variableName": "topicPartitionPath",
              "startLine": 201,
              "startColumn": 44,
              "endLine": 201,
              "endColumn": 62,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 4,
              "variableName": "topicPartitionPath.toString()",
              "startLine": 201,
              "startColumn": 44,
              "endLine": 201,
              "endColumn": 73,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()\n            ));\n\n            TestUtils.assertLeader(client, topicPartition, broker3);"
            },
            {
              "step": 5,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 198,
              "startColumn": 29,
              "endLine": 202,
              "endColumn": 14,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "\n            Path topicPartitionPath = tempTopicPartitionFile(singletonList(topicPartition));\n\n            assertEquals(0, LeaderElectionCommand.mainNoExit(\n                    \"--bootstrap-server\", cluster.bootstrapServers(),\n                    \"--election-type\", \"unclean\",\n                    \"--path-to-json-file\", topicPartitionPath.toString()"
            },
            {
              "step": 6,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 7,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No",
          "probability": 0.656041145324707
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "startLine": 331,
              "startColumn": 21,
              "endLine": 331,
              "endColumn": 25,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "    private Path tempAdminConfig(String defaultApiTimeoutMs, String requestTimeoutMs) throws Exception {\n        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n"
            },
            {
              "step": 1,
              "variableName": "file",
              "startLine": 332,
              "startColumn": 16,
              "endLine": 332,
              "endColumn": 20,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 2,
              "variableName": "file.toPath()",
              "startLine": 332,
              "startColumn": 16,
              "endLine": 332,
              "endColumn": 29,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 3,
              "variableName": "tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs)",
              "startLine": 115,
              "startColumn": 32,
              "endLine": 115,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "    public void testAdminConfigCustomTimeouts() throws Exception {\n        String defaultApiTimeoutMs = String.valueOf(110000);\n        String requestTimeoutMs = String.valueOf(55000);\n        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit("
            },
            {
              "step": 4,
              "variableName": "adminConfigPath",
              "startLine": 121,
              "startColumn": 35,
              "endLine": 121,
              "endColumn": 50,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 5,
              "variableName": "adminConfigPath.toString()",
              "startLine": 121,
              "startColumn": 35,
              "endLine": 121,
              "endColumn": 61,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 6,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 118,
              "startColumn": 29,
              "endLine": 122,
              "endColumn": 14,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()"
            },
            {
              "step": 7,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 8,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No",
          "probability": 0.9919049143791199
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "file",
              "startLine": 332,
              "startColumn": 16,
              "endLine": 332,
              "endColumn": 20,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "File",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 1,
              "variableName": "file.toPath()",
              "startLine": 332,
              "startColumn": 16,
              "endLine": 332,
              "endColumn": 29,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "        String content = \"default.api.timeout.ms=\" + defaultApiTimeoutMs + \"\\nrequest.timeout.ms=\" + requestTimeoutMs;\n        java.io.File file = TestUtils.tempFile(\"admin-config\", \".properties\");\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file.toPath();\n    }\n\n    private String stringifyTopicPartitions(Set<TopicPartition> topicPartitions) {"
            },
            {
              "step": 2,
              "variableName": "tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs)",
              "startLine": 115,
              "startColumn": 32,
              "endLine": 115,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "    public void testAdminConfigCustomTimeouts() throws Exception {\n        String defaultApiTimeoutMs = String.valueOf(110000);\n        String requestTimeoutMs = String.valueOf(55000);\n        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit("
            },
            {
              "step": 3,
              "variableName": "adminConfigPath",
              "startLine": 121,
              "startColumn": 35,
              "endLine": 121,
              "endColumn": 50,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "Path",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 4,
              "variableName": "adminConfigPath.toString()",
              "startLine": 121,
              "startColumn": 35,
              "endLine": 121,
              "endColumn": 61,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String",
              "code": "            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()\n            ));\n\n            ArgumentCaptor<Properties> argumentCaptor = ArgumentCaptor.forClass(Properties.class);"
            },
            {
              "step": 5,
              "variableName": "new ..[] { .. } : String[] [[]] : String",
              "startLine": 118,
              "startColumn": 29,
              "endLine": 122,
              "endColumn": 14,
              "uri": "kafka-4.0.0/tools/src/test/java/org/apache/kafka/tools/LeaderElectionCommandTest.java",
              "type": "String[] [[]] : String",
              "code": "        Path adminConfigPath = tempAdminConfig(defaultApiTimeoutMs, requestTimeoutMs);\n\n        try (final MockedStatic<Admin> mockedAdmin = Mockito.mockStatic(Admin.class)) {\n            assertEquals(1, LeaderElectionCommand.mainNoExit(\n                \"--bootstrap-server\", cluster.bootstrapServers(),\n                \"--election-type\", \"unclean\", \"--all-topic-partitions\",\n                \"--admin.config\", adminConfigPath.toString()"
            },
            {
              "step": 6,
              "variableName": "String... args",
              "startLine": 72,
              "startColumn": 27,
              "endLine": 72,
              "endColumn": 41,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "String[] [[]] : String",
              "code": "        Exit.exit(mainNoExit(args));\n    }\n\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;"
            },
            {
              "step": 7,
              "variableName": "args",
              "startLine": 74,
              "startColumn": 43,
              "endLine": 74,
              "endColumn": 47,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/LeaderElectionCommand.java",
              "type": "",
              "code": "\n    static int mainNoExit(String... args) {\n        try {\n            run(Duration.ofMillis(30000), args);\n            return 0;\n        } catch (Throwable e) {\n            System.err.println(e.getMessage());"
            }
          ],
          "label": "No",
          "probability": 0.996533989906311
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "Agent.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "startLine": 63,
              "startColumn": 22,
              "endLine": 63,
              "endColumn": 25,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "Object",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "\"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\"",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 75,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic())",
              "startLine": 172,
              "startColumn": 38,
              "endLine": 172,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 172,
              "startColumn": 25,
              "endLine": 172,
              "endColumn": 31,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 118,
              "startColumn": 85,
              "endLine": 118,
              "endColumn": 91,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                    0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n            } catch (Throwable t) {\n                if (skipMessageOnError) {\n                    LOG.error(\"Error processing message, skipping this message: \", t);"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 101,
              "startColumn": 96,
              "endLine": 101,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output, boolean skipMessageOnError) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;\n            try {"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 77,
              "startColumn": 76,
              "endLine": 77,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper, opts);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.skipMessageOnError());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 268,
              "startColumn": 49,
              "endLine": 268,
              "endColumn": 59,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/agent/Agent.java",
              "type": "",
              "code": "                Exit.exit(1);\n            }\n            TaskSpec effectiveSpec = agent.rebaseTaskSpecTime(spec);\n            Exit.exit(agent.exec(effectiveSpec, System.out) ? 0 : 1);\n        }\n        agent.waitForShutdown();\n    }"
            }
          ],
          "label": "No",
          "probability": 0.894740104675293
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "key",
              "startLine": 63,
              "startColumn": 22,
              "endLine": 63,
              "endColumn": 25,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "Object",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "\"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\"",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 75,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/Windowed.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"[\" + key + \"@\" + window.start() + \"/\" + window.end() + \"]\";\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic())",
              "startLine": 182,
              "startColumn": 30,
              "endLine": 182,
              "endColumn": 120,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 182,
              "startColumn": 17,
              "endLine": 182,
              "endColumn": 23,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 114,
              "startColumn": 89,
              "endLine": 114,
              "endColumn": 95,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                        0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n                consumer.acknowledge(msg, acknowledgeType);\n            } catch (Throwable t) {\n                if (rejectMessageOnError) {"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 96,
              "startColumn": 96,
              "endLine": 96,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output,\n                        boolean rejectMessageOnError, AcknowledgeType acknowledgeType) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 75,
              "startColumn": 76,
              "endLine": 75,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.rejectMessageOnError(), opts.acknowledgeType());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 268,
              "startColumn": 49,
              "endLine": 268,
              "endColumn": 59,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/agent/Agent.java",
              "type": "",
              "code": "                Exit.exit(1);\n            }\n            TaskSpec effectiveSpec = agent.rebaseTaskSpecTime(spec);\n            Exit.exit(agent.exec(effectiveSpec, System.out) ? 0 : 1);\n        }\n        agent.waitForShutdown();\n    }"
            }
          ],
          "label": "No",
          "probability": 0.894740104675293
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "primaryKey",
              "startLine": 116,
              "startColumn": 31,
              "endLine": 116,
              "endColumn": 41,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "Object",
              "code": "    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +\n            \", hash=\" + Arrays.toString(hash) +\n            \", primaryPartition=\" + primaryPartition +"
            },
            {
              "step": 1,
              "variableName": "",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 120,
              "endColumn": 16,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic())",
              "startLine": 172,
              "startColumn": 38,
              "endLine": 172,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 172,
              "startColumn": 25,
              "endLine": 172,
              "endColumn": 31,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "                    while (headersIt.hasNext()) {\n                        Header header = headersIt.next();\n                        output.print(header.key() + \":\");\n                        output.write(deserialize(consumerRecord, headersDeserializer, header.value(), consumerRecord.topic()));\n                        if (headersIt.hasNext()) {\n                            output.write(headersSeparator);\n                        }"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 118,
              "startColumn": 85,
              "endLine": 118,
              "endColumn": 91,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                    0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n            } catch (Throwable t) {\n                if (skipMessageOnError) {\n                    LOG.error(\"Error processing message, skipping this message: \", t);"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 101,
              "startColumn": 96,
              "endLine": 101,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output, boolean skipMessageOnError) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;\n            try {"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 77,
              "startColumn": 76,
              "endLine": 77,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper, opts);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.skipMessageOnError());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 268,
              "startColumn": 49,
              "endLine": 268,
              "endColumn": 59,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/agent/Agent.java",
              "type": "",
              "code": "                Exit.exit(1);\n            }\n            TaskSpec effectiveSpec = agent.rebaseTaskSpecTime(spec);\n            Exit.exit(agent.exec(effectiveSpec, System.out) ? 0 : 1);\n        }\n        agent.waitForShutdown();\n    }"
            }
          ],
          "label": "No",
          "probability": 0.05713321268558502
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "primaryKey",
              "startLine": 116,
              "startColumn": 31,
              "endLine": 116,
              "endColumn": 41,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "Object",
              "code": "    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +\n            \", hash=\" + Arrays.toString(hash) +\n            \", primaryPartition=\" + primaryPartition +"
            },
            {
              "step": 1,
              "variableName": "",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 120,
              "endColumn": 16,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionWrapper.java",
              "type": "String",
              "code": "\n    @Override\n    public String toString() {\n        return \"SubscriptionWrapper{\" +\n            \"version=\" + version +\n            \", primaryKey=\" + primaryKey +\n            \", instruction=\" + instruction +"
            },
            {
              "step": 2,
              "variableName": "value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()",
              "startLine": 125,
              "startColumn": 51,
              "endLine": 125,
              "endColumn": 126,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 205,
              "startColumn": 29,
              "endLine": 205,
              "endColumn": 39,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "        return newConfigs;\n    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 19,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "String",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 206,
              "startColumn": 16,
              "endLine": 206,
              "endColumn": 52,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    private byte[] utfBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    private byte[] getByteProperty(Map<String, ?> configs, String key) {"
            },
            {
              "step": 6,
              "variableName": "utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())",
              "startLine": 125,
              "startColumn": 42,
              "endLine": 125,
              "endColumn": 127,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString()))",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 128,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "Optional [<element>] : byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes)",
              "startLine": 125,
              "startColumn": 16,
              "endLine": 125,
              "endColumn": 149,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "\n    private byte[] deserialize(ConsumerRecord<byte[], byte[]> consumerRecord, Optional<Deserializer<?>> deserializer, byte[] sourceBytes, String topic) {\n        byte[] nonNullBytes = sourceBytes != null ? sourceBytes : nullLiteral;\n        return deserializer.map(value -> utfBytes(value.deserialize(topic, consumerRecord.headers(), nonNullBytes).toString())).orElse(nonNullBytes);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic())",
              "startLine": 182,
              "startColumn": 30,
              "endLine": 182,
              "endColumn": 120,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "byte[]",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 10,
              "variableName": "output",
              "startLine": 182,
              "startColumn": 17,
              "endLine": 182,
              "endColumn": 23,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "            }\n\n            if (printKey) {\n                output.write(deserialize(consumerRecord, keyDeserializer, consumerRecord.key(), consumerRecord.topic()));\n                writeSeparator(output, printValue);\n            }\n"
            },
            {
              "step": 11,
              "variableName": "PrintStream output",
              "startLine": 129,
              "startColumn": 72,
              "endLine": 129,
              "endColumn": 90,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/DefaultMessageFormatter.java",
              "type": "PrintStream",
              "code": "    }\n\n    @Override\n    public void writeTo(ConsumerRecord<byte[], byte[]> consumerRecord, PrintStream output) {\n        try {\n            if (printTimestamp) {\n                if (consumerRecord.timestampType() != TimestampType.NO_TIMESTAMP_TYPE) {"
            },
            {
              "step": 12,
              "variableName": "output",
              "startLine": 114,
              "startColumn": 89,
              "endLine": 114,
              "endColumn": 95,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "            messageCount += 1;\n            try {\n                formatter.writeTo(new ConsumerRecord<>(msg.topic(), msg.partition(), msg.offset(), msg.timestamp(), msg.timestampType(),\n                        0, 0, msg.key(), msg.value(), msg.headers(), Optional.empty()), output);\n                consumer.acknowledge(msg, acknowledgeType);\n            } catch (Throwable t) {\n                if (rejectMessageOnError) {"
            },
            {
              "step": 13,
              "variableName": "PrintStream output",
              "startLine": 96,
              "startColumn": 96,
              "endLine": 96,
              "endColumn": 114,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        });\n    }\n\n    static void process(int maxMessages, MessageFormatter formatter, ConsumerWrapper consumer, PrintStream output,\n                        boolean rejectMessageOnError, AcknowledgeType acknowledgeType) {\n        while (messageCount < maxMessages || maxMessages == -1) {\n            ConsumerRecord<byte[], byte[]> msg;"
            },
            {
              "step": 14,
              "variableName": "System.out",
              "startLine": 75,
              "startColumn": 76,
              "endLine": 75,
              "endColumn": 86,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/consumer/ConsoleShareConsumer.java",
              "type": "PrintStream",
              "code": "        addShutdownHook(consumerWrapper);\n\n        try {\n            process(opts.maxMessages(), opts.formatter(), consumerWrapper, System.out, opts.rejectMessageOnError(), opts.acknowledgeType());\n        } finally {\n            consumerWrapper.cleanup();\n            opts.formatter().close();"
            },
            {
              "step": 16,
              "variableName": "System.out",
              "startLine": 268,
              "startColumn": 49,
              "endLine": 268,
              "endColumn": 59,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/agent/Agent.java",
              "type": "",
              "code": "                Exit.exit(1);\n            }\n            TaskSpec effectiveSpec = agent.rebaseTaskSpecTime(spec);\n            Exit.exit(agent.exec(effectiveSpec, System.out) ? 0 : 1);\n        }\n        agent.waitForShutdown();\n    }"
            }
          ],
          "label": "No",
          "probability": 0.05713321268558502
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "BasicPlatform.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 70,
              "startColumn": 52,
              "endLine": 70,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "                if (nodeSpec.latencyMs() < 0 || nodeSpec.rateLimitKbit() < 0) {\n                    throw new RuntimeException(\"Expected non-negative values for latencyMs and rateLimitKbit, but got \" + nodeSpec);\n                } else {\n                    enableTrafficControl(platform, device, nodeSpec.latencyMs(), nodeSpec.rateLimitKbit());\n                }\n            }\n        }"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 108,
              "startColumn": 58,
              "endLine": 108,
              "endColumn": 78,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Constructs the appropriate \"tc\" commands to apply latency and rate limiting, if they are non zero.\n     */\n    private void enableTrafficControl(Platform platform, String networkDevice, int delayMs, int rateLimitKbps) throws IOException {\n        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 112,
              "startColumn": 25,
              "endLine": 112,
              "endColumn": 38,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 3,
              "variableName": "String networkDevice",
              "startLine": 135,
              "startColumn": 30,
              "endLine": 135,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "networkDevice",
              "startLine": 136,
              "startColumn": 56,
              "endLine": 136,
              "endColumn": 69,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Object[] [[]] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\")",
              "startLine": 136,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 95,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "Stream [<element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 8,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 9,
              "variableName": "delay",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 45,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "ArrayList [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 10,
              "variableName": "delay",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 45,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 11,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 12,
              "variableName": "consumer",
              "startLine": 136,
              "startColumn": 104,
              "endLine": 136,
              "endColumn": 112,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "Consumer<String> consumer",
              "startLine": 135,
              "startColumn": 52,
              "endLine": 135,
              "endColumn": 77,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "    /**\n     * Construct the first part of a \"tc\" command to define a qdisc root handler for the given network interface\n     */\n    private void rootHandler(String networkDevice, Consumer<String> consumer) {\n        Stream.of(\"sudo\", \"tc\", \"qdisc\", \"add\", \"dev\", networkDevice, \"root\", \"handle\", \"1:0\").forEach(consumer);\n    }\n"
            },
            {
              "step": 14,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": ":... [post update] : new Consumer<String>(...) { ... } [List<String> delay, <element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 15,
              "variableName": "delay::add",
              "startLine": 112,
              "startColumn": 40,
              "endLine": 112,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "List [<element>] : String",
              "code": "        if (delayMs > 0) {\n            int deviationMs = Math.max(1, (int) Math.sqrt(delayMs));\n            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n"
            },
            {
              "step": 16,
              "variableName": "delay",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 38,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "List [<element>] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 17,
              "variableName": "delay.toArray(new String[0])",
              "startLine": 114,
              "startColumn": 33,
              "endLine": 114,
              "endColumn": 61,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "            List<String> delay = new ArrayList<>();\n            rootHandler(networkDevice, delay::add);\n            netemDelay(delayMs, deviationMs, delay::add);\n            platform.runCommand(delay.toArray(new String[0]));\n\n            if (rateLimitKbps > 0) {\n                List<String> rate = new ArrayList<>();"
            },
            {
              "step": 18,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 20,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 21,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No",
          "probability": 0.9803795218467712
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 1,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 2,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 3,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 4,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 5,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 7,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 8,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No",
          "probability": 0.053614478558301926
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 96,
              "startColumn": 21,
              "endLine": 96,
              "endColumn": 28,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        if (nodeSpec.networkDevice().isEmpty()) {\n            for (NetworkInterface networkInterface : Collections.list(NetworkInterface.getNetworkInterfaces())) {\n                if (!networkInterface.isLoopback()) {\n                    devices.add(networkInterface.getName());\n                }\n            }\n        } else {"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No",
          "probability": 0.008902434259653091
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "devices",
              "startLine": 100,
              "startColumn": 13,
              "endLine": 100,
              "endColumn": 20,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "                }\n            }\n        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }"
            },
            {
              "step": 1,
              "variableName": "devices",
              "startLine": 102,
              "startColumn": 16,
              "endLine": 102,
              "endColumn": 23,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        } else {\n            devices.add(nodeSpec.networkDevice());\n        }\n        return devices;\n    }\n\n    /**"
            },
            {
              "step": 2,
              "variableName": "devicesForSpec(nodeSpec)",
              "startLine": 84,
              "startColumn": 34,
              "endLine": 84,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "HashSet",
              "code": "        Node curNode = platform.curNode();\n        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }"
            },
            {
              "step": 3,
              "variableName": "device",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "        DegradedNetworkFaultSpec.NodeDegradeSpec nodeSpec = nodeSpecs.get(curNode.name());\n        if (nodeSpec != null) {\n            for (String device : devicesForSpec(nodeSpec)) {\n                disableTrafficControl(platform, device);\n            }\n        }\n        this.status.update(new TextNode(\"disabled traffic control \" + id));"
            },
            {
              "step": 4,
              "variableName": "String networkDevice",
              "startLine": 170,
              "startColumn": 59,
              "endLine": 170,
              "endColumn": 79,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     * Delete any previously defined qdisc for the given network interface.\n     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });"
            },
            {
              "step": 5,
              "variableName": "networkDevice",
              "startLine": 172,
              "startColumn": 50,
              "endLine": 172,
              "endColumn": 63,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String",
              "code": "     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }\n}"
            },
            {
              "step": 6,
              "variableName": "{...} : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 7,
              "variableName": "new String[] : String[] [[]] : String",
              "startLine": 171,
              "startColumn": 29,
              "endLine": 173,
              "endColumn": 10,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/fault/DegradedNetworkFaultWorker.java",
              "type": "String[] [[]] : String",
              "code": "     * @throws IOException\n     */\n    private void disableTrafficControl(Platform platform, String networkDevice) throws IOException {\n        platform.runCommand(new String[] {\n            \"sudo\", \"tc\", \"qdisc\", \"del\", \"dev\", networkDevice, \"root\"\n        });\n    }"
            },
            {
              "step": 8,
              "variableName": "String[] command",
              "startLine": 113,
              "startColumn": 30,
              "endLine": 113,
              "endColumn": 46,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "    }\n\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "command",
              "startLine": 114,
              "startColumn": 43,
              "endLine": 114,
              "endColumn": 50,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    @Override\n    public String runCommand(String[] command) throws IOException {\n        return commandRunner.run(curNode, command);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "String[] command",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 57,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "String[] [[]] : String",
              "code": "\n    public static class ShellCommandRunner implements CommandRunner {\n        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);"
            },
            {
              "step": 11,
              "variableName": "command",
              "startLine": 52,
              "startColumn": 51,
              "endLine": 52,
              "endColumn": 58,
              "uri": "kafka-4.0.0/trogdor/src/main/java/org/apache/kafka/trogdor/basic/BasicPlatform.java",
              "type": "",
              "code": "        @Override\n        public String run(Node curNode, String[] command) throws IOException {\n            try {\n                String result = Shell.execCommand(command);\n                log.info(\"RUN: {}. RESULT: [{}]\", String.join(\" \", command), result);\n                return result;\n            } catch (RuntimeException | IOException e) {"
            }
          ],
          "label": "No",
          "probability": 0.04013896733522415
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 5,
      "fileName": "DefaultSslEngineFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 106,
              "startColumn": 138,
              "endLine": 106,
              "endColumn": 146,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "startLine": 105,
              "startColumn": 9,
              "endLine": 105,
              "endColumn": 16,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "startLine": 107,
              "startColumn": 16,
              "endLine": 107,
              "endColumn": 23,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "startLine": 111,
              "startColumn": 50,
              "endLine": 111,
              "endColumn": 134,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 38,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 39,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 42,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 43,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 44,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 46,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 47,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 48,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 49,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 50,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 51,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 53,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 54,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 55,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 56,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 57,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 58,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 59,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 60,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 61,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 62,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 63,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 64,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 69,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 71,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 72,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 74,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 75,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 76,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 79,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 80,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 81,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 83,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 85,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 86,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 87,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 88,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 89,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 90,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 91,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 92,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 93,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 94,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 95,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 96,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 97,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 98,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 99,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 100,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 101,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 102,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 103,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 104,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 105,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 106,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 107,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 108,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 109,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 110,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 111,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 112,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 113,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 114,
              "variableName": "log.debug(\"Created SSL context with keystore {}, truststore {}, p",
              "startLine": 262,
              "startColumn": 13,
              "endLine": 263,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {"
            }
          ],
          "label": "No",
          "probability": 0.9977543354034424
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD",
              "startLine": 211,
              "startColumn": 50,
              "endLine": 211,
              "endColumn": 86,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )\n            );\n        }"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Object[] [[]] : String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 207,
              "startColumn": 13,
              "endLine": 207,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 5,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 10,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 11,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 13,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 15,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 16,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 17,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 18,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 19,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 20,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 21,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 23,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 24,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 25,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 26,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 27,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 28,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 29,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 30,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 31,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 32,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 33,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 36,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 37,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 38,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 39,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 40,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 41,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 42,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 43,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 44,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 46,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 48,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 49,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 51,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 53,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 54,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 55,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 56,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 57,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 58,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 59,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 60,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 61,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 62,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 63,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 64,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 65,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 70,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 71,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 72,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 73,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 74,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 75,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 76,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 77,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 78,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 79,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 80,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 81,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 82,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 83,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 84,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 85,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 86,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 87,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 88,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 89,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 90,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 91,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 92,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 93,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 94,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 95,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 96,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 97,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 98,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 99,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 100,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 101,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 102,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 103,
              "variableName": "log.debug(\"Created SSL context with keystore {}, truststore {}, p",
              "startLine": 262,
              "startColumn": 13,
              "endLine": 263,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {"
            }
          ],
          "label": "No",
          "probability": 0.9972103834152222
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 392,
              "startColumn": 46,
              "endLine": 392,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 388,
              "startColumn": 46,
              "endLine": 394,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 395,
              "startColumn": 50,
              "endLine": 395,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 7,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 8,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 9,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 11,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 12,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 13,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 15,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 23,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 24,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 25,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 26,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 33,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 35,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 36,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 38,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 39,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 40,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 42,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 43,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 46,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 48,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 61,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 62,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 63,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 64,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 69,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 72,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 73,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 74,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 75,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 76,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 77,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 79,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 80,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 81,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 84,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 85,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 86,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 87,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 88,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 90,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 91,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 92,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 93,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 94,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 95,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 96,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 97,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 98,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 99,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 100,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 101,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 102,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 103,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 104,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 105,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 106,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 107,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 108,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 109,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 110,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 111,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 112,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 113,
              "variableName": "log.debug(\"Created SSL context with keystore {}, truststore {}, p",
              "startLine": 262,
              "startColumn": 13,
              "endLine": 263,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {"
            }
          ],
          "label": "No",
          "probability": 0.7294015884399414
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 484,
              "startColumn": 46,
              "endLine": 484,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 480,
              "startColumn": 46,
              "endLine": 486,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 487,
              "startColumn": 50,
              "endLine": 487,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY, new DescribeAclsOptions().timeoutMs(5000)).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 9,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 10,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 11,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 12,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 13,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 14,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 19,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 23,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 24,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 25,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 26,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 27,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 28,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 31,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 32,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 34,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 35,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 36,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 37,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 38,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 39,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 41,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 42,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 43,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 44,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 46,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 47,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 48,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 51,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 59,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 61,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 62,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 63,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 64,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 66,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 69,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 72,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 74,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 75,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 76,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 78,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 79,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 80,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 84,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 85,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 86,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 87,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 88,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 90,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 91,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 92,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 93,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 94,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 95,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 96,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 97,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 98,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 99,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 100,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 101,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 102,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 103,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 104,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 105,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 106,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 107,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 108,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 109,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 110,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 111,
              "variableName": "log.debug(\"Created SSL context with keystore {}, truststore {}, p",
              "startLine": 262,
              "startColumn": 13,
              "endLine": 263,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {"
            }
          ],
          "label": "No",
          "probability": 0.8417481184005737
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "AbstractConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG",
              "startLine": 137,
              "startColumn": 25,
              "endLine": 137,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_TRUSTSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYMANGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_KEYMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTMANAGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 34,
              "endLine": 133,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.value>, name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 21,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 23,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 25,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 27,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 163,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 32,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 33,
              "variableName": "cd",
              "startLine": 302,
              "startColumn": 44,
              "endLine": 302,
              "endColumn": 46,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/OAuthCompatibilityTool.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "            // This here is going to fill in all the defaults for the values we don't specify...\n            ConfigDef cd = new ConfigDef();\n            SaslConfigs.addClientSaslSupport(cd);\n            SslConfigs.addClientSslSupport(cd);\n            AbstractConfig config = new AbstractConfig(cd, m);\n            return config.values();\n        }"
            },
            {
              "step": 34,
              "variableName": "cd",
              "startLine": 303,
              "startColumn": 56,
              "endLine": 303,
              "endColumn": 58,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/OAuthCompatibilityTool.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "            ConfigDef cd = new ConfigDef();\n            SaslConfigs.addClientSaslSupport(cd);\n            SslConfigs.addClientSslSupport(cd);\n            AbstractConfig config = new AbstractConfig(cd, m);\n            return config.values();\n        }\n"
            },
            {
              "step": 35,
              "variableName": "ConfigDef definition",
              "startLine": 132,
              "startColumn": 27,
              "endLine": 132,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "definition",
              "startLine": 133,
              "startColumn": 14,
              "endLine": 133,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 37,
              "variableName": "ConfigDef definition",
              "startLine": 111,
              "startColumn": 27,
              "endLine": 111,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 38,
              "variableName": "definition",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 39,
              "variableName": "parse",
              "startLine": 514,
              "startColumn": 32,
              "endLine": 514,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 40,
              "variableName": "configKeys",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 41,
              "variableName": "configKeys",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.value>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 42,
              "variableName": "configKeys.values()",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Collection [<element>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 43,
              "variableName": "key",
              "startLine": 524,
              "startColumn": 24,
              "endLine": 524,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 44,
              "variableName": "key.name",
              "startLine": 524,
              "startColumn": 24,
              "endLine": 524,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 46,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 47,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 48,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 49,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 50,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 52,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 53,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 54,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 55,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 56,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.key>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 57,
              "variableName": "entry.getKey()",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 36,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 58,
              "variableName": "b",
              "startLine": 366,
              "startColumn": 13,
              "endLine": 366,
              "endColumn": 14,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 59,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 60,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes",
          "probability": 0.9409976005554199
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_KEY_PASSWORD_CONFIG",
              "startLine": 131,
              "startColumn": 25,
              "endLine": 131,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_KEYSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_KEY_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_KEY_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 34,
              "endLine": 133,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.value>, name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 21,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 23,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 25,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 27,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOC",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 130,
              "endColumn": 161,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 32,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 33,
              "variableName": "cd",
              "startLine": 302,
              "startColumn": 44,
              "endLine": 302,
              "endColumn": 46,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/OAuthCompatibilityTool.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "            // This here is going to fill in all the defaults for the values we don't specify...\n            ConfigDef cd = new ConfigDef();\n            SaslConfigs.addClientSaslSupport(cd);\n            SslConfigs.addClientSslSupport(cd);\n            AbstractConfig config = new AbstractConfig(cd, m);\n            return config.values();\n        }"
            },
            {
              "step": 34,
              "variableName": "cd",
              "startLine": 303,
              "startColumn": 56,
              "endLine": 303,
              "endColumn": 58,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/OAuthCompatibilityTool.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "            ConfigDef cd = new ConfigDef();\n            SaslConfigs.addClientSaslSupport(cd);\n            SslConfigs.addClientSslSupport(cd);\n            AbstractConfig config = new AbstractConfig(cd, m);\n            return config.values();\n        }\n"
            },
            {
              "step": 35,
              "variableName": "ConfigDef definition",
              "startLine": 132,
              "startColumn": 27,
              "endLine": 132,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "definition",
              "startLine": 133,
              "startColumn": 14,
              "endLine": 133,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 37,
              "variableName": "ConfigDef definition",
              "startLine": 111,
              "startColumn": 27,
              "endLine": 111,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 38,
              "variableName": "definition",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 39,
              "variableName": "parse",
              "startLine": 514,
              "startColumn": 32,
              "endLine": 514,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 40,
              "variableName": "configKeys",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 41,
              "variableName": "configKeys",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.value>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 42,
              "variableName": "configKeys.values()",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Collection [<element>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 43,
              "variableName": "key",
              "startLine": 524,
              "startColumn": 24,
              "endLine": 524,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 44,
              "variableName": "key.name",
              "startLine": 524,
              "startColumn": 24,
              "endLine": 524,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 46,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 47,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 48,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 49,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 50,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 52,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 53,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 54,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 55,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 56,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.key>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 57,
              "variableName": "entry.getKey()",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 36,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 58,
              "variableName": "b",
              "startLine": 366,
              "startColumn": 13,
              "endLine": 366,
              "endColumn": 14,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 59,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 60,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes",
          "probability": 0.961854100227356
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG",
              "startLine": 130,
              "startColumn": 25,
              "endLine": 130,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_KEYSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_KEY_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_KEY_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 34,
              "endLine": 133,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.value>, name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 21,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 23,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 25,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 27,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTO",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 129,
              "endColumn": 160,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 32,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 33,
              "variableName": "cd",
              "startLine": 302,
              "startColumn": 44,
              "endLine": 302,
              "endColumn": 46,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/OAuthCompatibilityTool.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "            // This here is going to fill in all the defaults for the values we don't specify...\n            ConfigDef cd = new ConfigDef();\n            SaslConfigs.addClientSaslSupport(cd);\n            SslConfigs.addClientSslSupport(cd);\n            AbstractConfig config = new AbstractConfig(cd, m);\n            return config.values();\n        }"
            },
            {
              "step": 34,
              "variableName": "cd",
              "startLine": 303,
              "startColumn": 56,
              "endLine": 303,
              "endColumn": 58,
              "uri": "kafka-4.0.0/tools/src/main/java/org/apache/kafka/tools/OAuthCompatibilityTool.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "            ConfigDef cd = new ConfigDef();\n            SaslConfigs.addClientSaslSupport(cd);\n            SslConfigs.addClientSslSupport(cd);\n            AbstractConfig config = new AbstractConfig(cd, m);\n            return config.values();\n        }\n"
            },
            {
              "step": 35,
              "variableName": "ConfigDef definition",
              "startLine": 132,
              "startColumn": 27,
              "endLine": 132,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 36,
              "variableName": "definition",
              "startLine": 133,
              "startColumn": 14,
              "endLine": 133,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 37,
              "variableName": "ConfigDef definition",
              "startLine": 111,
              "startColumn": 27,
              "endLine": 111,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 38,
              "variableName": "definition",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 39,
              "variableName": "parse",
              "startLine": 514,
              "startColumn": 32,
              "endLine": 514,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 40,
              "variableName": "configKeys",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.value>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 41,
              "variableName": "configKeys",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.value>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 42,
              "variableName": "configKeys.values()",
              "startLine": 523,
              "startColumn": 30,
              "endLine": 523,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Collection [<element>, name] : String",
              "code": "        }\n        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }"
            },
            {
              "step": 43,
              "variableName": "key",
              "startLine": 524,
              "startColumn": 24,
              "endLine": 524,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 44,
              "variableName": "key.name",
              "startLine": 524,
              "startColumn": 24,
              "endLine": 524,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 45,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 46,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 47,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 48,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 49,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 50,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 52,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 53,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 54,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 55,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 56,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.key>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 57,
              "variableName": "entry.getKey()",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 36,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 58,
              "variableName": "b",
              "startLine": 366,
              "startColumn": 13,
              "endLine": 366,
              "endColumn": 14,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 59,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 60,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes",
          "probability": 0.9585237503051758
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 106,
              "startColumn": 138,
              "endLine": 106,
              "endColumn": 146,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "startLine": 105,
              "startColumn": 9,
              "endLine": 105,
              "endColumn": 16,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "startLine": 107,
              "startColumn": 16,
              "endLine": 107,
              "endColumn": 23,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "startLine": 111,
              "startColumn": 50,
              "endLine": 111,
              "endColumn": 134,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 38,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 39,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 42,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 43,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 44,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "this.originals",
              "startLine": 115,
              "startColumn": 40,
              "endLine": 115,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 46,
              "variableName": "Map<?, ?> props",
              "startLine": 514,
              "startColumn": 38,
              "endLine": 514,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     * @return Parsed and validated configs. The key will be the config name and the value will be the value parsed into\n     * the appropriate type (int, string, etc).\n     */\n    public Map<String, Object> parse(Map<?, ?> props) {\n        // Check all configurations are defined\n        List<String> undefinedConfigKeys = undefinedDependentConfigs();\n        if (!undefinedConfigKeys.isEmpty()) {"
            },
            {
              "step": 47,
              "variableName": "props",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 48,
              "variableName": "props.get(key.name)",
              "startLine": 524,
              "startColumn": 50,
              "endLine": 524,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 49,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 50,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 51,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 52,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 53,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 54,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 55,
              "variableName": "parseValue(key, props.get(key.name), props.containsKey(key.name))",
              "startLine": 524,
              "startColumn": 34,
              "endLine": 524,
              "endColumn": 99,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 56,
              "variableName": "values",
              "startLine": 524,
              "startColumn": 13,
              "endLine": 524,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // parse all known keys\n        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n"
            },
            {
              "step": 57,
              "variableName": "values",
              "startLine": 525,
              "startColumn": 16,
              "endLine": 525,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> values = new HashMap<>();\n        for (ConfigKey key : configKeys.values())\n            values.put(key.name, parseValue(key, props.get(key.name), props.containsKey(key.name)));\n        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {"
            },
            {
              "step": 58,
              "variableName": "definition.parse(this.originals)",
              "startLine": 115,
              "startColumn": 23,
              "endLine": 115,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 59,
              "variableName": "this",
              "startLine": 115,
              "startColumn": 9,
              "endLine": 115,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);"
            },
            {
              "step": 60,
              "variableName": "this",
              "startLine": 119,
              "startColumn": 9,
              "endLine": 119,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);\n        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }"
            },
            {
              "step": 61,
              "variableName": "logAll()",
              "startLine": 121,
              "startColumn": 13,
              "endLine": 121,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        definition.parse(this.values);\n        this.definition = definition;\n        if (doLog)\n            logAll();\n    }\n\n    /**"
            },
            {
              "step": 62,
              "variableName": "logAll",
              "startLine": 358,
              "startColumn": 18,
              "endLine": 358,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        return nonInternalConfigs;\n    }\n\n    private void logAll() {\n        StringBuilder b = new StringBuilder();\n        b.append(getClass().getSimpleName());\n        b.append(\" values: \");"
            },
            {
              "step": 63,
              "variableName": "this",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [values, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 64,
              "variableName": "this.values",
              "startLine": 364,
              "startColumn": 62,
              "endLine": 364,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 65,
              "variableName": "new TreeMap<>(this.values)",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "TreeMap [<map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 66,
              "variableName": "new TreeMap<>(this.values).entrySet()",
              "startLine": 364,
              "startColumn": 48,
              "endLine": 364,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        b.append(\" values: \");\n        b.append(Utils.NL);\n\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");"
            },
            {
              "step": 67,
              "variableName": "entry",
              "startLine": 366,
              "startColumn": 22,
              "endLine": 366,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "\n        for (Map.Entry<String, Object> entry : new TreeMap<>(this.values).entrySet()) {\n            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 69,
              "variableName": "entry.getValue()",
              "startLine": 368,
              "startColumn": 22,
              "endLine": 368,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 70,
              "variableName": "b",
              "startLine": 368,
              "startColumn": 13,
              "endLine": 368,
              "endColumn": 14,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append('\\t');\n            b.append(entry.getKey());\n            b.append(\" = \");\n            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());"
            },
            {
              "step": 71,
              "variableName": "b",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "StringBuilder",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            },
            {
              "step": 72,
              "variableName": "b.toString()",
              "startLine": 371,
              "startColumn": 18,
              "endLine": 371,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "            b.append(entry.getValue());\n            b.append(Utils.NL);\n        }\n        log.info(b.toString());\n    }\n\n    /**"
            }
          ],
          "label": "Yes",
          "probability": 0.9890068769454956
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "AbstractConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG",
              "startLine": 137,
              "startColumn": 25,
              "endLine": 137,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_TRUSTSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYMANGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_KEYMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTMANAGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "key.name",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 21,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 22,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 24,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 26,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 28,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 163,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 33,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 40,
              "endLine": 491,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return this\n     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n"
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 492,
              "startColumn": 16,
              "endLine": 492,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVE",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 269,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 37,
              "variableName": "withClientSaslSupport",
              "startLine": 499,
              "startColumn": 22,
              "endLine": 499,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * Add standard SASL client configuration options.\n     * @return this\n     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 501,
              "startColumn": 16,
              "endLine": 501,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 39,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVER",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 270,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 40,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 41,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 43,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 44,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 45,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 46,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 47,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 49,
              "variableName": "this",
              "startLine": 134,
              "startColumn": 16,
              "endLine": 134,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 50,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 53,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 54,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 277,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 55,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 57,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 58,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 60,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 61,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 62,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 64,
              "variableName": "this",
              "startLine": 134,
              "startColumn": 16,
              "endLine": 134,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 65,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 67,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 68,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 283,
              "endColumn": 86,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 70,
              "variableName": "CONFIG",
              "startLine": 44,
              "startColumn": 36,
              "endLine": 44,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": " * The AdminClient configuration class, which also contains constants for configuration entry names.\n */\npublic class AdminClientConfig extends AbstractConfig {\n    private static final ConfigDef CONFIG;\n\n    /**\n     * <code>bootstrap.servers</code>"
            },
            {
              "step": 71,
              "variableName": "CONFIG",
              "startLine": 302,
              "startColumn": 16,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    public static Set<String> configNames() {\n        return CONFIG.names();\n    }\n\n    public static ConfigDef configDef() {"
            },
            {
              "step": 72,
              "variableName": "names",
              "startLine": 113,
              "startColumn": 24,
              "endLine": 113,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     *\n     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n"
            },
            {
              "step": 73,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 74,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 75,
              "variableName": "configKeys.keySet()",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 76,
              "variableName": "Collections.unmodifiableSet(configKeys.keySet())",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 77,
              "variableName": "CONFIG.names()",
              "startLine": 302,
              "startColumn": 16,
              "endLine": 302,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    public static Set<String> configNames() {\n        return CONFIG.names();\n    }\n\n    public static ConfigDef configDef() {"
            },
            {
              "step": 78,
              "variableName": "AdminClientConfig.configNames()",
              "startLine": 1884,
              "startColumn": 103,
              "endLine": 1884,
              "endColumn": 134,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public Map<String, Object> getAdminConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames());\n\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());"
            },
            {
              "step": 79,
              "variableName": "final Set<String> configNames",
              "startLine": 1911,
              "startColumn": 58,
              "endLine": 1911,
              "endColumn": 87,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;"
            },
            {
              "step": 80,
              "variableName": "configNames",
              "startLine": 1912,
              "startColumn": 55,
              "endLine": 1912,
              "endColumn": 66,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }"
            },
            {
              "step": 81,
              "variableName": "final Set<String> configNames",
              "startLine": 2078,
              "startColumn": 45,
              "endLine": 2078,
              "endColumn": 74,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "     * @param originals   The original configs to be filtered.\n     * @return client config with any overrides\n     */\n    private Map<String, Object> clientProps(final Set<String> configNames,\n                                            final Map<String, Object> originals) {\n        // iterate all client config names, filter out non-client configs from the original\n        // property map and use the overridden values when they are not specified by users"
            },
            {
              "step": 82,
              "variableName": "configNames",
              "startLine": 2083,
              "startColumn": 39,
              "endLine": 2083,
              "endColumn": 50,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "        // iterate all client config names, filter out non-client configs from the original\n        // property map and use the overridden values when they are not specified by users\n        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }"
            },
            {
              "step": 83,
              "variableName": "configName",
              "startLine": 2084,
              "startColumn": 39,
              "endLine": 2084,
              "endColumn": 49,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "String",
              "code": "        // property map and use the overridden values when they are not specified by users\n        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }"
            },
            {
              "step": 84,
              "variableName": "configName",
              "startLine": 2085,
              "startColumn": 28,
              "endLine": 2085,
              "endColumn": 38,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "String",
              "code": "        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }\n"
            },
            {
              "step": 85,
              "variableName": "parsed",
              "startLine": 2085,
              "startColumn": 17,
              "endLine": 2085,
              "endColumn": 23,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }\n"
            },
            {
              "step": 86,
              "variableName": "parsed",
              "startLine": 2089,
              "startColumn": 16,
              "endLine": 2089,
              "endColumn": 22,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            }\n        }\n\n        return parsed;\n    }\n\n    public static void main(final String[] args) {"
            },
            {
              "step": 87,
              "variableName": "clientProps(configNames, originals())",
              "startLine": 1912,
              "startColumn": 43,
              "endLine": 1912,
              "endColumn": 80,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }"
            },
            {
              "step": 88,
              "variableName": "props",
              "startLine": 1914,
              "startColumn": 16,
              "endLine": 1914,
              "endColumn": 21,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames())",
              "startLine": 1884,
              "startColumn": 57,
              "endLine": 1884,
              "endColumn": 135,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public Map<String, Object> getAdminConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames());\n\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());"
            },
            {
              "step": 90,
              "variableName": "clientProvidedProps",
              "startLine": 1888,
              "startColumn": 22,
              "endLine": 1888,
              "endColumn": 41,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);"
            },
            {
              "step": 91,
              "variableName": "props",
              "startLine": 1888,
              "startColumn": 9,
              "endLine": 1888,
              "endColumn": 14,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);"
            },
            {
              "step": 92,
              "variableName": "props",
              "startLine": 1892,
              "startColumn": 16,
              "endLine": 1892,
              "endColumn": 21,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n        return props;\n    }\n\n    /**"
            },
            {
              "step": 93,
              "variableName": "applicationConfigs.getAdminConfigs(ClientUtils.adminClientId(clientId))",
              "startLine": 966,
              "startColumn": 47,
              "endLine": 966,
              "endColumn": 118,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        // use client id instead of thread client id since this admin client may be shared among threads\n        this.clientSupplier = clientSupplier;\n        adminClient = clientSupplier.getAdmin(applicationConfigs.getAdminConfigs(ClientUtils.adminClientId(clientId)));\n\n        log.info(\"Kafka Streams version: {}\", ClientMetrics.version());\n        log.info(\"Kafka Streams commit ID: {}\", ClientMetrics.commitId());"
            },
            {
              "step": 94,
              "variableName": "final Map<String, Object> config",
              "startLine": 32,
              "startColumn": 27,
              "endLine": 32,
              "endColumn": 59,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/processor/internals/DefaultKafkaClientSupplier.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\npublic class DefaultKafkaClientSupplier implements KafkaClientSupplier {\n    @Override\n    public Admin getAdmin(final Map<String, Object> config) {\n        // create a new client upon each call; but expect this call to be only triggered once so this should be fine\n        return Admin.create(config);\n    }"
            },
            {
              "step": 95,
              "variableName": "config",
              "startLine": 34,
              "startColumn": 29,
              "endLine": 34,
              "endColumn": 35,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/processor/internals/DefaultKafkaClientSupplier.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    @Override\n    public Admin getAdmin(final Map<String, Object> config) {\n        // create a new client upon each call; but expect this call to be only triggered once so this should be fine\n        return Admin.create(config);\n    }\n\n    @Override"
            },
            {
              "step": 96,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 98,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 99,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 100,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 101,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 102,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 103,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 104,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 105,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 106,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 107,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 108,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 109,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 110,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 111,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 112,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 113,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 114,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 115,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 116,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 117,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 118,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 119,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 120,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 121,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 122,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 123,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 124,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 125,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 126,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 127,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 128,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 129,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 130,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 131,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 132,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 133,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 134,
              "variableName": "config",
              "startLine": 564,
              "startColumn": 41,
              "endLine": 564,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "                (hostResolver == null) ? new DefaultHostResolver() : hostResolver,\n                null,\n                clientTelemetryReporter.map(ClientTelemetryReporter::telemetrySender).orElse(null));\n            return new KafkaAdminClient(config, clientId, time, metadataManager, metrics, networkClient,\n                timeoutProcessorFactory, logContext, clientTelemetryReporter);\n        } catch (Throwable exc) {\n            closeQuietly(metrics, \"Metrics\");"
            },
            {
              "step": 135,
              "variableName": "AdminClientConfig config",
              "startLine": 597,
              "startColumn": 30,
              "endLine": 597,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        return new LogContext(\"[AdminClient clientId=\" + clientId + \"] \");\n    }\n\n    private KafkaAdminClient(AdminClientConfig config,\n                             String clientId,\n                             Time time,\n                             AdminMetadataManager metadataManager,"
            },
            {
              "step": 136,
              "variableName": "config",
              "startLine": 634,
              "startColumn": 9,
              "endLine": 634,
              "endColumn": 15,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        this.metadataRecoveryStrategy = MetadataRecoveryStrategy.forName(config.getString(AdminClientConfig.METADATA_RECOVERY_STRATEGY_CONFIG));\n        this.partitionLeaderCache = new HashMap<>();\n        this.adminFetchMetricsManager = new AdminFetchMetricsManager(metrics);\n        config.logUnused();\n        AppInfoParser.registerAppInfo(JMX_PREFIX, clientId, metrics, time.milliseconds());\n        log.debug(\"Kafka admin client initialized\");\n        thread.start();"
            },
            {
              "step": 137,
              "variableName": "logUnused",
              "startLine": 377,
              "startColumn": 17,
              "endLine": 377,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    /**\n     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);"
            },
            {
              "step": 138,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 139,
              "variableName": "unused",
              "startLine": 224,
              "startColumn": 24,
              "endLine": 224,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        return (Class<?>) get(key);\n    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;"
            },
            {
              "step": 140,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 141,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 142,
              "variableName": "originals.keySet()",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 143,
              "variableName": "new HashSet<>(originals.keySet())",
              "startLine": 225,
              "startColumn": 28,
              "endLine": 225,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 144,
              "variableName": "keys",
              "startLine": 227,
              "startColumn": 16,
              "endLine": 227,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }\n\n    public Map<String, Object> originals() {"
            },
            {
              "step": 145,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 146,
              "variableName": "unusedKeys",
              "startLine": 380,
              "startColumn": 87,
              "endLine": 380,
              "endColumn": 97,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.9409976005554199
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_KEY_PASSWORD_CONFIG",
              "startLine": 131,
              "startColumn": 25,
              "endLine": 131,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_KEYSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_KEY_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_KEY_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "key.name",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 21,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 22,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 24,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 26,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 28,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOC",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 130,
              "endColumn": 161,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 33,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 40,
              "endLine": 491,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return this\n     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n"
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 492,
              "startColumn": 16,
              "endLine": 492,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVE",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 269,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 37,
              "variableName": "withClientSaslSupport",
              "startLine": 499,
              "startColumn": 22,
              "endLine": 499,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * Add standard SASL client configuration options.\n     * @return this\n     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 501,
              "startColumn": 16,
              "endLine": 501,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 39,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVER",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 270,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 40,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 41,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 43,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 44,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 45,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 46,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 47,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 49,
              "variableName": "this",
              "startLine": 134,
              "startColumn": 16,
              "endLine": 134,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 50,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 53,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 54,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 277,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 55,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 57,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 58,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 60,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 61,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 62,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 64,
              "variableName": "this",
              "startLine": 134,
              "startColumn": 16,
              "endLine": 134,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 65,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 67,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 68,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 283,
              "endColumn": 86,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 70,
              "variableName": "CONFIG",
              "startLine": 44,
              "startColumn": 36,
              "endLine": 44,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": " * The AdminClient configuration class, which also contains constants for configuration entry names.\n */\npublic class AdminClientConfig extends AbstractConfig {\n    private static final ConfigDef CONFIG;\n\n    /**\n     * <code>bootstrap.servers</code>"
            },
            {
              "step": 71,
              "variableName": "CONFIG",
              "startLine": 302,
              "startColumn": 16,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    public static Set<String> configNames() {\n        return CONFIG.names();\n    }\n\n    public static ConfigDef configDef() {"
            },
            {
              "step": 72,
              "variableName": "names",
              "startLine": 113,
              "startColumn": 24,
              "endLine": 113,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     *\n     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n"
            },
            {
              "step": 73,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 74,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 75,
              "variableName": "configKeys.keySet()",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 76,
              "variableName": "Collections.unmodifiableSet(configKeys.keySet())",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 77,
              "variableName": "CONFIG.names()",
              "startLine": 302,
              "startColumn": 16,
              "endLine": 302,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    public static Set<String> configNames() {\n        return CONFIG.names();\n    }\n\n    public static ConfigDef configDef() {"
            },
            {
              "step": 78,
              "variableName": "AdminClientConfig.configNames()",
              "startLine": 1884,
              "startColumn": 103,
              "endLine": 1884,
              "endColumn": 134,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public Map<String, Object> getAdminConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames());\n\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());"
            },
            {
              "step": 79,
              "variableName": "final Set<String> configNames",
              "startLine": 1911,
              "startColumn": 58,
              "endLine": 1911,
              "endColumn": 87,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;"
            },
            {
              "step": 80,
              "variableName": "configNames",
              "startLine": 1912,
              "startColumn": 55,
              "endLine": 1912,
              "endColumn": 66,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }"
            },
            {
              "step": 81,
              "variableName": "final Set<String> configNames",
              "startLine": 2078,
              "startColumn": 45,
              "endLine": 2078,
              "endColumn": 74,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "     * @param originals   The original configs to be filtered.\n     * @return client config with any overrides\n     */\n    private Map<String, Object> clientProps(final Set<String> configNames,\n                                            final Map<String, Object> originals) {\n        // iterate all client config names, filter out non-client configs from the original\n        // property map and use the overridden values when they are not specified by users"
            },
            {
              "step": 82,
              "variableName": "configNames",
              "startLine": 2083,
              "startColumn": 39,
              "endLine": 2083,
              "endColumn": 50,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "        // iterate all client config names, filter out non-client configs from the original\n        // property map and use the overridden values when they are not specified by users\n        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }"
            },
            {
              "step": 83,
              "variableName": "configName",
              "startLine": 2084,
              "startColumn": 39,
              "endLine": 2084,
              "endColumn": 49,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "String",
              "code": "        // property map and use the overridden values when they are not specified by users\n        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }"
            },
            {
              "step": 84,
              "variableName": "configName",
              "startLine": 2085,
              "startColumn": 28,
              "endLine": 2085,
              "endColumn": 38,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "String",
              "code": "        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }\n"
            },
            {
              "step": 85,
              "variableName": "parsed",
              "startLine": 2085,
              "startColumn": 17,
              "endLine": 2085,
              "endColumn": 23,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }\n"
            },
            {
              "step": 86,
              "variableName": "parsed",
              "startLine": 2089,
              "startColumn": 16,
              "endLine": 2089,
              "endColumn": 22,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            }\n        }\n\n        return parsed;\n    }\n\n    public static void main(final String[] args) {"
            },
            {
              "step": 87,
              "variableName": "clientProps(configNames, originals())",
              "startLine": 1912,
              "startColumn": 43,
              "endLine": 1912,
              "endColumn": 80,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }"
            },
            {
              "step": 88,
              "variableName": "props",
              "startLine": 1914,
              "startColumn": 16,
              "endLine": 1914,
              "endColumn": 21,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames())",
              "startLine": 1884,
              "startColumn": 57,
              "endLine": 1884,
              "endColumn": 135,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public Map<String, Object> getAdminConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames());\n\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());"
            },
            {
              "step": 90,
              "variableName": "clientProvidedProps",
              "startLine": 1888,
              "startColumn": 22,
              "endLine": 1888,
              "endColumn": 41,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);"
            },
            {
              "step": 91,
              "variableName": "props",
              "startLine": 1888,
              "startColumn": 9,
              "endLine": 1888,
              "endColumn": 14,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);"
            },
            {
              "step": 92,
              "variableName": "props",
              "startLine": 1892,
              "startColumn": 16,
              "endLine": 1892,
              "endColumn": 21,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n        return props;\n    }\n\n    /**"
            },
            {
              "step": 93,
              "variableName": "applicationConfigs.getAdminConfigs(ClientUtils.adminClientId(clientId))",
              "startLine": 966,
              "startColumn": 47,
              "endLine": 966,
              "endColumn": 118,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        // use client id instead of thread client id since this admin client may be shared among threads\n        this.clientSupplier = clientSupplier;\n        adminClient = clientSupplier.getAdmin(applicationConfigs.getAdminConfigs(ClientUtils.adminClientId(clientId)));\n\n        log.info(\"Kafka Streams version: {}\", ClientMetrics.version());\n        log.info(\"Kafka Streams commit ID: {}\", ClientMetrics.commitId());"
            },
            {
              "step": 94,
              "variableName": "final Map<String, Object> config",
              "startLine": 32,
              "startColumn": 27,
              "endLine": 32,
              "endColumn": 59,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/processor/internals/DefaultKafkaClientSupplier.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\npublic class DefaultKafkaClientSupplier implements KafkaClientSupplier {\n    @Override\n    public Admin getAdmin(final Map<String, Object> config) {\n        // create a new client upon each call; but expect this call to be only triggered once so this should be fine\n        return Admin.create(config);\n    }"
            },
            {
              "step": 95,
              "variableName": "config",
              "startLine": 34,
              "startColumn": 29,
              "endLine": 34,
              "endColumn": 35,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/processor/internals/DefaultKafkaClientSupplier.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    @Override\n    public Admin getAdmin(final Map<String, Object> config) {\n        // create a new client upon each call; but expect this call to be only triggered once so this should be fine\n        return Admin.create(config);\n    }\n\n    @Override"
            },
            {
              "step": 96,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 98,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 99,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 100,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 101,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 102,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 103,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 104,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 105,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 106,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 107,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 108,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 109,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 110,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 111,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 112,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 113,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 114,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 115,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 116,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 117,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 118,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 119,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 120,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 121,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 122,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 123,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 124,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 125,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 126,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 127,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 128,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 129,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 130,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 131,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 132,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 133,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 134,
              "variableName": "config",
              "startLine": 564,
              "startColumn": 41,
              "endLine": 564,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "                (hostResolver == null) ? new DefaultHostResolver() : hostResolver,\n                null,\n                clientTelemetryReporter.map(ClientTelemetryReporter::telemetrySender).orElse(null));\n            return new KafkaAdminClient(config, clientId, time, metadataManager, metrics, networkClient,\n                timeoutProcessorFactory, logContext, clientTelemetryReporter);\n        } catch (Throwable exc) {\n            closeQuietly(metrics, \"Metrics\");"
            },
            {
              "step": 135,
              "variableName": "AdminClientConfig config",
              "startLine": 597,
              "startColumn": 30,
              "endLine": 597,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        return new LogContext(\"[AdminClient clientId=\" + clientId + \"] \");\n    }\n\n    private KafkaAdminClient(AdminClientConfig config,\n                             String clientId,\n                             Time time,\n                             AdminMetadataManager metadataManager,"
            },
            {
              "step": 136,
              "variableName": "config",
              "startLine": 634,
              "startColumn": 9,
              "endLine": 634,
              "endColumn": 15,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        this.metadataRecoveryStrategy = MetadataRecoveryStrategy.forName(config.getString(AdminClientConfig.METADATA_RECOVERY_STRATEGY_CONFIG));\n        this.partitionLeaderCache = new HashMap<>();\n        this.adminFetchMetricsManager = new AdminFetchMetricsManager(metrics);\n        config.logUnused();\n        AppInfoParser.registerAppInfo(JMX_PREFIX, clientId, metrics, time.milliseconds());\n        log.debug(\"Kafka admin client initialized\");\n        thread.start();"
            },
            {
              "step": 137,
              "variableName": "logUnused",
              "startLine": 377,
              "startColumn": 17,
              "endLine": 377,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    /**\n     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);"
            },
            {
              "step": 138,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 139,
              "variableName": "unused",
              "startLine": 224,
              "startColumn": 24,
              "endLine": 224,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        return (Class<?>) get(key);\n    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;"
            },
            {
              "step": 140,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 141,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 142,
              "variableName": "originals.keySet()",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 143,
              "variableName": "new HashSet<>(originals.keySet())",
              "startLine": 225,
              "startColumn": 28,
              "endLine": 225,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 144,
              "variableName": "keys",
              "startLine": 227,
              "startColumn": 16,
              "endLine": 227,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }\n\n    public Map<String, Object> originals() {"
            },
            {
              "step": 145,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 146,
              "variableName": "unusedKeys",
              "startLine": 380,
              "startColumn": 87,
              "endLine": 380,
              "endColumn": 97,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.961854100227356
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG",
              "startLine": 130,
              "startColumn": 25,
              "endLine": 130,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_KEYSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_KEY_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_KEY_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "key.name",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 21,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 22,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 24,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 26,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 28,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTO",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 129,
              "endColumn": 160,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 33,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 40,
              "endLine": 491,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return this\n     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n"
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 492,
              "startColumn": 16,
              "endLine": 492,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVE",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 269,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 37,
              "variableName": "withClientSaslSupport",
              "startLine": 499,
              "startColumn": 22,
              "endLine": 499,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * Add standard SASL client configuration options.\n     * @return this\n     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 501,
              "startColumn": 16,
              "endLine": 501,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 39,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVER",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 270,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 40,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 41,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 42,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 43,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 44,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 45,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 46,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 47,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 49,
              "variableName": "this",
              "startLine": 134,
              "startColumn": 16,
              "endLine": 134,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 50,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 53,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 54,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 277,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 55,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 57,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 58,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 59,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 60,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 61,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 62,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 63,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 64,
              "variableName": "this",
              "startLine": 134,
              "startColumn": 16,
              "endLine": 134,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 65,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 67,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 68,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,",
              "startLine": 155,
              "startColumn": 18,
              "endLine": 283,
              "endColumn": 86,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    private static final String SECURITY_PROVIDERS_DOC = SecurityConfig.SECURITY_PROVIDERS_DOC;\n\n    static {\n        CONFIG = new ConfigDef().define(BOOTSTRAP_SERVERS_CONFIG,\n                                        Type.LIST,\n                                        \"\",\n                                        Importance.HIGH,"
            },
            {
              "step": 70,
              "variableName": "CONFIG",
              "startLine": 44,
              "startColumn": 36,
              "endLine": 44,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": " * The AdminClient configuration class, which also contains constants for configuration entry names.\n */\npublic class AdminClientConfig extends AbstractConfig {\n    private static final ConfigDef CONFIG;\n\n    /**\n     * <code>bootstrap.servers</code>"
            },
            {
              "step": 71,
              "variableName": "CONFIG",
              "startLine": 302,
              "startColumn": 16,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    public static Set<String> configNames() {\n        return CONFIG.names();\n    }\n\n    public static ConfigDef configDef() {"
            },
            {
              "step": 72,
              "variableName": "names",
              "startLine": 113,
              "startColumn": 24,
              "endLine": 113,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     *\n     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n"
            },
            {
              "step": 73,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 74,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 75,
              "variableName": "configKeys.keySet()",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 76,
              "variableName": "Collections.unmodifiableSet(configKeys.keySet())",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 77,
              "variableName": "CONFIG.names()",
              "startLine": 302,
              "startColumn": 16,
              "endLine": 302,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    public static Set<String> configNames() {\n        return CONFIG.names();\n    }\n\n    public static ConfigDef configDef() {"
            },
            {
              "step": 78,
              "variableName": "AdminClientConfig.configNames()",
              "startLine": 1884,
              "startColumn": 103,
              "endLine": 1884,
              "endColumn": 134,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public Map<String, Object> getAdminConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames());\n\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());"
            },
            {
              "step": 79,
              "variableName": "final Set<String> configNames",
              "startLine": 1911,
              "startColumn": 58,
              "endLine": 1911,
              "endColumn": 87,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;"
            },
            {
              "step": 80,
              "variableName": "configNames",
              "startLine": 1912,
              "startColumn": 55,
              "endLine": 1912,
              "endColumn": 66,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }"
            },
            {
              "step": 81,
              "variableName": "final Set<String> configNames",
              "startLine": 2078,
              "startColumn": 45,
              "endLine": 2078,
              "endColumn": 74,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "     * @param originals   The original configs to be filtered.\n     * @return client config with any overrides\n     */\n    private Map<String, Object> clientProps(final Set<String> configNames,\n                                            final Map<String, Object> originals) {\n        // iterate all client config names, filter out non-client configs from the original\n        // property map and use the overridden values when they are not specified by users"
            },
            {
              "step": 82,
              "variableName": "configNames",
              "startLine": 2083,
              "startColumn": 39,
              "endLine": 2083,
              "endColumn": 50,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "Set [<element>] : String",
              "code": "        // iterate all client config names, filter out non-client configs from the original\n        // property map and use the overridden values when they are not specified by users\n        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }"
            },
            {
              "step": 83,
              "variableName": "configName",
              "startLine": 2084,
              "startColumn": 39,
              "endLine": 2084,
              "endColumn": 49,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "String",
              "code": "        // property map and use the overridden values when they are not specified by users\n        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }"
            },
            {
              "step": 84,
              "variableName": "configName",
              "startLine": 2085,
              "startColumn": 28,
              "endLine": 2085,
              "endColumn": 38,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "String",
              "code": "        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }\n"
            },
            {
              "step": 85,
              "variableName": "parsed",
              "startLine": 2085,
              "startColumn": 17,
              "endLine": 2085,
              "endColumn": 23,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        final Map<String, Object> parsed = new HashMap<>();\n        for (final String configName: configNames) {\n            if (originals.containsKey(configName)) {\n                parsed.put(configName, originals.get(configName));\n            }\n        }\n"
            },
            {
              "step": 86,
              "variableName": "parsed",
              "startLine": 2089,
              "startColumn": 16,
              "endLine": 2089,
              "endColumn": 22,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            }\n        }\n\n        return parsed;\n    }\n\n    public static void main(final String[] args) {"
            },
            {
              "step": 87,
              "variableName": "clientProps(configNames, originals())",
              "startLine": 1912,
              "startColumn": 43,
              "endLine": 1912,
              "endColumn": 80,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n    private Map<String, Object> getClientPropsWithPrefix(final String prefix,\n                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }"
            },
            {
              "step": 88,
              "variableName": "props",
              "startLine": 1914,
              "startColumn": 16,
              "endLine": 1914,
              "endColumn": 21,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                                                         final Set<String> configNames) {\n        final Map<String, Object> props = clientProps(configNames, originals());\n        props.putAll(originalsWithPrefix(prefix));\n        return props;\n    }\n\n    /**"
            },
            {
              "step": 89,
              "variableName": "getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames())",
              "startLine": 1884,
              "startColumn": 57,
              "endLine": 1884,
              "endColumn": 135,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public Map<String, Object> getAdminConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames());\n\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());"
            },
            {
              "step": 90,
              "variableName": "clientProvidedProps",
              "startLine": 1888,
              "startColumn": 22,
              "endLine": 1888,
              "endColumn": 41,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);"
            },
            {
              "step": 91,
              "variableName": "props",
              "startLine": 1888,
              "startColumn": 9,
              "endLine": 1888,
              "endColumn": 14,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        final Map<String, Object> props = new HashMap<>(ADMIN_CLIENT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);"
            },
            {
              "step": 92,
              "variableName": "props",
              "startLine": 1892,
              "startColumn": 16,
              "endLine": 1892,
              "endColumn": 21,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        // add client id with stream client id prefix\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n        return props;\n    }\n\n    /**"
            },
            {
              "step": 93,
              "variableName": "applicationConfigs.getAdminConfigs(ClientUtils.adminClientId(clientId))",
              "startLine": 966,
              "startColumn": 47,
              "endLine": 966,
              "endColumn": 118,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        // use client id instead of thread client id since this admin client may be shared among threads\n        this.clientSupplier = clientSupplier;\n        adminClient = clientSupplier.getAdmin(applicationConfigs.getAdminConfigs(ClientUtils.adminClientId(clientId)));\n\n        log.info(\"Kafka Streams version: {}\", ClientMetrics.version());\n        log.info(\"Kafka Streams commit ID: {}\", ClientMetrics.commitId());"
            },
            {
              "step": 94,
              "variableName": "final Map<String, Object> config",
              "startLine": 32,
              "startColumn": 27,
              "endLine": 32,
              "endColumn": 59,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/processor/internals/DefaultKafkaClientSupplier.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\npublic class DefaultKafkaClientSupplier implements KafkaClientSupplier {\n    @Override\n    public Admin getAdmin(final Map<String, Object> config) {\n        // create a new client upon each call; but expect this call to be only triggered once so this should be fine\n        return Admin.create(config);\n    }"
            },
            {
              "step": 95,
              "variableName": "config",
              "startLine": 34,
              "startColumn": 29,
              "endLine": 34,
              "endColumn": 35,
              "uri": "kafka-4.0.0/streams/src/main/java/org/apache/kafka/streams/processor/internals/DefaultKafkaClientSupplier.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    @Override\n    public Admin getAdmin(final Map<String, Object> config) {\n        // create a new client upon each call; but expect this call to be only triggered once so this should be fine\n        return Admin.create(config);\n    }\n\n    @Override"
            },
            {
              "step": 96,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 97,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 98,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 99,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 100,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 101,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 102,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 103,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 104,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 105,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 106,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 107,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 108,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 109,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 110,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 111,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 112,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 113,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 114,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 115,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 116,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 117,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 118,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 119,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 120,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 121,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 122,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 123,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 124,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 125,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 126,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 127,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 128,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 129,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 130,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 131,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 132,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 133,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 134,
              "variableName": "config",
              "startLine": 564,
              "startColumn": 41,
              "endLine": 564,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "                (hostResolver == null) ? new DefaultHostResolver() : hostResolver,\n                null,\n                clientTelemetryReporter.map(ClientTelemetryReporter::telemetrySender).orElse(null));\n            return new KafkaAdminClient(config, clientId, time, metadataManager, metrics, networkClient,\n                timeoutProcessorFactory, logContext, clientTelemetryReporter);\n        } catch (Throwable exc) {\n            closeQuietly(metrics, \"Metrics\");"
            },
            {
              "step": 135,
              "variableName": "AdminClientConfig config",
              "startLine": 597,
              "startColumn": 30,
              "endLine": 597,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        return new LogContext(\"[AdminClient clientId=\" + clientId + \"] \");\n    }\n\n    private KafkaAdminClient(AdminClientConfig config,\n                             String clientId,\n                             Time time,\n                             AdminMetadataManager metadataManager,"
            },
            {
              "step": 136,
              "variableName": "config",
              "startLine": 634,
              "startColumn": 9,
              "endLine": 634,
              "endColumn": 15,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        this.metadataRecoveryStrategy = MetadataRecoveryStrategy.forName(config.getString(AdminClientConfig.METADATA_RECOVERY_STRATEGY_CONFIG));\n        this.partitionLeaderCache = new HashMap<>();\n        this.adminFetchMetricsManager = new AdminFetchMetricsManager(metrics);\n        config.logUnused();\n        AppInfoParser.registerAppInfo(JMX_PREFIX, clientId, metrics, time.milliseconds());\n        log.debug(\"Kafka admin client initialized\");\n        thread.start();"
            },
            {
              "step": 137,
              "variableName": "logUnused",
              "startLine": 377,
              "startColumn": 17,
              "endLine": 377,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    /**\n     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);"
            },
            {
              "step": 138,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 139,
              "variableName": "unused",
              "startLine": 224,
              "startColumn": 24,
              "endLine": 224,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "        return (Class<?>) get(key);\n    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;"
            },
            {
              "step": 140,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 141,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 142,
              "variableName": "originals.keySet()",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 143,
              "variableName": "new HashSet<>(originals.keySet())",
              "startLine": 225,
              "startColumn": 28,
              "endLine": 225,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 144,
              "variableName": "keys",
              "startLine": 227,
              "startColumn": 16,
              "endLine": 227,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }\n\n    public Map<String, Object> originals() {"
            },
            {
              "step": 145,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 146,
              "variableName": "unusedKeys",
              "startLine": 380,
              "startColumn": 87,
              "endLine": 380,
              "endColumn": 97,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.9585237503051758
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG",
              "startLine": 156,
              "startColumn": 31,
              "endLine": 156,
              "endColumn": 72,
              "uri": "kafka-4.0.0/connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedKafkaCluster.java",
              "type": "String",
              "code": "        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n        if (sslEnabled()) {\n            producerProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, brokerConfig.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));\n            producerProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, brokerConfig.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG));\n            producerProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, \"SSL\");\n        }\n        producer = new KafkaProducer<>(producerProps, new ByteArraySerializer(), new ByteArraySerializer());"
            },
            {
              "step": 1,
              "variableName": "producerProps",
              "startLine": 156,
              "startColumn": 13,
              "endLine": 156,
              "endColumn": 26,
              "uri": "kafka-4.0.0/connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedKafkaCluster.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n        if (sslEnabled()) {\n            producerProps.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, brokerConfig.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG));\n            producerProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, brokerConfig.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG));\n            producerProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, \"SSL\");\n        }\n        producer = new KafkaProducer<>(producerProps, new ByteArraySerializer(), new ByteArraySerializer());"
            },
            {
              "step": 2,
              "variableName": "producerProps",
              "startLine": 159,
              "startColumn": 40,
              "endLine": 159,
              "endColumn": 53,
              "uri": "kafka-4.0.0/connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedKafkaCluster.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            producerProps.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, brokerConfig.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG));\n            producerProps.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, \"SSL\");\n        }\n        producer = new KafkaProducer<>(producerProps, new ByteArraySerializer(), new ByteArraySerializer());\n\n        verifyClusterReadiness();\n    }"
            },
            {
              "step": 3,
              "variableName": "Map<String, Object> configs",
              "startLine": 300,
              "startColumn": 26,
              "endLine": 300,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param valueSerializer  The serializer for value that implements {@link Serializer}. The configure() method won't\n     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, new ApiVersions(), Time.SYSTEM);\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "startLine": 301,
              "startColumn": 73,
              "endLine": 301,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, new ApiVersions(), Time.SYSTEM);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 622,
              "startColumn": 57,
              "endLine": 622,
              "endColumn": 84,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n    }\n\n    static Map<String, Object> appendSerializerToConfig(Map<String, Object> configs,\n            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 626,
              "startColumn": 56,
              "endLine": 626,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "startLine": 626,
              "startColumn": 42,
              "endLine": 626,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            Serializer<?> keySerializer,\n            Serializer<?> valueSerializer) {\n        // validate serializer configuration, if the passed serializer instance is null, the user must explicitly set a valid serializer configuration value\n        Map<String, Object> newConfigs = new HashMap<>(configs);\n        if (keySerializer != null)\n            newConfigs.put(KEY_SERIALIZER_CLASS_CONFIG, keySerializer.getClass());\n        else if (newConfigs.get(KEY_SERIALIZER_CLASS_CONFIG) == null)"
            },
            {
              "step": 8,
              "variableName": "newConfigs",
              "startLine": 635,
              "startColumn": 16,
              "endLine": 635,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            newConfigs.put(VALUE_SERIALIZER_CLASS_CONFIG, valueSerializer.getClass());\n        else if (newConfigs.get(VALUE_SERIALIZER_CLASS_CONFIG) == null)\n            throw new ConfigException(VALUE_SERIALIZER_CLASS_CONFIG, null, \"must be non-null.\");\n        return newConfigs;\n    }\n\n    public ProducerConfig(Properties props) {"
            },
            {
              "step": 9,
              "variableName": "ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)",
              "startLine": 301,
              "startColumn": 33,
              "endLine": 301,
              "endColumn": 113,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, new ApiVersions(), Time.SYSTEM);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "Map<String, Object> props",
              "startLine": 642,
              "startColumn": 27,
              "endLine": 642,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "props",
              "startLine": 643,
              "startColumn": 23,
              "endLine": 643,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "startLine": 132,
              "startColumn": 49,
              "endLine": 132,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 13,
              "variableName": "originals",
              "startLine": 133,
              "startColumn": 26,
              "endLine": 133,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 15,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 17,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 18,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 19,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 20,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 21,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 22,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 23,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 24,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 25,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 27,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 28,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 29,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 30,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 31,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 32,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 33,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 34,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 35,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 36,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 37,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 39,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 40,
              "variableName": "this(definition, originals, Collections.emptyMap(), true);",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n\n    /**"
            },
            {
              "step": 41,
              "variableName": "AbstractConfig",
              "startLine": 132,
              "startColumn": 12,
              "endLine": 132,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param definition the definition of the configurations; may not be null\n     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals) {\n        this(definition, originals, Collections.emptyMap(), true);\n    }\n"
            },
            {
              "step": 42,
              "variableName": "super(CONFIG, props);",
              "startLine": 643,
              "startColumn": 9,
              "endLine": 643,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n\n    ProducerConfig(Map<?, ?> props, boolean doLog) {"
            },
            {
              "step": 43,
              "variableName": "ProducerConfig",
              "startLine": 642,
              "startColumn": 12,
              "endLine": 642,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/ProducerConfig.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "        super(CONFIG, props);\n    }\n\n    public ProducerConfig(Map<String, Object> props) {\n        super(CONFIG, props);\n    }\n"
            },
            {
              "step": 44,
              "variableName": "new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer))",
              "startLine": 301,
              "startColumn": 14,
              "endLine": 301,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "     *                         be called in the producer when the serializer is passed in directly.\n     */\n    public KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this(new ProducerConfig(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)),\n                keySerializer, valueSerializer, null, null, null, new ApiVersions(), Time.SYSTEM);\n    }\n"
            },
            {
              "step": 45,
              "variableName": "ProducerConfig config",
              "startLine": 333,
              "startColumn": 19,
              "endLine": 333,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "\n    // visible for testing\n    @SuppressWarnings({\"unchecked\", \"this-escape\"})\n    KafkaProducer(ProducerConfig config,\n                  Serializer<K> keySerializer,\n                  Serializer<V> valueSerializer,\n                  ProducerMetadata metadata,"
            },
            {
              "step": 46,
              "variableName": "config",
              "startLine": 456,
              "startColumn": 13,
              "endLine": 456,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "            String ioThreadName = NETWORK_THREAD_PREFIX + \" | \" + clientId;\n            this.ioThread = new KafkaThread(ioThreadName, this.sender, true);\n            this.ioThread.start();\n            config.logUnused();\n            AppInfoParser.registerAppInfo(JMX_PREFIX, clientId, metrics, time.milliseconds());\n            log.debug(\"Kafka producer started\");\n        } catch (Throwable t) {"
            },
            {
              "step": 47,
              "variableName": "logUnused",
              "startLine": 377,
              "startColumn": 17,
              "endLine": 377,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "    /**\n     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);"
            },
            {
              "step": 48,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 49,
              "variableName": "unused",
              "startLine": 224,
              "startColumn": 24,
              "endLine": 224,
              "endColumn": 30,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "        return (Class<?>) get(key);\n    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;"
            },
            {
              "step": 50,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ProducerConfig [originals, <map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 51,
              "variableName": "originals",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 52,
              "variableName": "originals.keySet()",
              "startLine": 225,
              "startColumn": 42,
              "endLine": 225,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 53,
              "variableName": "new HashSet<>(originals.keySet())",
              "startLine": 225,
              "startColumn": 28,
              "endLine": 225,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    }\n\n    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }"
            },
            {
              "step": 54,
              "variableName": "keys",
              "startLine": 227,
              "startColumn": 16,
              "endLine": 227,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "    public Set<String> unused() {\n        Set<String> keys = new HashSet<>(originals.keySet());\n        keys.removeAll(used);\n        return keys;\n    }\n\n    public Map<String, Object> originals() {"
            },
            {
              "step": 55,
              "variableName": "unused()",
              "startLine": 378,
              "startColumn": 34,
              "endLine": 378,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashSet [<element>] : String",
              "code": "     * Info level log for any unused configurations\n     */\n    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }"
            },
            {
              "step": 56,
              "variableName": "unusedKeys",
              "startLine": 380,
              "startColumn": 87,
              "endLine": 380,
              "endColumn": 97,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "    public void logUnused() {\n        Set<String> unusedKeys = unused();\n        if (!unusedKeys.isEmpty()) {\n            log.info(\"These configurations '{}' were supplied but are not used yet.\", unusedKeys);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.15702930092811584
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "AbstractConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 106,
              "startColumn": 138,
              "endLine": 106,
              "endColumn": 146,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "startLine": 105,
              "startColumn": 9,
              "endLine": 105,
              "endColumn": 16,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "startLine": 107,
              "startColumn": 16,
              "endLine": 107,
              "endColumn": 23,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "startLine": 111,
              "startColumn": 50,
              "endLine": 111,
              "endColumn": 134,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 37,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 38,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 39,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 40,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 41,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 42,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 43,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 44,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 45,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 46,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 47,
              "variableName": "providerConfigString",
              "startLine": 540,
              "startColumn": 76,
              "endLine": 540,
              "endColumn": 96,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 48,
              "variableName": "Map<String, String> indirectConfigs",
              "startLine": 589,
              "startColumn": 13,
              "endLine": 589,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 49,
              "variableName": "indirectConfigs",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 50,
              "variableName": "indirectConfigs.get(providerClass)",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 51,
              "variableName": "providerClassName",
              "startLine": 606,
              "startColumn": 47,
              "endLine": 606,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 52,
              "variableName": "providerMap",
              "startLine": 606,
              "startColumn": 21,
              "endLine": 606,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 53,
              "variableName": "providerMap",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 54,
              "variableName": "providerMap.entrySet()",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 55,
              "variableName": "entry",
              "startLine": 617,
              "startColumn": 65,
              "endLine": 617,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 56,
              "variableName": "entry",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 57,
              "variableName": "entry.getValue()",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 86,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.9890068769454956
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD",
              "startLine": 211,
              "startColumn": 50,
              "endLine": 211,
              "endColumn": 86,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )\n            );\n        }"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Object[] [[]] : String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 207,
              "startColumn": 13,
              "endLine": 207,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 5,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 10,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 11,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 13,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 15,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 16,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 17,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 18,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 19,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 20,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 21,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 23,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 24,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 25,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 26,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 27,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 28,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 29,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 30,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 31,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 32,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 33,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 34,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 35,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 36,
              "variableName": "providerConfigString",
              "startLine": 540,
              "startColumn": 76,
              "endLine": 540,
              "endColumn": 96,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 37,
              "variableName": "Map<String, String> indirectConfigs",
              "startLine": 589,
              "startColumn": 13,
              "endLine": 589,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 38,
              "variableName": "indirectConfigs",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 39,
              "variableName": "indirectConfigs.get(providerClass)",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 40,
              "variableName": "providerClassName",
              "startLine": 606,
              "startColumn": 47,
              "endLine": 606,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 41,
              "variableName": "providerMap",
              "startLine": 606,
              "startColumn": 21,
              "endLine": 606,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 42,
              "variableName": "providerMap",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 43,
              "variableName": "providerMap.entrySet()",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 44,
              "variableName": "entry",
              "startLine": 617,
              "startColumn": 65,
              "endLine": 617,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 45,
              "variableName": "entry",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 46,
              "variableName": "entry.getValue()",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 86,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.9895835518836975
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 392,
              "startColumn": 46,
              "endLine": 392,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 388,
              "startColumn": 46,
              "endLine": 394,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 395,
              "startColumn": 50,
              "endLine": 395,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 7,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 8,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 9,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 11,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 12,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 13,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 15,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 23,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 24,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 25,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 26,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 33,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 35,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 36,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 37,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 38,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 39,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 40,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 41,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 42,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 43,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 44,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 45,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 46,
              "variableName": "providerConfigString",
              "startLine": 540,
              "startColumn": 76,
              "endLine": 540,
              "endColumn": 96,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 47,
              "variableName": "Map<String, String> indirectConfigs",
              "startLine": 589,
              "startColumn": 13,
              "endLine": 589,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 48,
              "variableName": "indirectConfigs",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 49,
              "variableName": "indirectConfigs.get(providerClass)",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 50,
              "variableName": "providerClassName",
              "startLine": 606,
              "startColumn": 47,
              "endLine": 606,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 51,
              "variableName": "providerMap",
              "startLine": 606,
              "startColumn": 21,
              "endLine": 606,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 52,
              "variableName": "providerMap",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 53,
              "variableName": "providerMap.entrySet()",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 54,
              "variableName": "entry",
              "startLine": 617,
              "startColumn": 65,
              "endLine": 617,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 55,
              "variableName": "entry",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 56,
              "variableName": "entry.getValue()",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 86,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.3000089228153229
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 484,
              "startColumn": 46,
              "endLine": 484,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 480,
              "startColumn": 46,
              "endLine": 486,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 487,
              "startColumn": 50,
              "endLine": 487,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY, new DescribeAclsOptions().timeoutMs(5000)).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 9,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 10,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 11,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 12,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 13,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 14,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 19,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 23,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 24,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 25,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 26,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 27,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 28,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 31,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 32,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 528,
              "startColumn": 75,
              "endLine": 528,
              "endColumn": 84,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 34,
              "variableName": "Map<?, ?> configMap",
              "startLine": 502,
              "startColumn": 59,
              "endLine": 502,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private Map<String, String> extractPotentialVariables(Map<?, ?> configMap) {\n        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();"
            },
            {
              "step": 35,
              "variableName": "configMap",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 47,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 36,
              "variableName": "configMap.entrySet()",
              "startLine": 506,
              "startColumn": 38,
              "endLine": 506,
              "endColumn": 58,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        // Variables are tuples of the form \"${providerName:[path:]key}\". From the configMap we extract the subset of configs with string\n        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }"
            },
            {
              "step": 37,
              "variableName": "entry",
              "startLine": 507,
              "startColumn": 17,
              "endLine": 507,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        // values as potential variables.\n        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
            },
            {
              "step": 38,
              "variableName": "entry",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 39,
              "variableName": "entry.getValue()",
              "startLine": 508,
              "startColumn": 73,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 40,
              "variableName": "(String) entry.getValue()",
              "startLine": 508,
              "startColumn": 64,
              "endLine": 508,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 41,
              "variableName": "configMapAsString",
              "startLine": 508,
              "startColumn": 17,
              "endLine": 508,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, String> configMapAsString = new HashMap<>();\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;"
            },
            {
              "step": 42,
              "variableName": "configMapAsString",
              "startLine": 511,
              "startColumn": 16,
              "endLine": 511,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n\n        return configMapAsString;\n    }\n\n    /**"
            },
            {
              "step": 43,
              "variableName": "extractPotentialVariables(originals)",
              "startLine": 528,
              "startColumn": 49,
              "endLine": 528,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Predicate<String> classNameFilter;\n        Map<String, Object> resolvedOriginals = new HashMap<>();\n        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {"
            },
            {
              "step": 44,
              "variableName": "providerConfigString",
              "startLine": 540,
              "startColumn": 76,
              "endLine": 540,
              "endColumn": 96,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            configProperties = configProviderProps;\n            classNameFilter = ignored -> true;\n        }\n        Map<String, ConfigProvider> providers = instantiateConfigProviders(providerConfigString, configProperties, classNameFilter);\n\n        if (!providers.isEmpty()) {\n            ConfigTransformer configTransformer = new ConfigTransformer(providers);"
            },
            {
              "step": 45,
              "variableName": "Map<String, String> indirectConfigs",
              "startLine": 589,
              "startColumn": 13,
              "endLine": 589,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return map of config provider name and its instance.\n     */\n    private Map<String, ConfigProvider> instantiateConfigProviders(\n            Map<String, String> indirectConfigs,\n            Map<String, ?> providerConfigProperties,\n            Predicate<String> classNameFilter\n    ) {"
            },
            {
              "step": 46,
              "variableName": "indirectConfigs",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 47,
              "variableName": "indirectConfigs.get(providerClass)",
              "startLine": 604,
              "startColumn": 44,
              "endLine": 604,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "        for (String provider : configProviders.split(\",\")) {\n            String providerClass = providerClassProperty(provider);\n            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {"
            },
            {
              "step": 48,
              "variableName": "providerClassName",
              "startLine": 606,
              "startColumn": 47,
              "endLine": 606,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 49,
              "variableName": "providerMap",
              "startLine": 606,
              "startColumn": 21,
              "endLine": 606,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            if (indirectConfigs.containsKey(providerClass)) {\n                String providerClassName = indirectConfigs.get(providerClass);\n                if (classNameFilter.test(providerClassName)) {\n                    providerMap.put(provider, providerClassName);\n                } else {\n                    throw new ConfigException(providerClassName + \" is not allowed. Update System property '\"\n                            + AUTOMATIC_CONFIG_PROVIDERS_PROPERTY + \"' to allow \" + providerClassName);"
            },
            {
              "step": 50,
              "variableName": "providerMap",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 51,
              "variableName": "providerMap.entrySet()",
              "startLine": 615,
              "startColumn": 48,
              "endLine": 615,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "        }\n        // Instantiate Config Providers\n        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);"
            },
            {
              "step": 52,
              "variableName": "entry",
              "startLine": 617,
              "startColumn": 65,
              "endLine": 617,
              "endColumn": 70,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "        Map<String, ConfigProvider> configProviderInstances = new HashMap<>();\n        for (Map.Entry<String, String> entry : providerMap.entrySet()) {\n            try {\n                String prefix = CONFIG_PROVIDERS_CONFIG + \".\" + entry.getKey() + CONFIG_PROVIDERS_PARAM;\n                Map<String, ?> configProperties = configProviderProperties(prefix, providerConfigProperties);\n                ConfigProvider provider = Utils.newInstance(entry.getValue(), ConfigProvider.class);\n                provider.configure(configProperties);"
            },
            {
              "step": 53,
              "variableName": "entry",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            },
            {
              "step": 54,
              "variableName": "entry.getValue()",
              "startLine": 623,
              "startColumn": 70,
              "endLine": 623,
              "endColumn": 86,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "",
              "code": "                provider.configure(configProperties);\n                configProviderInstances.put(entry.getKey(), provider);\n            } catch (ClassNotFoundException e) {\n                log.error(\"Could not load config provider class {}\", entry.getValue(), e);\n                throw new ConfigException(providerClassProperty(entry.getKey()), entry.getValue(), \"Could not load config provider class or one of its dependencies\");\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.22566066682338715
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "ScramFormatter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 94,
              "startColumn": 29,
              "endLine": 94,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {\n        return hi(normalize(password), salt, iterations);\n    }\n\n    public byte[] clientKey(byte[] saltedPassword) throws InvalidKeyException {"
            },
            {
              "step": 1,
              "variableName": "String str",
              "startLine": 89,
              "startColumn": 36,
              "endLine": 89,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "        return result;\n    }\n\n    public static byte[] normalize(String str) {\n        return toBytes(str);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "str",
              "startLine": 90,
              "startColumn": 24,
              "endLine": 90,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] normalize(String str) {\n        return toBytes(str);\n    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {"
            },
            {
              "step": 3,
              "variableName": "String str",
              "startLine": 169,
              "startColumn": 34,
              "endLine": 169,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "        return toBytes(secureRandomString(random));\n    }\n\n    public static byte[] toBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "str",
              "startLine": 170,
              "startColumn": 16,
              "endLine": 170,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "String",
              "code": "    }\n\n    public static byte[] toBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    public ScramCredential generateCredential(String password, int iterations) {"
            },
            {
              "step": 5,
              "variableName": "str.getBytes(StandardCharsets.UTF_8)",
              "startLine": 170,
              "startColumn": 16,
              "endLine": 170,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    public static byte[] toBytes(String str) {\n        return str.getBytes(StandardCharsets.UTF_8);\n    }\n\n    public ScramCredential generateCredential(String password, int iterations) {"
            },
            {
              "step": 6,
              "variableName": "toBytes(str)",
              "startLine": 90,
              "startColumn": 16,
              "endLine": 90,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "byte[]",
              "code": "    }\n\n    public static byte[] normalize(String str) {\n        return toBytes(str);\n    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {"
            },
            {
              "step": 7,
              "variableName": "normalize(password)",
              "startLine": 94,
              "startColumn": 19,
              "endLine": 94,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/scram/internals/ScramFormatter.java",
              "type": "",
              "code": "    }\n\n    public byte[] saltedPassword(String password, byte[] salt, int iterations) throws InvalidKeyException {\n        return hi(normalize(password), salt, iterations);\n    }\n\n    public byte[] clientKey(byte[] saltedPassword) throws InvalidKeyException {"
            }
          ],
          "label": "No",
          "probability": 0.8409237265586853
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "DefaultSslEngineFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 106,
              "startColumn": 138,
              "endLine": 106,
              "endColumn": 146,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "startLine": 105,
              "startColumn": 9,
              "endLine": 105,
              "endColumn": 16,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "startLine": 107,
              "startColumn": 16,
              "endLine": 107,
              "endColumn": 23,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "startLine": 111,
              "startColumn": 50,
              "endLine": 111,
              "endColumn": 134,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 38,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 39,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 42,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 43,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 44,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 46,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 47,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 48,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 49,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 50,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 51,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 53,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 54,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 55,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 56,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 57,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 58,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 59,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 60,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 61,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 62,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 63,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 64,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 69,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 71,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 72,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 74,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 75,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 76,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 79,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 80,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 81,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 83,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 85,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 86,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 87,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 88,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 89,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 90,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 91,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 92,
              "variableName": "configs",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 156,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 93,
              "variableName": "con",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 94,
              "variableName": "(String) con",
              "startLine": 156,
              "startColumn": 50,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 95,
              "variableName": "String key",
              "startLine": 214,
              "startColumn": 54,
              "endLine": 214,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n        return sslEngine;\n    }\n    private static SslClientAuth createSslClientAuth(String key) {\n        SslClientAuth auth = SslClientAuth.forConfig(key);\n        if (auth != null) {\n            return auth;"
            },
            {
              "step": 96,
              "variableName": "key",
              "startLine": 221,
              "startColumn": 17,
              "endLine": 221,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "        }\n        log.warn(\"Unrecognized client authentication configuration {}.  Falling \" +\n                \"back to NONE.  Recognized client authentication configurations are {}.\",\n                key, SslClientAuth.VALUES.stream().\n                        map(Enum::name).collect(Collectors.joining(\", \")));\n        return SslClientAuth.NONE;\n    }"
            }
          ],
          "label": "No",
          "probability": 0.9977543354034424
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD",
              "startLine": 211,
              "startColumn": 50,
              "endLine": 211,
              "endColumn": 86,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )\n            );\n        }"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Object[] [[]] : String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 207,
              "startColumn": 13,
              "endLine": 207,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 5,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 10,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 11,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 13,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 15,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 16,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 17,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 18,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 19,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 20,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 21,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 23,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 24,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 25,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 26,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 27,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 28,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 29,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 30,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 31,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 32,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 33,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 36,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 37,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 38,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 39,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 40,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 41,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 42,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 43,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 44,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 46,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 48,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 49,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 51,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 53,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 54,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 55,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 56,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 57,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 58,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 59,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 60,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 61,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 62,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 63,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 64,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 65,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 70,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 71,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 72,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 73,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 74,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 75,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 76,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 77,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 78,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 79,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 80,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 81,
              "variableName": "configs",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 156,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 82,
              "variableName": "con",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 83,
              "variableName": "(String) con",
              "startLine": 156,
              "startColumn": 50,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 84,
              "variableName": "String key",
              "startLine": 214,
              "startColumn": 54,
              "endLine": 214,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n        return sslEngine;\n    }\n    private static SslClientAuth createSslClientAuth(String key) {\n        SslClientAuth auth = SslClientAuth.forConfig(key);\n        if (auth != null) {\n            return auth;"
            },
            {
              "step": 85,
              "variableName": "key",
              "startLine": 221,
              "startColumn": 17,
              "endLine": 221,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "        }\n        log.warn(\"Unrecognized client authentication configuration {}.  Falling \" +\n                \"back to NONE.  Recognized client authentication configurations are {}.\",\n                key, SslClientAuth.VALUES.stream().\n                        map(Enum::name).collect(Collectors.joining(\", \")));\n        return SslClientAuth.NONE;\n    }"
            }
          ],
          "label": "No",
          "probability": 0.9972103834152222
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 392,
              "startColumn": 46,
              "endLine": 392,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 388,
              "startColumn": 46,
              "endLine": 394,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 395,
              "startColumn": 50,
              "endLine": 395,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 7,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 8,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 9,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 11,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 12,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 13,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 15,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 23,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 24,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 25,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 26,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 33,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 35,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 36,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 38,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 39,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 40,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 42,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 43,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 46,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 48,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 61,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 62,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 63,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 64,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 69,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 72,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 73,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 74,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 75,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 76,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 77,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 79,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 80,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 81,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 84,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 85,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 86,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 87,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 88,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 90,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 91,
              "variableName": "configs",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 156,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 92,
              "variableName": "con",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 93,
              "variableName": "(String) con",
              "startLine": 156,
              "startColumn": 50,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 94,
              "variableName": "String key",
              "startLine": 214,
              "startColumn": 54,
              "endLine": 214,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n        return sslEngine;\n    }\n    private static SslClientAuth createSslClientAuth(String key) {\n        SslClientAuth auth = SslClientAuth.forConfig(key);\n        if (auth != null) {\n            return auth;"
            },
            {
              "step": 95,
              "variableName": "key",
              "startLine": 221,
              "startColumn": 17,
              "endLine": 221,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "        }\n        log.warn(\"Unrecognized client authentication configuration {}.  Falling \" +\n                \"back to NONE.  Recognized client authentication configurations are {}.\",\n                key, SslClientAuth.VALUES.stream().\n                        map(Enum::name).collect(Collectors.joining(\", \")));\n        return SslClientAuth.NONE;\n    }"
            }
          ],
          "label": "No",
          "probability": 0.7294015884399414
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 484,
              "startColumn": 46,
              "endLine": 484,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 480,
              "startColumn": 46,
              "endLine": 486,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 487,
              "startColumn": 50,
              "endLine": 487,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY, new DescribeAclsOptions().timeoutMs(5000)).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 9,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 10,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 11,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 12,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 13,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 14,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 19,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 23,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 24,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 25,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 26,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 27,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 28,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 31,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 32,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 34,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 35,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 36,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 37,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 38,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 39,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 41,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 42,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 43,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 44,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 46,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 47,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 48,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 51,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 59,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 61,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 62,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 63,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 64,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 66,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 69,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 72,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 74,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 75,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 76,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 78,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 79,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 80,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 84,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 85,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 86,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 87,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 88,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 156,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 90,
              "variableName": "con",
              "startLine": 156,
              "startColumn": 59,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 91,
              "variableName": "(String) con",
              "startLine": 156,
              "startColumn": 50,
              "endLine": 157,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 92,
              "variableName": "String key",
              "startLine": 214,
              "startColumn": 54,
              "endLine": 214,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n        return sslEngine;\n    }\n    private static SslClientAuth createSslClientAuth(String key) {\n        SslClientAuth auth = SslClientAuth.forConfig(key);\n        if (auth != null) {\n            return auth;"
            },
            {
              "step": 93,
              "variableName": "key",
              "startLine": 221,
              "startColumn": 17,
              "endLine": 221,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "        }\n        log.warn(\"Unrecognized client authentication configuration {}.  Falling \" +\n                \"back to NONE.  Recognized client authentication configurations are {}.\",\n                key, SslClientAuth.VALUES.stream().\n                        map(Enum::name).collect(Collectors.joining(\", \")));\n        return SslClientAuth.NONE;\n    }"
            }
          ],
          "label": "No",
          "probability": 0.8417481184005737
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "DefaultSslEngineFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 106,
              "startColumn": 138,
              "endLine": 106,
              "endColumn": 146,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "startLine": 105,
              "startColumn": 9,
              "endLine": 105,
              "endColumn": 16,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "startLine": 107,
              "startColumn": 16,
              "endLine": 107,
              "endColumn": 23,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "startLine": 111,
              "startColumn": 50,
              "endLine": 111,
              "endColumn": 134,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 38,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 39,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 42,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 43,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 44,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 46,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 47,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 48,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 49,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 50,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 51,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 53,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 54,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 55,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 56,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 57,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 58,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 59,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 60,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 61,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 62,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 63,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 64,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 69,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 71,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 72,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 74,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 75,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 76,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 79,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 80,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 81,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 83,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 85,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 86,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 87,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 88,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 89,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 90,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 91,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 92,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 93,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 94,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 95,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 96,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 97,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 98,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 99,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 100,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 101,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 102,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 103,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 104,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 105,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 106,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 107,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 108,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 109,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 110,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 111,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 112,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 113,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            }
          ],
          "label": "No",
          "probability": 0.9977543354034424
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD",
              "startLine": 211,
              "startColumn": 50,
              "endLine": 211,
              "endColumn": 86,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )\n            );\n        }"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Object[] [[]] : String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 207,
              "startColumn": 13,
              "endLine": 207,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 5,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 10,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 11,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 13,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 15,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 16,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 17,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 18,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 19,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 20,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 21,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 23,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 24,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 25,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 26,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 27,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 28,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 29,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 30,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 31,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 32,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 33,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 36,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 37,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 38,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 39,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 40,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 41,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 42,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 43,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 44,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 46,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 48,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 49,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 51,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 53,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 54,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 55,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 56,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 57,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 58,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 59,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 60,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 61,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 62,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 63,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 64,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 65,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 70,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 71,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 72,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 73,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 74,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 75,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 76,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 77,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 78,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 79,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 80,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 81,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 82,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 83,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 84,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 85,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 86,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 87,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 88,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 89,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 90,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 91,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 92,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 93,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 94,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 95,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 96,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 97,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 98,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 99,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 100,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 101,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 102,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            }
          ],
          "label": "No",
          "probability": 0.9972103834152222
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 392,
              "startColumn": 46,
              "endLine": 392,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 388,
              "startColumn": 46,
              "endLine": 394,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 395,
              "startColumn": 50,
              "endLine": 395,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 7,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 8,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 9,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 11,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 12,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 13,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 15,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 23,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 24,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 25,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 26,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 33,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 35,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 36,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 38,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 39,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 40,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 42,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 43,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 46,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 48,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 61,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 62,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 63,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 64,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 69,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 72,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 73,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 74,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 75,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 76,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 77,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 79,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 80,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 81,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 84,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 85,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 86,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 87,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 88,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 90,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 91,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 92,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 93,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 94,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 95,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 96,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 97,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 98,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 99,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 100,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 101,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 102,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 103,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 104,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 105,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 106,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 107,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 108,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 109,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 110,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 111,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 112,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            }
          ],
          "label": "No",
          "probability": 0.7294015884399414
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 484,
              "startColumn": 46,
              "endLine": 484,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 480,
              "startColumn": 46,
              "endLine": 486,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 487,
              "startColumn": 50,
              "endLine": 487,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY, new DescribeAclsOptions().timeoutMs(5000)).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 9,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 10,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 11,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 12,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 13,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 14,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 19,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 23,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 24,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 25,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 26,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 27,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 28,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 31,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 32,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 34,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 35,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 36,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 37,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 38,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 39,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 41,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 42,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 43,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 44,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 46,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 47,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 48,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 51,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 59,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 61,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 62,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 63,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 64,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 66,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 69,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 72,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 74,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 75,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 76,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 78,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 79,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 80,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 84,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 85,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 86,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 87,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 88,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 24,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 90,
              "variableName": "configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG)",
              "startLine": 154,
              "startColumn": 17,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));"
            },
            {
              "step": 91,
              "variableName": "(String)",
              "startLine": 153,
              "startColumn": 62,
              "endLine": 154,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 92,
              "variableName": "String key",
              "startLine": 226,
              "startColumn": 52,
              "endLine": 226,
              "endColumn": 62,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        return SslClientAuth.NONE;\n    }\n\n    private static SecureRandom createSecureRandom(String key) {\n        if (key == null) {\n            return null;\n        }"
            },
            {
              "step": 93,
              "variableName": "key",
              "startLine": 231,
              "startColumn": 45,
              "endLine": 231,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 94,
              "variableName": "SecureRandom.getInstance(key)",
              "startLine": 231,
              "startColumn": 20,
              "endLine": 231,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            return null;\n        }\n        try {\n            return SecureRandom.getInstance(key);\n        } catch (GeneralSecurityException e) {\n            throw new KafkaException(e);\n        }"
            },
            {
              "step": 95,
              "variableName": "createSecureRandom((String)",
              "startLine": 153,
              "startColumn": 43,
              "endLine": 154,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 96,
              "variableName": "this",
              "startLine": 153,
              "startColumn": 9,
              "endLine": 153,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            this.enabledProtocols = null;\n        }\n\n        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get("
            },
            {
              "step": 97,
              "variableName": "this",
              "startLine": 156,
              "startColumn": 9,
              "endLine": 156,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.secureRandomImplementation = createSecureRandom((String)\n                configs.get(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG));\n\n        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);"
            },
            {
              "step": 98,
              "variableName": "this",
              "startLine": 159,
              "startColumn": 9,
              "endLine": 159,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.sslClientAuth = createSslClientAuth((String) configs.get(\n                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),"
            },
            {
              "step": 99,
              "variableName": "this",
              "startLine": 160,
              "startColumn": 9,
              "endLine": 160,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG));\n\n        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),"
            },
            {
              "step": 100,
              "variableName": "this",
              "startLine": 162,
              "startColumn": 9,
              "endLine": 162,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        this.kmfAlgorithm = (String) configs.get(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),"
            },
            {
              "step": 101,
              "variableName": "this",
              "startLine": 169,
              "startColumn": 9,
              "endLine": 169,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG));\n\n        this.truststore = createTruststore((String) configs.get(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));"
            },
            {
              "step": 102,
              "variableName": "this",
              "startLine": 174,
              "startColumn": 9,
              "endLine": 174,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 103,
              "variableName": "createSSLContext(keystore, truststore)",
              "startLine": 174,
              "startColumn": 27,
              "endLine": 174,
              "endColumn": 65,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG));\n\n        this.sslContext = createSSLContext(keystore, truststore);\n    }\n\n    @Override"
            },
            {
              "step": 104,
              "variableName": "createSSLContext",
              "startLine": 237,
              "startColumn": 24,
              "endLine": 237,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "        }\n    }\n\n    private SSLContext createSSLContext(SecurityStore keystore, SecurityStore truststore) {\n        try {\n            SSLContext sslContext;\n            if (provider != null)"
            },
            {
              "step": 105,
              "variableName": "this",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "DefaultSslEngineFactory [secureRandomImplementation] : SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 106,
              "variableName": "this.secureRandomImplementation",
              "startLine": 261,
              "startColumn": 57,
              "endLine": 261,
              "endColumn": 88,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SecureRandom",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 107,
              "variableName": "sslContext",
              "startLine": 261,
              "startColumn": 13,
              "endLine": 261,
              "endColumn": 23,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "            String tmfAlgorithm = this.tmfAlgorithm != null ? this.tmfAlgorithm : TrustManagerFactory.getDefaultAlgorithm();\n            TrustManager[] trustManagers = getTrustManagers(truststore, tmfAlgorithm);\n\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;"
            },
            {
              "step": 108,
              "variableName": "sslContext",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "SSLContext",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 109,
              "variableName": "sslContext.getProvider()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "Provider",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            },
            {
              "step": 110,
              "variableName": "sslContext.getProvider().getName()",
              "startLine": 263,
              "startColumn": 43,
              "endLine": 263,
              "endColumn": 77,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "\n            sslContext.init(keyManagers, trustManagers, this.secureRandomImplementation);\n            log.debug(\"Created SSL context with keystore {}, truststore {}, provider {}.\",\n                    keystore, truststore, sslContext.getProvider().getName());\n            return sslContext;\n        } catch (Exception e) {\n            throw new KafkaException(e);"
            }
          ],
          "label": "No",
          "probability": 0.8417481184005737
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "DefaultSslEngineFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 106,
              "startColumn": 138,
              "endLine": 106,
              "endColumn": 146,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password)",
              "startLine": 106,
              "startColumn": 13,
              "endLine": 106,
              "endColumn": 147,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "String",
              "code": "        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "configs",
              "startLine": 105,
              "startColumn": 9,
              "endLine": 105,
              "endColumn": 16,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        Map<String, Object> configs = new HashMap<>();\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }"
            },
            {
              "step": 4,
              "variableName": "configs",
              "startLine": 107,
              "startColumn": 16,
              "endLine": 107,
              "endColumn": 23,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        configs.put(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n        configs.put(SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\", username, password));\n        return configs;\n    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {"
            },
            {
              "step": 5,
              "variableName": "createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD)",
              "startLine": 111,
              "startColumn": 50,
              "endLine": 111,
              "endColumn": 134,
              "uri": "kafka-4.0.0/core/src/test/java/kafka/admin/DescribeAuthorizedOperationsTest.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    private void setupSecurity(ClusterInstance clusterInstance) throws ExecutionException, InterruptedException {\n        try (Admin admin = clusterInstance.admin(createAdminConfig(JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD))) {\n            ResourcePattern topicResource = new ResourcePattern(ResourceType.TOPIC, AclEntry.WILDCARD_RESOURCE, PatternType.LITERAL);\n\n            admin.createAcls(List.of("
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 8,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 9,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 11,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 12,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 13,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 15,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 17,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 18,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 19,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 21,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 22,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 24,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 25,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 26,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 29,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 32,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 34,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 36,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 38,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 39,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 42,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 43,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 44,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 46,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 47,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 48,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 49,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 50,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 51,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 52,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 53,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 54,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 55,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 56,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 57,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 58,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 59,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 60,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 61,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 62,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 63,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 64,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 69,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 71,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 72,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 74,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 75,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 76,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 79,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 80,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 81,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 83,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 84,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 85,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 86,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 87,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 88,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 89,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 90,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 91,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 92,
              "variableName": "configs",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 93,
              "variableName": "configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 94,
              "variableName": "(String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 17,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 95,
              "variableName": "String path",
              "startLine": 278,
              "startColumn": 57,
              "endLine": 278,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "    }\n\n    // Visibility to override for testing\n    protected SecurityStore createKeystore(String type, String path, Password password, Password keyPassword, Password privateKey, Password certificateChain) {\n        if (privateKey != null) {\n            if (!PEM_TYPE.equals(type))\n                throw new InvalidConfigurationException(\"SSL private key can be specified only for PEM, but key store type is \" + type + \".\");"
            },
            {
              "step": 96,
              "variableName": "path",
              "startLine": 302,
              "startColumn": 45,
              "endLine": 302,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        } else if (path != null && password == null) {\n            throw new InvalidConfigurationException(\"SSL key store is specified, but key store password is not specified.\");\n        } else if (path != null && password != null) {\n            return new FileBasedStore(type, path, password, keyPassword, true);\n        } else\n            return null; // path == null, clients may use this path with brokers that don't require client auth\n    }"
            },
            {
              "step": 97,
              "variableName": "String path",
              "startLine": 345,
              "startColumn": 37,
              "endLine": 345,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        private final Long fileLastModifiedMs;\n        private final KeyStore keyStore;\n\n        FileBasedStore(String type, String path, Password password, Password keyPassword, boolean isKeyStore) {\n            Objects.requireNonNull(type, \"type must not be null\");\n            this.type = type;\n            this.path = path;"
            },
            {
              "step": 98,
              "variableName": "path",
              "startLine": 351,
              "startColumn": 49,
              "endLine": 351,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.path = path;\n            this.password = password;\n            this.keyPassword = keyPassword;\n            fileLastModifiedMs = lastModifiedMs(path);\n            this.keyStore = load(isKeyStore);\n        }\n"
            },
            {
              "step": 99,
              "variableName": "String path",
              "startLine": 384,
              "startColumn": 37,
              "endLine": 384,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            }\n        }\n\n        private Long lastModifiedMs(String path) {\n            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {"
            },
            {
              "step": 100,
              "variableName": "\"Modification time of key store could not be obtained: \" + path",
              "startLine": 388,
              "startColumn": 27,
              "endLine": 388,
              "endColumn": 90,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {\n                log.error(\"Modification time of key store could not be obtained: \" + path, e);\n                return null;\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.9977543354034424
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD",
              "startLine": 211,
              "startColumn": 50,
              "endLine": 211,
              "endColumn": 86,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )\n            );\n        }"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Object[] [[]] : String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 209,
              "startColumn": 17,
              "endLine": 212,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "String",
              "code": "            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                    JaasUtils.KAFKA_PLAIN_ADMIN, JaasUtils.KAFKA_PLAIN_ADMIN_PASSWORD\n                )"
            },
            {
              "step": 3,
              "variableName": "props",
              "startLine": 207,
              "startColumn": 13,
              "endLine": 207,
              "endColumn": 18,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");\n            props.putIfAbsent(\n                SaslConfigs.SASL_JAAS_CONFIG,\n                String.format(\n                    \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 5,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 6,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 10,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 11,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 12,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 13,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 14,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 15,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 16,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 17,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 18,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 19,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 20,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 21,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 22,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 23,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 24,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 25,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 26,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 27,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 28,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 29,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 30,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 31,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 32,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 33,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 35,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 36,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 37,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 38,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 39,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 40,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 41,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 42,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 43,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 44,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 46,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 48,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 49,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 51,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 53,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 54,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 55,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 56,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 57,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 58,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 59,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 60,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 61,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 62,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 63,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 64,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 65,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 66,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 70,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 71,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 72,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 73,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 74,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 75,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 76,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 77,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 78,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 79,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 80,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 81,
              "variableName": "configs",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 82,
              "variableName": "configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 83,
              "variableName": "(String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 17,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 84,
              "variableName": "String path",
              "startLine": 278,
              "startColumn": 57,
              "endLine": 278,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "    }\n\n    // Visibility to override for testing\n    protected SecurityStore createKeystore(String type, String path, Password password, Password keyPassword, Password privateKey, Password certificateChain) {\n        if (privateKey != null) {\n            if (!PEM_TYPE.equals(type))\n                throw new InvalidConfigurationException(\"SSL private key can be specified only for PEM, but key store type is \" + type + \".\");"
            },
            {
              "step": 85,
              "variableName": "path",
              "startLine": 302,
              "startColumn": 45,
              "endLine": 302,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        } else if (path != null && password == null) {\n            throw new InvalidConfigurationException(\"SSL key store is specified, but key store password is not specified.\");\n        } else if (path != null && password != null) {\n            return new FileBasedStore(type, path, password, keyPassword, true);\n        } else\n            return null; // path == null, clients may use this path with brokers that don't require client auth\n    }"
            },
            {
              "step": 86,
              "variableName": "String path",
              "startLine": 345,
              "startColumn": 37,
              "endLine": 345,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        private final Long fileLastModifiedMs;\n        private final KeyStore keyStore;\n\n        FileBasedStore(String type, String path, Password password, Password keyPassword, boolean isKeyStore) {\n            Objects.requireNonNull(type, \"type must not be null\");\n            this.type = type;\n            this.path = path;"
            },
            {
              "step": 87,
              "variableName": "path",
              "startLine": 351,
              "startColumn": 49,
              "endLine": 351,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.path = path;\n            this.password = password;\n            this.keyPassword = keyPassword;\n            fileLastModifiedMs = lastModifiedMs(path);\n            this.keyStore = load(isKeyStore);\n        }\n"
            },
            {
              "step": 88,
              "variableName": "String path",
              "startLine": 384,
              "startColumn": 37,
              "endLine": 384,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            }\n        }\n\n        private Long lastModifiedMs(String path) {\n            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {"
            },
            {
              "step": 89,
              "variableName": "\"Modification time of key store could not be obtained: \" + path",
              "startLine": 388,
              "startColumn": 27,
              "endLine": 388,
              "endColumn": 90,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {\n                log.error(\"Modification time of key store could not be obtained: \" + path, e);\n                return null;\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.9972103834152222
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 392,
              "startColumn": 46,
              "endLine": 392,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 390,
              "startColumn": 13,
              "endLine": 393,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 388,
              "startColumn": 46,
              "endLine": 394,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // client with non-admin credentials\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 395,
              "startColumn": 50,
              "endLine": 395,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 218,
              "startColumn": 25,
              "endLine": 218,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 219,
              "startColumn": 22,
              "endLine": 219,
              "endColumn": 29,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs) {\n        return admin(configs, false);\n    }\n\n    default Admin admin() {"
            },
            {
              "step": 7,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 8,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 9,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 10,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 11,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 12,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 13,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 14,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 15,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 16,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 23,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 24,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 25,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 26,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 27,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 28,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 30,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 31,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 33,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 34,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 35,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 36,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 37,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 38,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 39,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 40,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 41,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 42,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 43,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 44,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 46,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 47,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 48,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 51,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 61,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 62,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 63,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 64,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 66,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 68,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 69,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 72,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 73,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 74,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 75,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 76,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 77,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 78,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 79,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 80,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 81,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 84,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 85,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 86,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 87,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 88,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 90,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 91,
              "variableName": "configs",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 92,
              "variableName": "configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 93,
              "variableName": "(String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 17,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 94,
              "variableName": "String path",
              "startLine": 278,
              "startColumn": 57,
              "endLine": 278,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "    }\n\n    // Visibility to override for testing\n    protected SecurityStore createKeystore(String type, String path, Password password, Password keyPassword, Password privateKey, Password certificateChain) {\n        if (privateKey != null) {\n            if (!PEM_TYPE.equals(type))\n                throw new InvalidConfigurationException(\"SSL private key can be specified only for PEM, but key store type is \" + type + \".\");"
            },
            {
              "step": 95,
              "variableName": "path",
              "startLine": 302,
              "startColumn": 45,
              "endLine": 302,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        } else if (path != null && password == null) {\n            throw new InvalidConfigurationException(\"SSL key store is specified, but key store password is not specified.\");\n        } else if (path != null && password != null) {\n            return new FileBasedStore(type, path, password, keyPassword, true);\n        } else\n            return null; // path == null, clients may use this path with brokers that don't require client auth\n    }"
            },
            {
              "step": 96,
              "variableName": "String path",
              "startLine": 345,
              "startColumn": 37,
              "endLine": 345,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        private final Long fileLastModifiedMs;\n        private final KeyStore keyStore;\n\n        FileBasedStore(String type, String path, Password password, Password keyPassword, boolean isKeyStore) {\n            Objects.requireNonNull(type, \"type must not be null\");\n            this.type = type;\n            this.path = path;"
            },
            {
              "step": 97,
              "variableName": "path",
              "startLine": 351,
              "startColumn": 49,
              "endLine": 351,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.path = path;\n            this.password = password;\n            this.keyPassword = keyPassword;\n            fileLastModifiedMs = lastModifiedMs(path);\n            this.keyStore = load(isKeyStore);\n        }\n"
            },
            {
              "step": 98,
              "variableName": "String path",
              "startLine": 384,
              "startColumn": 37,
              "endLine": 384,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            }\n        }\n\n        private Long lastModifiedMs(String path) {\n            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {"
            },
            {
              "step": 99,
              "variableName": "\"Modification time of key store could not be obtained: \" + path",
              "startLine": 388,
              "startColumn": 27,
              "endLine": 388,
              "endColumn": 90,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {\n                log.error(\"Modification time of key store could not be obtained: \" + path, e);\n                return null;\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.7294015884399414
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "JaasUtils.KAFKA_PLAIN_USER1_PASSWORD",
              "startLine": 484,
              "startColumn": 46,
              "endLine": 484,
              "endColumn": 82,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {"
            },
            {
              "step": 1,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Object[] [[]] : String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 2,
              "variableName": "S",
              "startLine": 482,
              "startColumn": 13,
              "endLine": 485,
              "endColumn": 14,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "String",
              "code": "        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\",\n                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )"
            },
            {
              "step": 3,
              "variableName": "of(...) : Map [<map.value>] : String",
              "startLine": 480,
              "startColumn": 46,
              "endLine": 486,
              "endColumn": 10,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "        }\n\n        // test with non-admin\n        Map<String, Object> nonAdminConfig = Map.of(\n            SaslConfigs.SASL_JAAS_CONFIG,\n            String.format(\n                \"org.apache.kafka.common.security.plain.PlainLoginModule required username=\\\"%s\\\" password=\\\"%s\\\";\","
            },
            {
              "step": 4,
              "variableName": "nonAdminConfig",
              "startLine": 487,
              "startColumn": 50,
              "endLine": 487,
              "endColumn": 64,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/test/java/org/apache/kafka/common/test/junit/ClusterTestExtensionsTest.java",
              "type": "Map [<map.value>] : String",
              "code": "                JaasUtils.KAFKA_PLAIN_USER1, JaasUtils.KAFKA_PLAIN_USER1_PASSWORD\n            )\n        );\n        try (Admin admin = clusterInstance.admin(nonAdminConfig, true)) {\n            ExecutionException exception = assertThrows(\n                ExecutionException.class,\n                () -> admin.describeAcls(AclBindingFilter.ANY, new DescribeAclsOptions().timeoutMs(5000)).values().get()"
            },
            {
              "step": 5,
              "variableName": "Map<String, Object> configs",
              "startLine": 190,
              "startColumn": 25,
              "endLine": 190,
              "endColumn": 52,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "        return consumer(Map.of());\n    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());"
            },
            {
              "step": 6,
              "variableName": "configs",
              "startLine": 191,
              "startColumn": 51,
              "endLine": 191,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "Map [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 7,
              "variableName": "new HashMap<>(configs)",
              "startLine": 191,
              "startColumn": 37,
              "endLine": 191,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Admin admin(Map<String, Object> configs, boolean usingBootstrapControllers) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (usingBootstrapControllers) {\n            props.putIfAbsent(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG, bootstrapControllers());\n            props.remove(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG);"
            },
            {
              "step": 8,
              "variableName": "props",
              "startLine": 199,
              "startColumn": 49,
              "endLine": 199,
              "endColumn": 54,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 9,
              "variableName": "Map<String, Object> configs",
              "startLine": 202,
              "startColumn": 53,
              "endLine": 202,
              "endColumn": 80,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);"
            },
            {
              "step": 10,
              "variableName": "configs",
              "startLine": 203,
              "startColumn": 51,
              "endLine": 203,
              "endColumn": 58,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 11,
              "variableName": "new HashMap<>(configs)",
              "startLine": 203,
              "startColumn": 37,
              "endLine": 203,
              "endColumn": 59,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {\n        Map<String, Object> props = new HashMap<>(configs);\n        if (config().brokerSecurityProtocol() == SecurityProtocol.SASL_PLAINTEXT) {\n            props.putIfAbsent(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, SecurityProtocol.SASL_PLAINTEXT.name);\n            props.putIfAbsent(SaslConfigs.SASL_MECHANISM, \"PLAIN\");"
            },
            {
              "step": 12,
              "variableName": "props",
              "startLine": 215,
              "startColumn": 16,
              "endLine": 215,
              "endColumn": 21,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                )\n            );\n        }\n        return props;\n    }\n\n    default Admin admin(Map<String, Object> configs) {"
            },
            {
              "step": 13,
              "variableName": "setClientSaslConfig(props)",
              "startLine": 199,
              "startColumn": 29,
              "endLine": 199,
              "endColumn": 55,
              "uri": "kafka-4.0.0/test-common/test-common-runtime/src/main/java/org/apache/kafka/common/test/ClusterInstance.java",
              "type": "HashMap [<map.value>] : String",
              "code": "            props.putIfAbsent(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n            props.remove(AdminClientConfig.BOOTSTRAP_CONTROLLERS_CONFIG);\n        }\n        return Admin.create(setClientSaslConfig(props));\n    }\n\n    default Map<String, Object> setClientSaslConfig(Map<String, Object> configs) {"
            },
            {
              "step": 14,
              "variableName": "Map<String, Object> conf",
              "startLine": 142,
              "startColumn": 25,
              "endLine": 142,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param conf The configuration.\n     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n"
            },
            {
              "step": 15,
              "variableName": "conf",
              "startLine": 143,
              "startColumn": 70,
              "endLine": 143,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "Map<?, ?> props",
              "startLine": 297,
              "startColumn": 33,
              "endLine": 297,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "props",
              "startLine": 298,
              "startColumn": 23,
              "endLine": 298,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 18,
              "variableName": "Map<?, ?> originals",
              "startLine": 145,
              "startColumn": 49,
              "endLine": 145,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 19,
              "variableName": "originals",
              "startLine": 146,
              "startColumn": 26,
              "endLine": 146,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 20,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 21,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 22,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 23,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 24,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 25,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 26,
              "variableName": "entry",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 27,
              "variableName": "entry.getValue()",
              "startLine": 1480,
              "startColumn": 28,
              "endLine": 1480,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 28,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 29,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.value>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 31,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 32,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 33,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 34,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 35,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 36,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 37,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 38,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 39,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 40,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 41,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 42,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 43,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 44,
              "variableName": "this(definition, originals, Collections.emptyMap(), doLog);",
              "startLine": 146,
              "startColumn": 9,
              "endLine": 146,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }\n"
            },
            {
              "step": 45,
              "variableName": "AbstractConfig",
              "startLine": 145,
              "startColumn": 12,
              "endLine": 145,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.value>] : String",
              "code": "     * @param originals  the configuration properties plus any optional config provider properties; may not be null\n     * @param doLog      whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n\n    }"
            },
            {
              "step": 46,
              "variableName": "super(CONFIG, props, doLog);",
              "startLine": 298,
              "startColumn": 9,
              "endLine": 298,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n\n    public static Set<String> configNames() {"
            },
            {
              "step": 47,
              "variableName": "AdminClientConfig",
              "startLine": 297,
              "startColumn": 15,
              "endLine": 297,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        this(props, false);\n    }\n\n    protected AdminClientConfig(Map<?, ?> props, boolean doLog) {\n        super(CONFIG, props, doLog);\n    }\n"
            },
            {
              "step": 48,
              "variableName": "new AdminClientConfig(conf, true)",
              "startLine": 143,
              "startColumn": 48,
              "endLine": 143,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/Admin.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return The new KafkaAdminClient.\n     */\n    static Admin create(Map<String, Object> conf) {\n        return KafkaAdminClient.createInternal(new AdminClientConfig(conf, true), null, null);\n    }\n\n    /**"
            },
            {
              "step": 49,
              "variableName": "AdminClientConfig config",
              "startLine": 518,
              "startColumn": 9,
              "endLine": 518,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    }\n\n    static KafkaAdminClient createInternal(\n        AdminClientConfig config,\n        TimeoutProcessorFactory timeoutProcessorFactory,\n        HostResolver hostResolver\n    ) {"
            },
            {
              "step": 50,
              "variableName": "config",
              "startLine": 550,
              "startColumn": 61,
              "endLine": 550,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            MetricsContext metricsContext = new KafkaMetricsContext(JMX_PREFIX,\n                    config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n            metrics = new Metrics(metricConfig, reporters, time, metricsContext);\n            networkClient = ClientUtils.createNetworkClient(config,\n                clientId,\n                metrics,\n                \"admin-client\","
            },
            {
              "step": 51,
              "variableName": "AbstractConfig config",
              "startLine": 206,
              "startColumn": 53,
              "endLine": 206,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                null);\n    }\n\n    public static NetworkClient createNetworkClient(AbstractConfig config,\n                                                    String clientId,\n                                                    Metrics metrics,\n                                                    String metricsGroupPrefix,"
            },
            {
              "step": 52,
              "variableName": "config",
              "startLine": 224,
              "startColumn": 63,
              "endLine": 224,
              "endColumn": 69,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        Selector selector = null;\n\n        try {\n            channelBuilder = ClientUtils.createChannelBuilder(config, time, logContext);\n            selector = new Selector(config.getLong(CommonClientConfigs.CONNECTIONS_MAX_IDLE_MS_CONFIG),\n                    metrics,\n                    time,"
            },
            {
              "step": 53,
              "variableName": "AbstractConfig config",
              "startLine": 117,
              "startColumn": 55,
              "endLine": 117,
              "endColumn": 76,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     *\n     * @return configured ChannelBuilder based on the configs.\n     */\n    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,"
            },
            {
              "step": 54,
              "variableName": "config",
              "startLine": 120,
              "startColumn": 96,
              "endLine": 120,
              "endColumn": 102,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/clients/ClientUtils.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder createChannelBuilder(AbstractConfig config, Time time, LogContext logContext) {\n        SecurityProtocol securityProtocol = SecurityProtocol.forName(config.getString(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG));\n        String clientSaslMechanism = config.getString(SaslConfigs.SASL_MECHANISM);\n        return ChannelBuilders.clientChannelBuilder(securityProtocol, JaasContext.Type.CLIENT, config, null,\n                clientSaslMechanism, time, logContext);\n    }\n"
            },
            {
              "step": 55,
              "variableName": "AbstractConfig config",
              "startLine": 67,
              "startColumn": 13,
              "endLine": 67,
              "endColumn": 34,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    public static ChannelBuilder clientChannelBuilder(\n            SecurityProtocol securityProtocol,\n            JaasContext.Type contextType,\n            AbstractConfig config,\n            ListenerName listenerName,\n            String clientSaslMechanism,\n            Time time,"
            },
            {
              "step": 56,
              "variableName": "config",
              "startLine": 79,
              "startColumn": 77,
              "endLine": 79,
              "endColumn": 83,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "            if (clientSaslMechanism == null)\n                throw new IllegalArgumentException(\"`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `\" + securityProtocol + \"`\");\n        }\n        return create(securityProtocol, ConnectionMode.CLIENT, contextType, config, listenerName, false, clientSaslMechanism,\n            null, null, time, logContext, null);\n    }\n"
            },
            {
              "step": 57,
              "variableName": "AbstractConfig config",
              "startLine": 113,
              "startColumn": 42,
              "endLine": 113,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "    private static ChannelBuilder create(SecurityProtocol securityProtocol,\n                                         ConnectionMode connectionMode,\n                                         JaasContext.Type contextType,\n                                         AbstractConfig config,\n                                         ListenerName listenerName,\n                                         boolean isInterBrokerListener,\n                                         String clientSaslMechanism,"
            },
            {
              "step": 58,
              "variableName": "config",
              "startLine": 122,
              "startColumn": 61,
              "endLine": 122,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 59,
              "variableName": "final AbstractConfig config",
              "startLine": 196,
              "startColumn": 54,
              "endLine": 196,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * @return a mutable RecordingMap. The elements got from RecordingMap are marked as \"used\".\n     */\n    @SuppressWarnings(\"unchecked\")\n    static Map<String, Object> channelBuilderConfigs(final AbstractConfig config, final ListenerName listenerName) {\n        Map<String, Object> parsedConfigs;\n        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();"
            },
            {
              "step": 60,
              "variableName": "config",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 61,
              "variableName": "valuesWithPrefixOverride",
              "startLine": 299,
              "startColumn": 32,
              "endLine": 299,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     * </ul>\n     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {"
            },
            {
              "step": 62,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AdminClientConfig [originals, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 63,
              "variableName": "originals",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 64,
              "variableName": "originals.entrySet()",
              "startLine": 301,
              "startColumn": 43,
              "endLine": 301,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Set [<element>, <map.value>] : String",
              "code": "     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);"
            },
            {
              "step": 65,
              "variableName": "entry",
              "startLine": 302,
              "startColumn": 17,
              "endLine": 302,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && entry.getKey().length() > prefix.length()) {\n                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)"
            },
            {
              "step": 66,
              "variableName": "entry",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 87,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Entry [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 67,
              "variableName": "entry.getValue()",
              "startLine": 306,
              "startColumn": 82,
              "endLine": 306,
              "endColumn": 98,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 68,
              "variableName": "Object value",
              "startLine": 528,
              "startColumn": 38,
              "endLine": 528,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        return values;\n    }\n\n    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);"
            },
            {
              "step": 69,
              "variableName": "value",
              "startLine": 531,
              "startColumn": 47,
              "endLine": 531,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 70,
              "variableName": "Object value",
              "startLine": 690,
              "startColumn": 49,
              "endLine": 690,
              "endColumn": 61,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param type  The expected type\n     * @return The parsed object\n     */\n    public static Object parseType(String name, Object value, Type type) {\n        try {\n            if (value == null) return null;\n"
            },
            {
              "step": 71,
              "variableName": "value",
              "startLine": 708,
              "startColumn": 32,
              "endLine": 708,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                        else\n                            throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                    } else if (value instanceof Boolean)\n                        return value;\n                    else\n                        throw new ConfigException(name, value, \"Expected value to be either true or false\");\n                case PASSWORD:"
            },
            {
              "step": 72,
              "variableName": "parseType(key.name, value, key.type)",
              "startLine": 531,
              "startColumn": 27,
              "endLine": 531,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    Object parseValue(ConfigKey key, Object value, boolean isSet) {\n        Object parsedValue;\n        if (isSet) {\n            parsedValue = parseType(key.name, value, key.type);\n        // props map doesn't contain setting, the key is required because no default value specified - its an error\n        } else if (NO_DEFAULT_VALUE.equals(key.defaultValue)) {\n            throw new ConfigException(\"Missing required configuration \\\"\" + key.name + \"\\\" which has no default value.\");"
            },
            {
              "step": 73,
              "variableName": "parsedValue",
              "startLine": 542,
              "startColumn": 16,
              "endLine": 542,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.validator != null) {\n            key.validator.ensureValid(key.name, parsedValue);\n        }\n        return parsedValue;\n    }\n\n    /**"
            },
            {
              "step": 74,
              "variableName": "definition.parseValue(configKey, entry.getValue(), true)",
              "startLine": 306,
              "startColumn": 49,
              "endLine": 306,
              "endColumn": 105,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 75,
              "variableName": "result",
              "startLine": 306,
              "startColumn": 21,
              "endLine": 306,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                String keyWithNoPrefix = entry.getKey().substring(prefix.length());\n                ConfigDef.ConfigKey configKey = definition.configKeys().get(keyWithNoPrefix);\n                if (configKey != null)\n                    result.put(keyWithNoPrefix, definition.parseValue(configKey, entry.getValue(), true));\n                else {\n                    String keyWithNoSecondaryPrefix = keyWithNoPrefix.substring(keyWithNoPrefix.indexOf('.') + 1);\n                    configKey = definition.configKeys().get(keyWithNoSecondaryPrefix);"
            },
            {
              "step": 76,
              "variableName": "result",
              "startLine": 315,
              "startColumn": 16,
              "endLine": 315,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                }\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 77,
              "variableName": "config.valuesWithPrefixOverride(listenerName.configPrefix())",
              "startLine": 201,
              "startColumn": 29,
              "endLine": 201,
              "endColumn": 89,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (listenerName == null)\n            parsedConfigs = (Map<String, Object>) config.values();\n        else\n            parsedConfigs = config.valuesWithPrefixOverride(listenerName.configPrefix());\n\n        config.originals().entrySet().stream()\n            .filter(e -> !parsedConfigs.containsKey(e.getKey())) // exclude already parsed configs"
            },
            {
              "step": 78,
              "variableName": "parsedConfigs",
              "startLine": 211,
              "startColumn": 16,
              "endLine": 211,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            // exclude keys like `{mechanism}.some.prop` if \"listener.name.\" prefix is present and key `some.prop` exists in parsed configs.\n            .filter(e -> !(listenerName != null && parsedConfigs.containsKey(e.getKey().substring(e.getKey().indexOf('.') + 1))))\n            .forEach(e -> parsedConfigs.put(e.getKey(), e.getValue()));\n        return parsedConfigs;\n    }\n\n    private static void requireNonNullMode(ConnectionMode connectionMode, SecurityProtocol securityProtocol) {"
            },
            {
              "step": 79,
              "variableName": "channelBuilderConfigs(config, listenerName)",
              "startLine": 122,
              "startColumn": 39,
              "endLine": 122,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                                         Time time,\n                                         LogContext logContext,\n                                         Function<Short, ApiVersionsResponse> apiVersionSupplier) {\n        Map<String, Object> configs = channelBuilderConfigs(config, listenerName);\n\n        ChannelBuilder channelBuilder;\n        switch (securityProtocol) {"
            },
            {
              "step": 80,
              "variableName": "configs",
              "startLine": 188,
              "startColumn": 34,
              "endLine": 188,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/ChannelBuilders.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "                throw new IllegalArgumentException(\"Unexpected securityProtocol \" + securityProtocol);\n        }\n\n        channelBuilder.configure(configs);\n        return channelBuilder;\n    }\n"
            },
            {
              "step": 81,
              "variableName": "Map<String, ?> configs",
              "startLine": 141,
              "startColumn": 27,
              "endLine": 141,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        try {\n            this.configs = configs;\n            if (connectionMode == ConnectionMode.SERVER) {"
            },
            {
              "step": 82,
              "variableName": "configs",
              "startLine": 180,
              "startColumn": 43,
              "endLine": 180,
              "endColumn": 50,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/network/SaslChannelBuilder.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "            if (this.securityProtocol == SecurityProtocol.SASL_SSL) {\n                // Disable SSL client authentication as we are using SASL authentication\n                this.sslFactory = new SslFactory(connectionMode, sslClientAuthOverride, isInterBrokerListener);\n                this.sslFactory.configure(configs);\n            }\n        } catch (Throwable e) {\n            close();"
            },
            {
              "step": 83,
              "variableName": "Map<String, ?> configs",
              "startLine": 89,
              "startColumn": 27,
              "endLine": 89,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) throws KafkaException {\n        if (sslEngineFactory != null) {\n            throw new IllegalStateException(\"SslFactory was already configured.\");\n        }"
            },
            {
              "step": 84,
              "variableName": "(Map<String, Object>) configs",
              "startLine": 96,
              "startColumn": 43,
              "endLine": 96,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.endpointIdentification = (String) configs.get(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG);\n\n        // The input map must be a mutable RecordingMap in production.\n        Map<String, Object> nextConfigs = (Map<String, Object>) configs;\n        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }"
            },
            {
              "step": 85,
              "variableName": "nextConfigs",
              "startLine": 100,
              "startColumn": 64,
              "endLine": 100,
              "endColumn": 75,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        if (clientAuthConfigOverride != null) {\n            nextConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, clientAuthConfigOverride);\n        }\n        SslEngineFactory builder = instantiateSslEngineFactory(nextConfigs);\n        if (keystoreVerifiableUsingTruststore) {\n            try {\n                SslEngineValidator.validate(builder, builder);"
            },
            {
              "step": 86,
              "variableName": "Map<String, Object> configs",
              "startLine": 137,
              "startColumn": 58,
              "endLine": 137,
              "endColumn": 85,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        }\n    }\n\n    private SslEngineFactory instantiateSslEngineFactory(Map<String, Object> configs) {\n        @SuppressWarnings(\"unchecked\")\n        Class<? extends SslEngineFactory> sslEngineFactoryClass =\n                (Class<? extends SslEngineFactory>) configs.get(SslConfigs.SSL_ENGINE_FACTORY_CLASS_CONFIG);"
            },
            {
              "step": 87,
              "variableName": "configs",
              "startLine": 147,
              "startColumn": 36,
              "endLine": 147,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/SslFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        } else {\n            sslEngineFactory = Utils.newInstance(sslEngineFactoryClass);\n        }\n        sslEngineFactory.configure(configs);\n        this.sslEngineFactoryConfig = configs;\n        return sslEngineFactory;\n    }"
            },
            {
              "step": 88,
              "variableName": "Map<String, ?> configs",
              "startLine": 133,
              "startColumn": 27,
              "endLine": 133,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = Collections.unmodifiableMap(configs);\n        this.protocol = (String) configs.get(SslConfigs.SSL_PROTOCOL_CONFIG);\n        this.provider = (String) configs.get(SslConfigs.SSL_PROVIDER_CONFIG);"
            },
            {
              "step": 89,
              "variableName": "configs",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 33,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "RecordingMap [<map.value>] : String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 90,
              "variableName": "configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 26,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 91,
              "variableName": "(String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG)",
              "startLine": 163,
              "startColumn": 17,
              "endLine": 163,
              "endColumn": 78,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        this.tmfAlgorithm = (String) configs.get(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n\n        this.keystore = createKeystore((String) configs.get(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG),\n                (String) configs.get(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEY_PASSWORD_CONFIG),\n                (Password) configs.get(SslConfigs.SSL_KEYSTORE_KEY_CONFIG),"
            },
            {
              "step": 92,
              "variableName": "String path",
              "startLine": 278,
              "startColumn": 57,
              "endLine": 278,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "    }\n\n    // Visibility to override for testing\n    protected SecurityStore createKeystore(String type, String path, Password password, Password keyPassword, Password privateKey, Password certificateChain) {\n        if (privateKey != null) {\n            if (!PEM_TYPE.equals(type))\n                throw new InvalidConfigurationException(\"SSL private key can be specified only for PEM, but key store type is \" + type + \".\");"
            },
            {
              "step": 93,
              "variableName": "path",
              "startLine": 302,
              "startColumn": 45,
              "endLine": 302,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        } else if (path != null && password == null) {\n            throw new InvalidConfigurationException(\"SSL key store is specified, but key store password is not specified.\");\n        } else if (path != null && password != null) {\n            return new FileBasedStore(type, path, password, keyPassword, true);\n        } else\n            return null; // path == null, clients may use this path with brokers that don't require client auth\n    }"
            },
            {
              "step": 94,
              "variableName": "String path",
              "startLine": 345,
              "startColumn": 37,
              "endLine": 345,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "        private final Long fileLastModifiedMs;\n        private final KeyStore keyStore;\n\n        FileBasedStore(String type, String path, Password password, Password keyPassword, boolean isKeyStore) {\n            Objects.requireNonNull(type, \"type must not be null\");\n            this.type = type;\n            this.path = path;"
            },
            {
              "step": 95,
              "variableName": "path",
              "startLine": 351,
              "startColumn": 49,
              "endLine": 351,
              "endColumn": 53,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            this.path = path;\n            this.password = password;\n            this.keyPassword = keyPassword;\n            fileLastModifiedMs = lastModifiedMs(path);\n            this.keyStore = load(isKeyStore);\n        }\n"
            },
            {
              "step": 96,
              "variableName": "String path",
              "startLine": 384,
              "startColumn": 37,
              "endLine": 384,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "String",
              "code": "            }\n        }\n\n        private Long lastModifiedMs(String path) {\n            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {"
            },
            {
              "step": 97,
              "variableName": "\"Modification time of key store could not be obtained: \" + path",
              "startLine": 388,
              "startColumn": 27,
              "endLine": 388,
              "endColumn": 90,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/security/ssl/DefaultSslEngineFactory.java",
              "type": "",
              "code": "            try {\n                return Files.getLastModifiedTime(Paths.get(path)).toMillis();\n            } catch (IOException e) {\n                log.error(\"Modification time of key store could not be obtained: \" + path, e);\n                return null;\n            }\n        }"
            }
          ],
          "label": "No",
          "probability": 0.8417481184005737
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "WorkerConfig.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG",
              "startLine": 137,
              "startColumn": 25,
              "endLine": 137,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_TRUSTSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYMANGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_KEYMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTMANAGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "key.name",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 21,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 22,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 24,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 26,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 28,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 163,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 33,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 40,
              "endLine": 491,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return this\n     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n"
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 492,
              "startColumn": 16,
              "endLine": 492,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "withClientSslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 130,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 37,
              "variableName": "withClientSaslSupport",
              "startLine": 499,
              "startColumn": 22,
              "endLine": 499,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * Add standard SASL client configuration options.\n     * @return this\n     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 501,
              "startColumn": 16,
              "endLine": 501,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 39,
              "variableName": "withClientSaslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 131,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 40,
              "variableName": "CLIENT_CONFIG_DEF",
              "startLine": 117,
              "startColumn": 28,
              "endLine": 117,
              "endColumn": 45,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 41,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF",
              "startLine": 156,
              "startColumn": 25,
              "endLine": 156,
              "endColumn": 61,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "\n        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 42,
              "variableName": "names",
              "startLine": 113,
              "startColumn": 24,
              "endLine": 113,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     *\n     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n"
            },
            {
              "step": 43,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 44,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 45,
              "variableName": "configKeys.keySet()",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 46,
              "variableName": "Collections.unmodifiableSet(configKeys.keySet())",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 47,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF.names()",
              "startLine": 156,
              "startColumn": 25,
              "endLine": 156,
              "endColumn": 69,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Set [<element>] : String",
              "code": "\n        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 48,
              "variableName": "k",
              "startLine": 157,
              "startColumn": 34,
              "endLine": 157,
              "endColumn": 35,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);"
            },
            {
              "step": 49,
              "variableName": "\"producer.\" + k",
              "startLine": 159,
              "startColumn": 35,
              "endLine": 159,
              "endColumn": 50,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n            }"
            },
            {
              "step": 50,
              "variableName": "props",
              "startLine": 159,
              "startColumn": 17,
              "endLine": 159,
              "endColumn": 22,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n            }"
            },
            {
              "step": 51,
              "variableName": "props",
              "startLine": 175,
              "startColumn": 16,
              "endLine": 175,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            }\n        }\n \n        return props;\n    }\n\n    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z "
            },
            {
              "step": 52,
              "variableName": "clusterProps(sourceAndTarget.target())",
              "startLine": 181,
              "startColumn": 22,
              "endLine": 181,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 53,
              "variableName": "props",
              "startLine": 181,
              "startColumn": 9,
              "endLine": 181,
              "endColumn": 14,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 54,
              "variableName": "props",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 55,
              "variableName": "Map<String, String> props",
              "startLine": 269,
              "startColumn": 35,
              "endLine": 269,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        return getList(CONFIG_PROVIDERS_CONFIG);\n    } \n\n    Map<String, String> transform(Map<String, String> props) {\n        // transform worker config according to config.providers\n        List<String> providerNames = configProviders();\n        Map<String, ConfigProvider> providers = new HashMap<>();"
            },
            {
              "step": 56,
              "variableName": "props",
              "startLine": 282,
              "startColumn": 65,
              "endLine": 282,
              "endColumn": 70,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 57,
              "variableName": "Map<String, String> configs",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param configs the configuration values to be transformed\n     * @return an instance of {@link ConfigTransformerResult}\n     */\n    public ConfigTransformerResult transform(Map<String, String> configs) {\n        Map<String, Map<String, Set<String>>> keysByProvider = new HashMap<>();\n        Map<String, Map<String, Map<String, String>>> lookupsByProvider = new HashMap<>();\n"
            },
            {
              "step": 58,
              "variableName": "configs",
              "startLine": 117,
              "startColumn": 50,
              "endLine": 117,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 59,
              "variableName": "new HashMap<>(configs)",
              "startLine": 117,
              "startColumn": 36,
              "endLine": 117,
              "endColumn": 58,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 60,
              "variableName": "data",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 61,
              "variableName": "Map<String, String> data",
              "startLine": 37,
              "startColumn": 36,
              "endLine": 37,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 62,
              "variableName": "data",
              "startLine": 38,
              "startColumn": 21,
              "endLine": 38,
              "endColumn": 25,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 63,
              "variableName": "this",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "ConfigTransformerResult",
              "startLine": 37,
              "startColumn": 12,
              "endLine": 37,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 65,
              "variableName": "new ConfigTransformerResult(data, ttls)",
              "startLine": 121,
              "startColumn": 16,
              "endLine": 121,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 66,
              "variableName": "transformer.transform(props)",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 71,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 67,
              "variableName": "data",
              "startLine": 51,
              "startColumn": 32,
              "endLine": 51,
              "endColumn": 36,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     *\n     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "transformer.transform(props).data()",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 78,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 71,
              "variableName": "transformed",
              "startLine": 284,
              "startColumn": 16,
              "endLine": 284,
              "endColumn": 27,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }\n\n    protected static ConfigDef config() {"
            },
            {
              "step": 72,
              "variableName": "transform(props)",
              "startLine": 197,
              "startColumn": 17,
              "endLine": 197,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 73,
              "variableName": "props",
              "startLine": 213,
              "startColumn": 16,
              "endLine": 213,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putIfAbsent(VALUE_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS); \n        props.putIfAbsent(HEADER_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS);\n\n        return props;\n    }\n\n    Set<String> allConfigNames() {"
            },
            {
              "step": 74,
              "variableName": "config.workerConfig(sourceAndTarget)",
              "startLine": 238,
              "startColumn": 43,
              "endLine": 238,
              "endColumn": 79,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    private void addHerder(SourceAndTarget sourceAndTarget) {\n        log.info(\"creating herder for \" + sourceAndTarget.toString());\n        Map<String, String> workerProps = config.workerConfig(sourceAndTarget);\n        List<String> restNamespace;\n        try {\n            String encodedSource = encodePath(sourceAndTarget.source());"
            },
            {
              "step": 75,
              "variableName": "workerProps",
              "startLine": 250,
              "startColumn": 69,
              "endLine": 250,
              "endColumn": 80,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "        String workerId = sourceAndTarget.toString();\n        Plugins plugins = new Plugins(workerProps);\n        plugins.compareAndSwapWithDelegatingLoader();\n        DistributedConfig distributedConfig = new DistributedConfig(workerProps);\n        String kafkaClusterId = distributedConfig.kafkaClusterId();\n        String clientIdBase = ConnectUtils.clientIdBase(distributedConfig);\n        // Create the admin client to be shared by all backing stores for this herder"
            },
            {
              "step": 76,
              "variableName": "Map<String, String> props",
              "startLine": 597,
              "startColumn": 30,
              "endLine": 597,
              "endColumn": 55,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        return super.postProcessParsedConfig(parsedValues);\n    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n"
            },
            {
              "step": 77,
              "variableName": "props",
              "startLine": 598,
              "startColumn": 29,
              "endLine": 598,
              "endColumn": 34,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n\n    // Visible for testing"
            },
            {
              "step": 78,
              "variableName": "Map<String, String> props",
              "startLine": 602,
              "startColumn": 38,
              "endLine": 602,
              "endColumn": 63,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));"
            },
            {
              "step": 79,
              "variableName": "props",
              "startLine": 603,
              "startColumn": 31,
              "endLine": 603,
              "endColumn": 36,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));\n        validateInterWorkerKeyConfigs();"
            },
            {
              "step": 80,
              "variableName": "Map<String, String> props",
              "startLine": 431,
              "startColumn": 47,
              "endLine": 431,
              "endColumn": 72,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);"
            },
            {
              "step": 81,
              "variableName": "props",
              "startLine": 432,
              "startColumn": 27,
              "endLine": 432,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 82,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 83,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 84,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 85,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 86,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 87,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 88,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 89,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 90,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 91,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 92,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 93,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 94,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 95,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 96,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 97,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 98,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 99,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 100,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 101,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 102,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 103,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 104,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 105,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 106,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 107,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 108,
              "variableName": "super(definition, props, Utils.castToStringObjectMap(props), true);",
              "startLine": 432,
              "startColumn": 9,
              "endLine": 432,
              "endColumn": 76,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 109,
              "variableName": "logInternalConverterRemovalWarnings(props)",
              "startLine": 433,
              "startColumn": 9,
              "endLine": 433,
              "endColumn": 51,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }\n"
            },
            {
              "step": 110,
              "variableName": "logInternalConverterRemovalWarnings",
              "startLine": 301,
              "startColumn": 18,
              "endLine": 301,
              "endColumn": 53,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "        }\n    }\n\n    private void logInternalConverterRemovalWarnings(Map<String, String> props) {\n        List<String> removedProperties = new ArrayList<>();\n        for (String property : Arrays.asList(\"internal.key.converter\", \"internal.value.converter\")) {\n            if (props.containsKey(property)) {"
            },
            {
              "step": 111,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 112,
              "variableName": "originalsWithPrefix",
              "startLine": 266,
              "startColumn": 32,
              "endLine": 266,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param prefix the prefix to use as a filter\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n"
            },
            {
              "step": 113,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 114,
              "variableName": "originalsWithPrefix",
              "startLine": 277,
              "startColumn": 32,
              "endLine": 277,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param strip  strip the prefix before adding to the output if set true\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;"
            },
            {
              "step": 115,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 116,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 117,
              "variableName": "Map<String, V> map",
              "startLine": 1631,
              "startColumn": 56,
              "endLine": 1631,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n"
            },
            {
              "step": 118,
              "variableName": "map",
              "startLine": 1632,
              "startColumn": 34,
              "endLine": 1632,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 119,
              "variableName": "Map<String, V> map",
              "startLine": 1646,
              "startColumn": 56,
              "endLine": 1646,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {"
            },
            {
              "step": 120,
              "variableName": "map",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 121,
              "variableName": "map.entrySet()",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 122,
              "variableName": "entry",
              "startLine": 1649,
              "startColumn": 17,
              "endLine": 1649,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else"
            },
            {
              "step": 123,
              "variableName": "entry",
              "startLine": 1653,
              "startColumn": 32,
              "endLine": 1653,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 124,
              "variableName": "entry.getKey()",
              "startLine": 1653,
              "startColumn": 32,
              "endLine": 1653,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 125,
              "variableName": "result",
              "startLine": 1653,
              "startColumn": 21,
              "endLine": 1653,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 126,
              "variableName": "result",
              "startLine": 1656,
              "startColumn": 16,
              "endLine": 1656,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 127,
              "variableName": "entriesWithPrefix(map, prefix, strip, false)",
              "startLine": 1632,
              "startColumn": 16,
              "endLine": 1632,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 128,
              "variableName": "Utils.entriesWithPrefix(originals, prefix, strip)",
              "startLine": 279,
              "startColumn": 23,
              "endLine": 279,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 129,
              "variableName": "result",
              "startLine": 279,
              "startColumn": 9,
              "endLine": 279,
              "endColumn": 15,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 130,
              "variableName": "result",
              "startLine": 280,
              "startColumn": 16,
              "endLine": 280,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 131,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 132,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 133,
              "variableName": "originalsWithPrefix(property + \".\").keySet()",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 82,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Set [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 134,
              "variableName": "removedProperties",
              "startLine": 307,
              "startColumn": 13,
              "endLine": 307,
              "endColumn": 30,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "ArrayList [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 135,
              "variableName": "removedProperties",
              "startLine": 318,
              "startColumn": 21,
              "endLine": 318,
              "endColumn": 38,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "",
              "code": "                            + \"set to false will be used. For more information, please visit \"\n                            + \"https://kafka.apache.org/documentation/#upgrade and consult the upgrade notes\"\n                            + \"for the 3.0 release.\",\n                    removedProperties);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.9949856996536255
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG",
              "startLine": 137,
              "startColumn": 25,
              "endLine": 137,
              "endColumn": 66,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_TRUSTSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYMANGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_KEYMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_TRUSTMANAGER_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_DOC)\n                .define(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM, ConfigDef.Importance.LOW, SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 127,
              "startColumn": 36,
              "endLine": 127,
              "endColumn": 39,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }\n        if (key.group != null && !groups.contains(key.group)) {"
            },
            {
              "step": 18,
              "variableName": "key.name",
              "startLine": 127,
              "startColumn": 36,
              "endLine": 127,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }\n        if (key.group != null && !groups.contains(key.group)) {"
            },
            {
              "step": 19,
              "variableName": "key.name",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 21,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 22,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 23,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 24,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 25,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 26,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 27,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 28,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 29,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 30,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 136,
              "endColumn": 163,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 34,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 40,
              "endLine": 491,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return this\n     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n"
            },
            {
              "step": 36,
              "variableName": "this",
              "startLine": 492,
              "startColumn": 16,
              "endLine": 492,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 37,
              "variableName": "withClientSslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 130,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 38,
              "variableName": "withClientSaslSupport",
              "startLine": 499,
              "startColumn": 22,
              "endLine": 499,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * Add standard SASL client configuration options.\n     * @return this\n     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }"
            },
            {
              "step": 39,
              "variableName": "this",
              "startLine": 501,
              "startColumn": 16,
              "endLine": 501,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 40,
              "variableName": "withClientSaslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 131,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 41,
              "variableName": "CLIENT_CONFIG_DEF",
              "startLine": 117,
              "startColumn": 28,
              "endLine": 117,
              "endColumn": 45,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 42,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF",
              "startLine": 165,
              "startColumn": 25,
              "endLine": 165,
              "endColumn": 61,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "            }\n        }\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = rawProperties.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 43,
              "variableName": "names",
              "startLine": 113,
              "startColumn": 24,
              "endLine": 113,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     *\n     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n"
            },
            {
              "step": 44,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 45,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 46,
              "variableName": "configKeys.keySet()",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 47,
              "variableName": "Collections.unmodifiableSet(configKeys.keySet())",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 48,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF.names()",
              "startLine": 165,
              "startColumn": 25,
              "endLine": 165,
              "endColumn": 69,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Set [<element>] : String",
              "code": "            }\n        }\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = rawProperties.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 49,
              "variableName": "k",
              "startLine": 166,
              "startColumn": 42,
              "endLine": 166,
              "endColumn": 43,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        }\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = rawProperties.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);"
            },
            {
              "step": 50,
              "variableName": "\"producer.\" + k",
              "startLine": 168,
              "startColumn": 35,
              "endLine": 168,
              "endColumn": 50,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = rawProperties.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n                props.putIfAbsent(k, v);"
            },
            {
              "step": 51,
              "variableName": "props",
              "startLine": 168,
              "startColumn": 17,
              "endLine": 168,
              "endColumn": 22,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = rawProperties.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n                props.putIfAbsent(k, v);"
            },
            {
              "step": 52,
              "variableName": "props",
              "startLine": 175,
              "startColumn": 16,
              "endLine": 175,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            }\n        }\n \n        return props;\n    }\n\n    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z "
            },
            {
              "step": 53,
              "variableName": "clusterProps(sourceAndTarget.target())",
              "startLine": 181,
              "startColumn": 22,
              "endLine": 181,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 54,
              "variableName": "props",
              "startLine": 181,
              "startColumn": 9,
              "endLine": 181,
              "endColumn": 14,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 55,
              "variableName": "props",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 56,
              "variableName": "Map<String, String> props",
              "startLine": 269,
              "startColumn": 35,
              "endLine": 269,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        return getList(CONFIG_PROVIDERS_CONFIG);\n    } \n\n    Map<String, String> transform(Map<String, String> props) {\n        // transform worker config according to config.providers\n        List<String> providerNames = configProviders();\n        Map<String, ConfigProvider> providers = new HashMap<>();"
            },
            {
              "step": 57,
              "variableName": "props",
              "startLine": 282,
              "startColumn": 65,
              "endLine": 282,
              "endColumn": 70,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 58,
              "variableName": "Map<String, String> configs",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param configs the configuration values to be transformed\n     * @return an instance of {@link ConfigTransformerResult}\n     */\n    public ConfigTransformerResult transform(Map<String, String> configs) {\n        Map<String, Map<String, Set<String>>> keysByProvider = new HashMap<>();\n        Map<String, Map<String, Map<String, String>>> lookupsByProvider = new HashMap<>();\n"
            },
            {
              "step": 59,
              "variableName": "configs",
              "startLine": 118,
              "startColumn": 49,
              "endLine": 118,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);"
            },
            {
              "step": 60,
              "variableName": "configs.entrySet()",
              "startLine": 118,
              "startColumn": 49,
              "endLine": 118,
              "endColumn": 67,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);"
            },
            {
              "step": 61,
              "variableName": "config",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "Entry [<map.key>] : String",
              "code": "        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }"
            },
            {
              "step": 62,
              "variableName": "config.getKey()",
              "startLine": 119,
              "startColumn": 22,
              "endLine": 119,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "String",
              "code": "        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }"
            },
            {
              "step": 63,
              "variableName": "data",
              "startLine": 119,
              "startColumn": 13,
              "endLine": 119,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }"
            },
            {
              "step": 64,
              "variableName": "data",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 65,
              "variableName": "Map<String, String> data",
              "startLine": 37,
              "startColumn": 36,
              "endLine": 37,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 66,
              "variableName": "data",
              "startLine": 38,
              "startColumn": 21,
              "endLine": 38,
              "endColumn": 25,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 67,
              "variableName": "this",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "ConfigTransformerResult",
              "startLine": 37,
              "startColumn": 12,
              "endLine": 37,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 69,
              "variableName": "new ConfigTransformerResult(data, ttls)",
              "startLine": 121,
              "startColumn": 16,
              "endLine": 121,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 70,
              "variableName": "transformer.transform(props)",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 71,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 71,
              "variableName": "data",
              "startLine": 51,
              "startColumn": 32,
              "endLine": 51,
              "endColumn": 36,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     *\n     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n"
            },
            {
              "step": 72,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 73,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 74,
              "variableName": "transformer.transform(props).data()",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 78,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 75,
              "variableName": "transformed",
              "startLine": 284,
              "startColumn": 16,
              "endLine": 284,
              "endColumn": 27,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }\n\n    protected static ConfigDef config() {"
            },
            {
              "step": 76,
              "variableName": "transform(props)",
              "startLine": 197,
              "startColumn": 17,
              "endLine": 197,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 77,
              "variableName": "props",
              "startLine": 213,
              "startColumn": 16,
              "endLine": 213,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putIfAbsent(VALUE_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS); \n        props.putIfAbsent(HEADER_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS);\n\n        return props;\n    }\n\n    Set<String> allConfigNames() {"
            },
            {
              "step": 78,
              "variableName": "config.workerConfig(sourceAndTarget)",
              "startLine": 238,
              "startColumn": 43,
              "endLine": 238,
              "endColumn": 79,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    private void addHerder(SourceAndTarget sourceAndTarget) {\n        log.info(\"creating herder for \" + sourceAndTarget.toString());\n        Map<String, String> workerProps = config.workerConfig(sourceAndTarget);\n        List<String> restNamespace;\n        try {\n            String encodedSource = encodePath(sourceAndTarget.source());"
            },
            {
              "step": 79,
              "variableName": "workerProps",
              "startLine": 250,
              "startColumn": 69,
              "endLine": 250,
              "endColumn": 80,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "        String workerId = sourceAndTarget.toString();\n        Plugins plugins = new Plugins(workerProps);\n        plugins.compareAndSwapWithDelegatingLoader();\n        DistributedConfig distributedConfig = new DistributedConfig(workerProps);\n        String kafkaClusterId = distributedConfig.kafkaClusterId();\n        String clientIdBase = ConnectUtils.clientIdBase(distributedConfig);\n        // Create the admin client to be shared by all backing stores for this herder"
            },
            {
              "step": 80,
              "variableName": "Map<String, String> props",
              "startLine": 597,
              "startColumn": 30,
              "endLine": 597,
              "endColumn": 55,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        return super.postProcessParsedConfig(parsedValues);\n    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n"
            },
            {
              "step": 81,
              "variableName": "props",
              "startLine": 598,
              "startColumn": 29,
              "endLine": 598,
              "endColumn": 34,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n\n    // Visible for testing"
            },
            {
              "step": 82,
              "variableName": "Map<String, String> props",
              "startLine": 602,
              "startColumn": 38,
              "endLine": 602,
              "endColumn": 63,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));"
            },
            {
              "step": 83,
              "variableName": "props",
              "startLine": 603,
              "startColumn": 31,
              "endLine": 603,
              "endColumn": 36,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));\n        validateInterWorkerKeyConfigs();"
            },
            {
              "step": 84,
              "variableName": "Map<String, String> props",
              "startLine": 431,
              "startColumn": 47,
              "endLine": 431,
              "endColumn": 72,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);"
            },
            {
              "step": 85,
              "variableName": "props",
              "startLine": 432,
              "startColumn": 27,
              "endLine": 432,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 86,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 87,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 88,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 89,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 90,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 91,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 92,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 93,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 94,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 95,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 96,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 97,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 98,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 99,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 100,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 101,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 102,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 103,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 104,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 105,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 106,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 107,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 108,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 109,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 110,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 111,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 112,
              "variableName": "super(definition, props, Utils.castToStringObjectMap(props), true);",
              "startLine": 432,
              "startColumn": 9,
              "endLine": 432,
              "endColumn": 76,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 113,
              "variableName": "logInternalConverterRemovalWarnings(props)",
              "startLine": 433,
              "startColumn": 9,
              "endLine": 433,
              "endColumn": 51,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }\n"
            },
            {
              "step": 114,
              "variableName": "logInternalConverterRemovalWarnings",
              "startLine": 301,
              "startColumn": 18,
              "endLine": 301,
              "endColumn": 53,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "        }\n    }\n\n    private void logInternalConverterRemovalWarnings(Map<String, String> props) {\n        List<String> removedProperties = new ArrayList<>();\n        for (String property : Arrays.asList(\"internal.key.converter\", \"internal.value.converter\")) {\n            if (props.containsKey(property)) {"
            },
            {
              "step": 115,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 116,
              "variableName": "originalsWithPrefix",
              "startLine": 266,
              "startColumn": 32,
              "endLine": 266,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param prefix the prefix to use as a filter\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n"
            },
            {
              "step": 117,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 118,
              "variableName": "originalsWithPrefix",
              "startLine": 277,
              "startColumn": 32,
              "endLine": 277,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param strip  strip the prefix before adding to the output if set true\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;"
            },
            {
              "step": 119,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 120,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 121,
              "variableName": "Map<String, V> map",
              "startLine": 1631,
              "startColumn": 56,
              "endLine": 1631,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n"
            },
            {
              "step": 122,
              "variableName": "map",
              "startLine": 1632,
              "startColumn": 34,
              "endLine": 1632,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 123,
              "variableName": "Map<String, V> map",
              "startLine": 1646,
              "startColumn": 56,
              "endLine": 1646,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {"
            },
            {
              "step": 124,
              "variableName": "map",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 125,
              "variableName": "map.entrySet()",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 126,
              "variableName": "entry",
              "startLine": 1649,
              "startColumn": 17,
              "endLine": 1649,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else"
            },
            {
              "step": 127,
              "variableName": "entry",
              "startLine": 1651,
              "startColumn": 32,
              "endLine": 1651,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }"
            },
            {
              "step": 128,
              "variableName": "entry.getKey()",
              "startLine": 1651,
              "startColumn": 32,
              "endLine": 1651,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }"
            },
            {
              "step": 129,
              "variableName": "entry.getKey().substring(prefix.length())",
              "startLine": 1651,
              "startColumn": 32,
              "endLine": 1651,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }"
            },
            {
              "step": 130,
              "variableName": "result",
              "startLine": 1651,
              "startColumn": 21,
              "endLine": 1651,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }"
            },
            {
              "step": 131,
              "variableName": "result",
              "startLine": 1656,
              "startColumn": 16,
              "endLine": 1656,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 132,
              "variableName": "entriesWithPrefix(map, prefix, strip, false)",
              "startLine": 1632,
              "startColumn": 16,
              "endLine": 1632,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 133,
              "variableName": "Utils.entriesWithPrefix(originals, prefix, strip)",
              "startLine": 279,
              "startColumn": 23,
              "endLine": 279,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 134,
              "variableName": "result",
              "startLine": 279,
              "startColumn": 9,
              "endLine": 279,
              "endColumn": 15,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 135,
              "variableName": "result",
              "startLine": 280,
              "startColumn": 16,
              "endLine": 280,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 136,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 137,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 138,
              "variableName": "originalsWithPrefix(property + \".\").keySet()",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 82,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Set [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 139,
              "variableName": "removedProperties",
              "startLine": 307,
              "startColumn": 13,
              "endLine": 307,
              "endColumn": 30,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "ArrayList [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 140,
              "variableName": "removedProperties",
              "startLine": 318,
              "startColumn": 21,
              "endLine": 318,
              "endColumn": 38,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "",
              "code": "                            + \"set to false will be used. For more information, please visit \"\n                            + \"https://kafka.apache.org/documentation/#upgrade and consult the upgrade notes\"\n                            + \"for the 3.0 release.\",\n                    removedProperties);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.9949856996536255
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_KEY_PASSWORD_CONFIG",
              "startLine": 131,
              "startColumn": 25,
              "endLine": 131,
              "endColumn": 59,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_KEYSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_KEY_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_KEY_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC)\n                .define(SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_CERTIFICATES_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "key.name",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 21,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 22,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 24,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 26,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 28,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOC",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 130,
              "endColumn": 161,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 33,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 40,
              "endLine": 491,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return this\n     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n"
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 492,
              "startColumn": 16,
              "endLine": 492,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "withClientSslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 130,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 37,
              "variableName": "withClientSaslSupport",
              "startLine": 499,
              "startColumn": 22,
              "endLine": 499,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * Add standard SASL client configuration options.\n     * @return this\n     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 501,
              "startColumn": 16,
              "endLine": 501,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 39,
              "variableName": "withClientSaslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 131,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 40,
              "variableName": "CLIENT_CONFIG_DEF",
              "startLine": 117,
              "startColumn": 28,
              "endLine": 117,
              "endColumn": 45,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 41,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF",
              "startLine": 156,
              "startColumn": 25,
              "endLine": 156,
              "endColumn": 61,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "\n        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 42,
              "variableName": "names",
              "startLine": 113,
              "startColumn": 24,
              "endLine": 113,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     *\n     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n"
            },
            {
              "step": 43,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 44,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 45,
              "variableName": "configKeys.keySet()",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 46,
              "variableName": "Collections.unmodifiableSet(configKeys.keySet())",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 47,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF.names()",
              "startLine": 156,
              "startColumn": 25,
              "endLine": 156,
              "endColumn": 69,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Set [<element>] : String",
              "code": "\n        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 48,
              "variableName": "k",
              "startLine": 157,
              "startColumn": 34,
              "endLine": 157,
              "endColumn": 35,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);"
            },
            {
              "step": 49,
              "variableName": "\"producer.\" + k",
              "startLine": 159,
              "startColumn": 35,
              "endLine": 159,
              "endColumn": 50,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n            }"
            },
            {
              "step": 50,
              "variableName": "props",
              "startLine": 159,
              "startColumn": 17,
              "endLine": 159,
              "endColumn": 22,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n            }"
            },
            {
              "step": 51,
              "variableName": "props",
              "startLine": 175,
              "startColumn": 16,
              "endLine": 175,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            }\n        }\n \n        return props;\n    }\n\n    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z "
            },
            {
              "step": 52,
              "variableName": "clusterProps(sourceAndTarget.target())",
              "startLine": 181,
              "startColumn": 22,
              "endLine": 181,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 53,
              "variableName": "props",
              "startLine": 181,
              "startColumn": 9,
              "endLine": 181,
              "endColumn": 14,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 54,
              "variableName": "props",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 55,
              "variableName": "Map<String, String> props",
              "startLine": 269,
              "startColumn": 35,
              "endLine": 269,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        return getList(CONFIG_PROVIDERS_CONFIG);\n    } \n\n    Map<String, String> transform(Map<String, String> props) {\n        // transform worker config according to config.providers\n        List<String> providerNames = configProviders();\n        Map<String, ConfigProvider> providers = new HashMap<>();"
            },
            {
              "step": 56,
              "variableName": "props",
              "startLine": 282,
              "startColumn": 65,
              "endLine": 282,
              "endColumn": 70,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 57,
              "variableName": "Map<String, String> configs",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param configs the configuration values to be transformed\n     * @return an instance of {@link ConfigTransformerResult}\n     */\n    public ConfigTransformerResult transform(Map<String, String> configs) {\n        Map<String, Map<String, Set<String>>> keysByProvider = new HashMap<>();\n        Map<String, Map<String, Map<String, String>>> lookupsByProvider = new HashMap<>();\n"
            },
            {
              "step": 58,
              "variableName": "configs",
              "startLine": 117,
              "startColumn": 50,
              "endLine": 117,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 59,
              "variableName": "new HashMap<>(configs)",
              "startLine": 117,
              "startColumn": 36,
              "endLine": 117,
              "endColumn": 58,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 60,
              "variableName": "data",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 61,
              "variableName": "Map<String, String> data",
              "startLine": 37,
              "startColumn": 36,
              "endLine": 37,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 62,
              "variableName": "data",
              "startLine": 38,
              "startColumn": 21,
              "endLine": 38,
              "endColumn": 25,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 63,
              "variableName": "this",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "ConfigTransformerResult",
              "startLine": 37,
              "startColumn": 12,
              "endLine": 37,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 65,
              "variableName": "new ConfigTransformerResult(data, ttls)",
              "startLine": 121,
              "startColumn": 16,
              "endLine": 121,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 66,
              "variableName": "transformer.transform(props)",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 71,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 67,
              "variableName": "data",
              "startLine": 51,
              "startColumn": 32,
              "endLine": 51,
              "endColumn": 36,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     *\n     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "transformer.transform(props).data()",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 78,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 71,
              "variableName": "transformed",
              "startLine": 284,
              "startColumn": 16,
              "endLine": 284,
              "endColumn": 27,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }\n\n    protected static ConfigDef config() {"
            },
            {
              "step": 72,
              "variableName": "transform(props)",
              "startLine": 197,
              "startColumn": 17,
              "endLine": 197,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 73,
              "variableName": "props",
              "startLine": 213,
              "startColumn": 16,
              "endLine": 213,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putIfAbsent(VALUE_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS); \n        props.putIfAbsent(HEADER_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS);\n\n        return props;\n    }\n\n    Set<String> allConfigNames() {"
            },
            {
              "step": 74,
              "variableName": "config.workerConfig(sourceAndTarget)",
              "startLine": 238,
              "startColumn": 43,
              "endLine": 238,
              "endColumn": 79,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    private void addHerder(SourceAndTarget sourceAndTarget) {\n        log.info(\"creating herder for \" + sourceAndTarget.toString());\n        Map<String, String> workerProps = config.workerConfig(sourceAndTarget);\n        List<String> restNamespace;\n        try {\n            String encodedSource = encodePath(sourceAndTarget.source());"
            },
            {
              "step": 75,
              "variableName": "workerProps",
              "startLine": 250,
              "startColumn": 69,
              "endLine": 250,
              "endColumn": 80,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "        String workerId = sourceAndTarget.toString();\n        Plugins plugins = new Plugins(workerProps);\n        plugins.compareAndSwapWithDelegatingLoader();\n        DistributedConfig distributedConfig = new DistributedConfig(workerProps);\n        String kafkaClusterId = distributedConfig.kafkaClusterId();\n        String clientIdBase = ConnectUtils.clientIdBase(distributedConfig);\n        // Create the admin client to be shared by all backing stores for this herder"
            },
            {
              "step": 76,
              "variableName": "Map<String, String> props",
              "startLine": 597,
              "startColumn": 30,
              "endLine": 597,
              "endColumn": 55,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        return super.postProcessParsedConfig(parsedValues);\n    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n"
            },
            {
              "step": 77,
              "variableName": "props",
              "startLine": 598,
              "startColumn": 29,
              "endLine": 598,
              "endColumn": 34,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n\n    // Visible for testing"
            },
            {
              "step": 78,
              "variableName": "Map<String, String> props",
              "startLine": 602,
              "startColumn": 38,
              "endLine": 602,
              "endColumn": 63,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));"
            },
            {
              "step": 79,
              "variableName": "props",
              "startLine": 603,
              "startColumn": 31,
              "endLine": 603,
              "endColumn": 36,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));\n        validateInterWorkerKeyConfigs();"
            },
            {
              "step": 80,
              "variableName": "Map<String, String> props",
              "startLine": 431,
              "startColumn": 47,
              "endLine": 431,
              "endColumn": 72,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);"
            },
            {
              "step": 81,
              "variableName": "props",
              "startLine": 432,
              "startColumn": 27,
              "endLine": 432,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 82,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 83,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 84,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 85,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 86,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 87,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 88,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 89,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 90,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 91,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 92,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 93,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 94,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 95,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 96,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 97,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 98,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 99,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 100,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 101,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 102,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 103,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 104,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 105,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 106,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 107,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 108,
              "variableName": "super(definition, props, Utils.castToStringObjectMap(props), true);",
              "startLine": 432,
              "startColumn": 9,
              "endLine": 432,
              "endColumn": 76,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 109,
              "variableName": "logInternalConverterRemovalWarnings(props)",
              "startLine": 433,
              "startColumn": 9,
              "endLine": 433,
              "endColumn": 51,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }\n"
            },
            {
              "step": 110,
              "variableName": "logInternalConverterRemovalWarnings",
              "startLine": 301,
              "startColumn": 18,
              "endLine": 301,
              "endColumn": 53,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "        }\n    }\n\n    private void logInternalConverterRemovalWarnings(Map<String, String> props) {\n        List<String> removedProperties = new ArrayList<>();\n        for (String property : Arrays.asList(\"internal.key.converter\", \"internal.value.converter\")) {\n            if (props.containsKey(property)) {"
            },
            {
              "step": 111,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 112,
              "variableName": "originalsWithPrefix",
              "startLine": 266,
              "startColumn": 32,
              "endLine": 266,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param prefix the prefix to use as a filter\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n"
            },
            {
              "step": 113,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 114,
              "variableName": "originalsWithPrefix",
              "startLine": 277,
              "startColumn": 32,
              "endLine": 277,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param strip  strip the prefix before adding to the output if set true\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;"
            },
            {
              "step": 115,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 116,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 117,
              "variableName": "Map<String, V> map",
              "startLine": 1631,
              "startColumn": 56,
              "endLine": 1631,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n"
            },
            {
              "step": 118,
              "variableName": "map",
              "startLine": 1632,
              "startColumn": 34,
              "endLine": 1632,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 119,
              "variableName": "Map<String, V> map",
              "startLine": 1646,
              "startColumn": 56,
              "endLine": 1646,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {"
            },
            {
              "step": 120,
              "variableName": "map",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 121,
              "variableName": "map.entrySet()",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 122,
              "variableName": "entry",
              "startLine": 1649,
              "startColumn": 17,
              "endLine": 1649,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else"
            },
            {
              "step": 123,
              "variableName": "entry",
              "startLine": 1653,
              "startColumn": 32,
              "endLine": 1653,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 124,
              "variableName": "entry.getKey()",
              "startLine": 1653,
              "startColumn": 32,
              "endLine": 1653,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 125,
              "variableName": "result",
              "startLine": 1653,
              "startColumn": 21,
              "endLine": 1653,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 126,
              "variableName": "result",
              "startLine": 1656,
              "startColumn": 16,
              "endLine": 1656,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 127,
              "variableName": "entriesWithPrefix(map, prefix, strip, false)",
              "startLine": 1632,
              "startColumn": 16,
              "endLine": 1632,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 128,
              "variableName": "Utils.entriesWithPrefix(originals, prefix, strip)",
              "startLine": 279,
              "startColumn": 23,
              "endLine": 279,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 129,
              "variableName": "result",
              "startLine": 279,
              "startColumn": 9,
              "endLine": 279,
              "endColumn": 15,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 130,
              "variableName": "result",
              "startLine": 280,
              "startColumn": 16,
              "endLine": 280,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 131,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 132,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 133,
              "variableName": "originalsWithPrefix(property + \".\").keySet()",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 82,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Set [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 134,
              "variableName": "removedProperties",
              "startLine": 307,
              "startColumn": 13,
              "endLine": 307,
              "endColumn": 30,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "ArrayList [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 135,
              "variableName": "removedProperties",
              "startLine": 318,
              "startColumn": 21,
              "endLine": 318,
              "endColumn": 38,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "",
              "code": "                            + \"set to false will be used. For more information, please visit \"\n                            + \"https://kafka.apache.org/documentation/#upgrade and consult the upgrade notes\"\n                            + \"for the 3.0 release.\",\n                    removedProperties);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.9963934421539307
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG",
              "startLine": 130,
              "startColumn": 25,
              "endLine": 130,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "String",
              "code": "                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_KEYSTORE_TYPE, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_KEYSTORE_TYPE_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_KEY_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_KEY_DOC)\n                .define(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG, ConfigDef.Type.PASSWORD, null,  ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC)"
            },
            {
              "step": 1,
              "variableName": "String name",
              "startLine": 411,
              "startColumn": 29,
              "endLine": 411,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "name",
              "startLine": 412,
              "startColumn": 23,
              "endLine": 412,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 3,
              "variableName": "String name",
              "startLine": 398,
              "startColumn": 29,
              "endLine": 398,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "name",
              "startLine": 399,
              "startColumn": 23,
              "endLine": 399,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "String name",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 6,
              "variableName": "name",
              "startLine": 237,
              "startColumn": 23,
              "endLine": 237,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "String name",
              "startLine": 196,
              "startColumn": 29,
              "endLine": 196,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 8,
              "variableName": "name",
              "startLine": 198,
              "startColumn": 23,
              "endLine": 198,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "String name",
              "startLine": 153,
              "startColumn": 29,
              "endLine": 153,
              "endColumn": 40,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 10,
              "variableName": "name",
              "startLine": 155,
              "startColumn": 37,
              "endLine": 155,
              "endColumn": 41,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 11,
              "variableName": "String name",
              "startLine": 1263,
              "startColumn": 27,
              "endLine": 1263,
              "endColumn": 38,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 12,
              "variableName": "name",
              "startLine": 1268,
              "startColumn": 25,
              "endLine": 1268,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 13,
              "variableName": "this",
              "startLine": 1268,
              "startColumn": 13,
              "endLine": 1268,
              "endColumn": 17,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,\n                         boolean internalConfig, String alternativeString) {\n            this.name = name;\n            this.type = type;\n            boolean hasDefault = !NO_DEFAULT_VALUE.equals(defaultValue);\n            this.defaultValue = hasDefault ? parseType(name, defaultValue, type) : NO_DEFAULT_VALUE;"
            },
            {
              "step": 14,
              "variableName": "ConfigKey",
              "startLine": 1263,
              "startColumn": 17,
              "endLine": 1263,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "                dependents, recommender, internalConfig, null);\n        }\n\n        private ConfigKey(String name, Type type, Object defaultValue, Validator validator,\n                         Importance importance, String documentation, String group,\n                         int orderInGroup, Width width, String displayName,\n                         List<String> dependents, Recommender recommender,"
            },
            {
              "step": 15,
              "variableName": "new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null)",
              "startLine": 155,
              "startColumn": 23,
              "endLine": 155,
              "endColumn": 179,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 16,
              "variableName": "ConfigKey key",
              "startLine": 126,
              "startColumn": 29,
              "endLine": 126,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 17,
              "variableName": "key",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigKey [name] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "key.name",
              "startLine": 133,
              "startColumn": 24,
              "endLine": 133,
              "endColumn": 32,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "configKeys",
              "startLine": 133,
              "startColumn": 9,
              "endLine": 133,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        if (key.group != null && !groups.contains(key.group)) {\n            groups.add(key.group);\n        }\n        configKeys.put(key.name, key);\n        return this;\n    }\n"
            },
            {
              "step": 21,
              "variableName": "define",
              "startLine": 126,
              "startColumn": 22,
              "endLine": 126,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        return defaultValues;\n    }\n\n    public ConfigDef define(ConfigKey key) {\n        if (configKeys.containsKey(key.name)) {\n            throw new ConfigException(\"Configuration \" + key.name + \" is defined twice.\");\n        }"
            },
            {
              "step": 22,
              "variableName": "define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null))",
              "startLine": 155,
              "startColumn": 16,
              "endLine": 155,
              "endColumn": 180,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }\n\n    /**"
            },
            {
              "step": 23,
              "variableName": "define",
              "startLine": 153,
              "startColumn": 22,
              "endLine": 153,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param recommender   the recommender provides valid values given the parent configuration values\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents, Recommender recommender) {\n        return define(new ConfigKey(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, recommender, false, null));\n    }"
            },
            {
              "step": 24,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null)",
              "startLine": 198,
              "startColumn": 16,
              "endLine": 198,
              "endColumn": 145,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "define",
              "startLine": 196,
              "startColumn": 22,
              "endLine": 196,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param dependents    the configurations that are dependents of this configuration\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName, List<String> dependents) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, dependents, null);\n    }"
            },
            {
              "step": 26,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList())",
              "startLine": 237,
              "startColumn": 16,
              "endLine": 237,
              "endColumn": 152,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }\n\n    /**"
            },
            {
              "step": 27,
              "variableName": "define",
              "startLine": 235,
              "startColumn": 22,
              "endLine": 235,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param displayName   the name suitable for display\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation,\n                            String group, int orderInGroup, Width width, String displayName) {\n        return define(name, type, defaultValue, validator, importance, documentation, group, orderInGroup, width, displayName, Collections.emptyList());\n    }"
            },
            {
              "step": 28,
              "variableName": "define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name)",
              "startLine": 399,
              "startColumn": 16,
              "endLine": 399,
              "endColumn": 114,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "define",
              "startLine": 398,
              "startColumn": 22,
              "endLine": 398,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation the documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Validator validator, Importance importance, String documentation) {\n        return define(name, type, defaultValue, validator, importance, documentation, null, -1, Width.NONE, name);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "define(name, type, defaultValue, null, importance, documentation)",
              "startLine": 412,
              "startColumn": 16,
              "endLine": 412,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n\n    /**"
            },
            {
              "step": 31,
              "variableName": "define",
              "startLine": 411,
              "startColumn": 22,
              "endLine": 411,
              "endColumn": 28,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @param documentation The documentation string for the config\n     * @return This ConfigDef so you can chain calls\n     */\n    public ConfigDef define(String name, Type type, Object defaultValue, Importance importance, String documentation) {\n        return define(name, type, defaultValue, null, importance, documentation);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTO",
              "startLine": 124,
              "startColumn": 9,
              "endLine": 129,
              "endColumn": 160,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)\n                .define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_ENABLED_PROTOCOLS_DOC)"
            },
            {
              "step": 33,
              "variableName": "ConfigDef config",
              "startLine": 123,
              "startColumn": 44,
              "endLine": 123,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/SslConfigs.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "        + \"Note that this will cause a tiny delay during establishment of new connections from mTLS clients to brokers due to the extra code for examining the certificate chain provided by the client. \"\n        + \"Note further that the implementation uses a custom truststore based on the standard Java truststore and thus might be considered a security risk due to not being as mature as the standard one.\";\n\n    public static void addClientSslSupport(ConfigDef config) {\n        config.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, SslConfigs.DEFAULT_SSL_PROTOCOL, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROTOCOL_DOC)\n                .define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.MEDIUM, SslConfigs.SSL_PROVIDER_DOC)\n                .define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, SslConfigs.SSL_CIPHER_SUITES_DOC)"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 491,
              "startColumn": 40,
              "endLine": 491,
              "endColumn": 44,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return this\n     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n"
            },
            {
              "step": 35,
              "variableName": "this",
              "startLine": 492,
              "startColumn": 16,
              "endLine": 492,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSslSupport() {\n        SslConfigs.addClientSslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 36,
              "variableName": "withClientSslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 130,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 37,
              "variableName": "withClientSaslSupport",
              "startLine": 499,
              "startColumn": 22,
              "endLine": 499,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * Add standard SASL client configuration options.\n     * @return this\n     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 501,
              "startColumn": 16,
              "endLine": 501,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     */\n    public ConfigDef withClientSaslSupport() {\n        SaslConfigs.addClientSaslSupport(this);\n        return this;\n    }\n\n    /**"
            },
            {
              "step": 39,
              "variableName": "withClientSaslSupport(...) : ConfigDef [configKeys, <map.key>] : String",
              "startLine": 117,
              "startColumn": 48,
              "endLine": 131,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 40,
              "variableName": "CLIENT_CONFIG_DEF",
              "startLine": 117,
              "startColumn": 28,
              "endLine": 117,
              "endColumn": 45,
              "uri": "kafka-4.0.0/connect/mirror-client/src/main/java/org/apache/kafka/connect/mirror/MirrorClientConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "    }\n\n    // Properties passed to internal Kafka clients\n    static final ConfigDef CLIENT_CONFIG_DEF = new ConfigDef()\n        .define(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG,\n            Type.LIST,\n            null,"
            },
            {
              "step": 41,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF",
              "startLine": 156,
              "startColumn": 25,
              "endLine": 156,
              "endColumn": 61,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "\n        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 42,
              "variableName": "names",
              "startLine": 113,
              "startColumn": 24,
              "endLine": 113,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     *\n     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n"
            },
            {
              "step": 43,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "ConfigDef [configKeys, <map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 44,
              "variableName": "configKeys",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 54,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "LinkedHashMap [<map.key>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 45,
              "variableName": "configKeys.keySet()",
              "startLine": 114,
              "startColumn": 44,
              "endLine": 114,
              "endColumn": 63,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 46,
              "variableName": "Collections.unmodifiableSet(configKeys.keySet())",
              "startLine": 114,
              "startColumn": 16,
              "endLine": 114,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigDef.java",
              "type": "Set [<element>] : String",
              "code": "     * @return new unmodifiable {@link Set} instance containing the keys\n     */\n    public Set<String> names() {\n        return Collections.unmodifiableSet(configKeys.keySet());\n    }\n\n    public Map<String, Object> defaultValues() {"
            },
            {
              "step": 47,
              "variableName": "MirrorClientConfig.CLIENT_CONFIG_DEF.names()",
              "startLine": 156,
              "startColumn": 25,
              "endLine": 156,
              "endColumn": 69,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Set [<element>] : String",
              "code": "\n        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);"
            },
            {
              "step": 48,
              "variableName": "k",
              "startLine": 157,
              "startColumn": 34,
              "endLine": 157,
              "endColumn": 35,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        props.putAll(stringsWithPrefixStripped(cluster + \".\"));\n\n        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);"
            },
            {
              "step": 49,
              "variableName": "\"producer.\" + k",
              "startLine": 159,
              "startColumn": 35,
              "endLine": 159,
              "endColumn": 50,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n            }"
            },
            {
              "step": 50,
              "variableName": "props",
              "startLine": 159,
              "startColumn": 17,
              "endLine": 159,
              "endColumn": 22,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (String k : MirrorClientConfig.CLIENT_CONFIG_DEF.names()) {\n            String v = props.get(k);\n            if (v != null) {\n                props.putIfAbsent(\"producer.\" + k, v);\n                props.putIfAbsent(\"consumer.\" + k, v);\n                props.putIfAbsent(\"admin.\" + k, v);\n            }"
            },
            {
              "step": 51,
              "variableName": "props",
              "startLine": 175,
              "startColumn": 16,
              "endLine": 175,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            }\n        }\n \n        return props;\n    }\n\n    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z "
            },
            {
              "step": 52,
              "variableName": "clusterProps(sourceAndTarget.target())",
              "startLine": 181,
              "startColumn": 22,
              "endLine": 181,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 53,
              "variableName": "props",
              "startLine": 181,
              "startColumn": 9,
              "endLine": 181,
              "endColumn": 14,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    // loads worker configs based on properties of the form x.y.z and cluster.x.y.z \n    public Map<String, String> workerConfig(SourceAndTarget sourceAndTarget) {\n        Map<String, String> props = new HashMap<>();\n        props.putAll(clusterProps(sourceAndTarget.target()));\n\n        // Accept common top-level configs that are otherwise ignored by MM2.\n        // N.B. all other worker properties should be configured for specific herders,"
            },
            {
              "step": 54,
              "variableName": "props",
              "startLine": 197,
              "startColumn": 27,
              "endLine": 197,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 55,
              "variableName": "Map<String, String> props",
              "startLine": 269,
              "startColumn": 35,
              "endLine": 269,
              "endColumn": 60,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        return getList(CONFIG_PROVIDERS_CONFIG);\n    } \n\n    Map<String, String> transform(Map<String, String> props) {\n        // transform worker config according to config.providers\n        List<String> providerNames = configProviders();\n        Map<String, ConfigProvider> providers = new HashMap<>();"
            },
            {
              "step": 56,
              "variableName": "props",
              "startLine": 282,
              "startColumn": 65,
              "endLine": 282,
              "endColumn": 70,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 57,
              "variableName": "Map<String, String> configs",
              "startLine": 77,
              "startColumn": 46,
              "endLine": 77,
              "endColumn": 73,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param configs the configuration values to be transformed\n     * @return an instance of {@link ConfigTransformerResult}\n     */\n    public ConfigTransformerResult transform(Map<String, String> configs) {\n        Map<String, Map<String, Set<String>>> keysByProvider = new HashMap<>();\n        Map<String, Map<String, Map<String, String>>> lookupsByProvider = new HashMap<>();\n"
            },
            {
              "step": 58,
              "variableName": "configs",
              "startLine": 117,
              "startColumn": 50,
              "endLine": 117,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 59,
              "variableName": "new HashMap<>(configs)",
              "startLine": 117,
              "startColumn": 36,
              "endLine": 117,
              "endColumn": 58,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n\n        // Perform the transformations by performing variable replacements\n        Map<String, String> data = new HashMap<>(configs);\n        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }"
            },
            {
              "step": 60,
              "variableName": "data",
              "startLine": 121,
              "startColumn": 44,
              "endLine": 121,
              "endColumn": 48,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 61,
              "variableName": "Map<String, String> data",
              "startLine": 37,
              "startColumn": 36,
              "endLine": 37,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 62,
              "variableName": "data",
              "startLine": 38,
              "startColumn": 21,
              "endLine": 38,
              "endColumn": 25,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 63,
              "variableName": "this",
              "startLine": 38,
              "startColumn": 9,
              "endLine": 38,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }\n"
            },
            {
              "step": 64,
              "variableName": "ConfigTransformerResult",
              "startLine": 37,
              "startColumn": 12,
              "endLine": 37,
              "endColumn": 35,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @param data a Map of key-value pairs\n     * @param ttls a Map of path and TTL values (in milliseconds)\n     */\n    public ConfigTransformerResult(Map<String, String> data, Map<String, Long> ttls) {\n        this.data = data;\n        this.ttls = ttls;\n    }"
            },
            {
              "step": 65,
              "variableName": "new ConfigTransformerResult(data, ttls)",
              "startLine": 121,
              "startColumn": 16,
              "endLine": 121,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "        for (Map.Entry<String, String> config : configs.entrySet()) {\n            data.put(config.getKey(), replace(lookupsByProvider, config.getValue(), DEFAULT_PATTERN));\n        }\n        return new ConfigTransformerResult(data, ttls);\n    }\n\n    private static List<ConfigVariable> getVars(String value, Pattern pattern) {"
            },
            {
              "step": 66,
              "variableName": "transformer.transform(props)",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 71,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 67,
              "variableName": "data",
              "startLine": 51,
              "startColumn": 32,
              "endLine": 51,
              "endColumn": 36,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     *\n     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n"
            },
            {
              "step": 68,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "ConfigTransformerResult [data, <map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 69,
              "variableName": "data",
              "startLine": 52,
              "startColumn": 16,
              "endLine": 52,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformerResult.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return data a Map of key-value pairs\n     */\n    public Map<String, String> data() {\n        return data;\n    }\n\n    /**"
            },
            {
              "step": 70,
              "variableName": "transformer.transform(props).data()",
              "startLine": 282,
              "startColumn": 43,
              "endLine": 282,
              "endColumn": 78,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "            providers.put(name, configProvider);\n        }\n        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }"
            },
            {
              "step": 71,
              "variableName": "transformed",
              "startLine": 284,
              "startColumn": 16,
              "endLine": 284,
              "endColumn": 27,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        ConfigTransformer transformer = new ConfigTransformer(providers);\n        Map<String, String> transformed = transformer.transform(props).data();\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n        return transformed;\n    }\n\n    protected static ConfigDef config() {"
            },
            {
              "step": 72,
              "variableName": "transform(props)",
              "startLine": 197,
              "startColumn": 17,
              "endLine": 197,
              "endColumn": 33,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putAll(stringsWithPrefix(\"replication.policy\"));\n\n        // transform any expression like ${provider:path:key}, since the worker doesn't do so\n        props = transform(props);\n        props.putAll(stringsWithPrefix(CONFIG_PROVIDERS_CONFIG));\n\n        // fill in reasonable defaults"
            },
            {
              "step": 73,
              "variableName": "props",
              "startLine": 213,
              "startColumn": 16,
              "endLine": 213,
              "endColumn": 21,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMakerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        props.putIfAbsent(VALUE_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS); \n        props.putIfAbsent(HEADER_CONVERTER_CLASS_CONFIG, BYTE_ARRAY_CONVERTER_CLASS);\n\n        return props;\n    }\n\n    Set<String> allConfigNames() {"
            },
            {
              "step": 74,
              "variableName": "config.workerConfig(sourceAndTarget)",
              "startLine": 238,
              "startColumn": 43,
              "endLine": 238,
              "endColumn": 79,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    private void addHerder(SourceAndTarget sourceAndTarget) {\n        log.info(\"creating herder for \" + sourceAndTarget.toString());\n        Map<String, String> workerProps = config.workerConfig(sourceAndTarget);\n        List<String> restNamespace;\n        try {\n            String encodedSource = encodePath(sourceAndTarget.source());"
            },
            {
              "step": 75,
              "variableName": "workerProps",
              "startLine": 250,
              "startColumn": 69,
              "endLine": 250,
              "endColumn": 80,
              "uri": "kafka-4.0.0/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorMaker.java",
              "type": "Map [<map.key>] : String",
              "code": "        String workerId = sourceAndTarget.toString();\n        Plugins plugins = new Plugins(workerProps);\n        plugins.compareAndSwapWithDelegatingLoader();\n        DistributedConfig distributedConfig = new DistributedConfig(workerProps);\n        String kafkaClusterId = distributedConfig.kafkaClusterId();\n        String clientIdBase = ConnectUtils.clientIdBase(distributedConfig);\n        // Create the admin client to be shared by all backing stores for this herder"
            },
            {
              "step": 76,
              "variableName": "Map<String, String> props",
              "startLine": 597,
              "startColumn": 30,
              "endLine": 597,
              "endColumn": 55,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "        return super.postProcessParsedConfig(parsedValues);\n    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n"
            },
            {
              "step": 77,
              "variableName": "props",
              "startLine": 598,
              "startColumn": 29,
              "endLine": 598,
              "endColumn": 34,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    public DistributedConfig(Map<String, String> props) {\n        this(Crypto.SYSTEM, props);\n    }\n\n    // Visible for testing"
            },
            {
              "step": 78,
              "variableName": "Map<String, String> props",
              "startLine": 602,
              "startColumn": 38,
              "endLine": 602,
              "endColumn": 63,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));"
            },
            {
              "step": 79,
              "variableName": "props",
              "startLine": 603,
              "startColumn": 31,
              "endLine": 603,
              "endColumn": 36,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    // Visible for testing\n    DistributedConfig(Crypto crypto, Map<String, String> props) {\n        super(config(crypto), props);\n        this.crypto = crypto;\n        exactlyOnceSourceSupport = ExactlyOnceSourceSupport.fromProperty(getString(EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG));\n        validateInterWorkerKeyConfigs();"
            },
            {
              "step": 80,
              "variableName": "Map<String, String> props",
              "startLine": 431,
              "startColumn": 47,
              "endLine": 431,
              "endColumn": 72,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "    }\n\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);"
            },
            {
              "step": 81,
              "variableName": "props",
              "startLine": 432,
              "startColumn": 27,
              "endLine": 432,
              "endColumn": 32,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 82,
              "variableName": "Map<?, ?> originals",
              "startLine": 111,
              "startColumn": 49,
              "endLine": 111,
              "endColumn": 68,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 83,
              "variableName": "originals",
              "startLine": 112,
              "startColumn": 71,
              "endLine": 112,
              "endColumn": 80,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 84,
              "variableName": "Map<?, ?> inputMap",
              "startLine": 1475,
              "startColumn": 61,
              "endLine": 1475,
              "endColumn": 79,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     * @return A map with the same contents as the input map, but with String keys\n     * @throws ConfigException if any key is not a String\n     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {"
            },
            {
              "step": 85,
              "variableName": "inputMap",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Map [<map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 86,
              "variableName": "inputMap.entrySet()",
              "startLine": 1477,
              "startColumn": 38,
              "endLine": 1477,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());"
            },
            {
              "step": 87,
              "variableName": "entry",
              "startLine": 1478,
              "startColumn": 17,
              "endLine": 1478,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static Map<String, Object> castToStringObjectMap(Map<?, ?> inputMap) {\n        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {"
            },
            {
              "step": 88,
              "variableName": "entry",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 42,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 89,
              "variableName": "entry.getKey()",
              "startLine": 1479,
              "startColumn": 37,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 90,
              "variableName": "(String) entry.getKey()",
              "startLine": 1479,
              "startColumn": 28,
              "endLine": 1479,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        Map<String, Object> map = new HashMap<>(inputMap.size());\n        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");"
            },
            {
              "step": 91,
              "variableName": "k",
              "startLine": 1480,
              "startColumn": 25,
              "endLine": 1480,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 92,
              "variableName": "map",
              "startLine": 1480,
              "startColumn": 17,
              "endLine": 1480,
              "endColumn": 20,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        for (Map.Entry<?, ?> entry : inputMap.entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String k = (String) entry.getKey();\n                map.put(k, entry.getValue());\n            } else {\n                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }"
            },
            {
              "step": 93,
              "variableName": "map",
              "startLine": 1485,
              "startColumn": 16,
              "endLine": 1485,
              "endColumn": 19,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                throw new ConfigException(String.valueOf(entry.getKey()), entry.getValue(), \"Key must be a string.\");\n            }\n        }\n        return map;\n    }\n\n    /**"
            },
            {
              "step": 94,
              "variableName": "Utils.castToStringObjectMap(originals)",
              "startLine": 112,
              "startColumn": 43,
              "endLine": 112,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);"
            },
            {
              "step": 95,
              "variableName": "originalMap",
              "startLine": 114,
              "startColumn": 70,
              "endLine": 114,
              "endColumn": 81,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 96,
              "variableName": "Map<String, Object> originals",
              "startLine": 522,
              "startColumn": 87,
              "endLine": 522,
              "endColumn": 116,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param originals           The map of raw configs.\n     * @return map of resolved config variable.\n     */\n    private Map<String, ?> resolveConfigVariables(Map<String, ?> configProviderProps, Map<String, Object> originals) {\n        Map<String, String> providerConfigString;\n        Map<String, ?> configProperties;\n        Predicate<String> classNameFilter;"
            },
            {
              "step": 97,
              "variableName": "originals",
              "startLine": 530,
              "startColumn": 34,
              "endLine": 530,
              "endColumn": 43,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 98,
              "variableName": "resolvedOriginals",
              "startLine": 530,
              "startColumn": 9,
              "endLine": 530,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        // As variable configs are strings, parse the originals and obtain the potential variable configs.\n        Map<String, String> indirectVariables = extractPotentialVariables(originals);\n\n        resolvedOriginals.putAll(originals);\n        if (configProviderProps == null || configProviderProps.isEmpty()) {\n            providerConfigString = indirectVariables;\n            configProperties = originals;"
            },
            {
              "step": 99,
              "variableName": "resolvedOriginals",
              "startLine": 551,
              "startColumn": 35,
              "endLine": 551,
              "endColumn": 52,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 100,
              "variableName": "Map<String, ? extends V> resolved",
              "startLine": 707,
              "startColumn": 22,
              "endLine": 707,
              "endColumn": 55,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 101,
              "variableName": "resolved",
              "startLine": 708,
              "startColumn": 19,
              "endLine": 708,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 102,
              "variableName": "super(resolved);",
              "startLine": 708,
              "startColumn": 13,
              "endLine": 708,
              "endColumn": 29,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }\n"
            },
            {
              "step": 103,
              "variableName": "ResolvingMap",
              "startLine": 707,
              "startColumn": 9,
              "endLine": 707,
              "endColumn": 21,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "\n        private final Map<String, ?> originals;\n\n        ResolvingMap(Map<String, ? extends V> resolved, Map<String, ?> originals) {\n            super(resolved);\n            this.originals = Collections.unmodifiableMap(originals);\n        }"
            },
            {
              "step": 104,
              "variableName": "new ResolvingMap<>(resolvedOriginals, originals)",
              "startLine": 551,
              "startColumn": 16,
              "endLine": 551,
              "endColumn": 64,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);\n    }\n\n    private Predicate<String> automaticConfigProvidersFilter() {"
            },
            {
              "step": 105,
              "variableName": "resolveConfigVariables(configProviderProps, originalMap)",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 82,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 106,
              "variableName": "this",
              "startLine": 114,
              "startColumn": 9,
              "endLine": 114,
              "endColumn": 13,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);\n        this.values = definition.parse(this.originals);\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        this.values.putAll(configUpdates);"
            },
            {
              "step": 107,
              "variableName": "AbstractConfig",
              "startLine": 111,
              "startColumn": 12,
              "endLine": 111,
              "endColumn": 26,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "AbstractConfig [originals, <map.key>] : String",
              "code": "     * @param doLog               whether the configurations should be logged\n     */\n    @SuppressWarnings({\"this-escape\"})\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, Map<String, ?> configProviderProps, boolean doLog) {\n        Map<String, Object> originalMap = Utils.castToStringObjectMap(originals);\n\n        this.originals = resolveConfigVariables(configProviderProps, originalMap);"
            },
            {
              "step": 108,
              "variableName": "super(definition, props, Utils.castToStringObjectMap(props), true);",
              "startLine": 432,
              "startColumn": 9,
              "endLine": 432,
              "endColumn": 76,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "\n    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }"
            },
            {
              "step": 109,
              "variableName": "logInternalConverterRemovalWarnings(props)",
              "startLine": 433,
              "startColumn": 9,
              "endLine": 433,
              "endColumn": 51,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "    @SuppressWarnings(\"this-escape\")\n    public WorkerConfig(ConfigDef definition, Map<String, String> props) {\n        super(definition, props, Utils.castToStringObjectMap(props), true);\n        logInternalConverterRemovalWarnings(props);\n        logPluginPathConfigProviderWarning(props);\n    }\n"
            },
            {
              "step": 110,
              "variableName": "logInternalConverterRemovalWarnings",
              "startLine": 301,
              "startColumn": 18,
              "endLine": 301,
              "endColumn": 53,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "        }\n    }\n\n    private void logInternalConverterRemovalWarnings(Map<String, String> props) {\n        List<String> removedProperties = new ArrayList<>();\n        for (String property : Arrays.asList(\"internal.key.converter\", \"internal.value.converter\")) {\n            if (props.containsKey(property)) {"
            },
            {
              "step": 111,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 112,
              "variableName": "originalsWithPrefix",
              "startLine": 266,
              "startColumn": 32,
              "endLine": 266,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param prefix the prefix to use as a filter\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n"
            },
            {
              "step": 113,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 114,
              "variableName": "originalsWithPrefix",
              "startLine": 277,
              "startColumn": 32,
              "endLine": 277,
              "endColumn": 51,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     * @param strip  strip the prefix before adding to the output if set true\n     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;"
            },
            {
              "step": 115,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "WorkerConfig [originals, <map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 116,
              "variableName": "originals",
              "startLine": 279,
              "startColumn": 47,
              "endLine": 279,
              "endColumn": 56,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 117,
              "variableName": "Map<String, V> map",
              "startLine": 1631,
              "startColumn": 56,
              "endLine": 1631,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n"
            },
            {
              "step": 118,
              "variableName": "map",
              "startLine": 1632,
              "startColumn": 34,
              "endLine": 1632,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 119,
              "variableName": "Map<String, V> map",
              "startLine": 1646,
              "startColumn": 56,
              "endLine": 1646,
              "endColumn": 74,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     * parameter whose key begins with the given {@code prefix}; may be empty, but never null\n     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {"
            },
            {
              "step": 120,
              "variableName": "map",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "ResolvingMap [<map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 121,
              "variableName": "map.entrySet()",
              "startLine": 1648,
              "startColumn": 43,
              "endLine": 1648,
              "endColumn": 57,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Set [<element>, <map.key>] : String",
              "code": "     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());"
            },
            {
              "step": 122,
              "variableName": "entry",
              "startLine": 1649,
              "startColumn": 17,
              "endLine": 1649,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip, boolean allowMatchingLength) {\n        Map<String, V> result = new HashMap<>();\n        for (Map.Entry<String, V> entry : map.entrySet()) {\n            if (entry.getKey().startsWith(prefix) && (allowMatchingLength || entry.getKey().length() > prefix.length())) {\n                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else"
            },
            {
              "step": 123,
              "variableName": "entry",
              "startLine": 1653,
              "startColumn": 32,
              "endLine": 1653,
              "endColumn": 37,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "Entry [<map.key>] : String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 124,
              "variableName": "entry.getKey()",
              "startLine": 1653,
              "startColumn": 32,
              "endLine": 1653,
              "endColumn": 46,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 125,
              "variableName": "result",
              "startLine": 1653,
              "startColumn": 21,
              "endLine": 1653,
              "endColumn": 27,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                if (strip)\n                    result.put(entry.getKey().substring(prefix.length()), entry.getValue());\n                else\n                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;"
            },
            {
              "step": 126,
              "variableName": "result",
              "startLine": 1656,
              "startColumn": 16,
              "endLine": 1656,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "                    result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 127,
              "variableName": "entriesWithPrefix(map, prefix, strip, false)",
              "startLine": 1632,
              "startColumn": 16,
              "endLine": 1632,
              "endColumn": 60,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/utils/Utils.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     * @param <V> the type of values stored in the map\n     */\n    public static <V> Map<String, V> entriesWithPrefix(Map<String, V> map, String prefix, boolean strip) {\n        return entriesWithPrefix(map, prefix, strip, false);\n    }\n\n    /**"
            },
            {
              "step": 128,
              "variableName": "Utils.entriesWithPrefix(originals, prefix, strip)",
              "startLine": 279,
              "startColumn": 23,
              "endLine": 279,
              "endColumn": 72,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "HashMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 129,
              "variableName": "result",
              "startLine": 279,
              "startColumn": 9,
              "endLine": 279,
              "endColumn": 15,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     */\n    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n"
            },
            {
              "step": 130,
              "variableName": "result",
              "startLine": 280,
              "startColumn": 16,
              "endLine": 280,
              "endColumn": 22,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "    public Map<String, Object> originalsWithPrefix(String prefix, boolean strip) {\n        Map<String, Object> result = new RecordingMap<>(prefix, false);\n        result.putAll(Utils.entriesWithPrefix(originals, prefix, strip));\n        return result;\n    }\n\n    /**"
            },
            {
              "step": 131,
              "variableName": "originalsWithPrefix(prefix, true)",
              "startLine": 267,
              "startColumn": 16,
              "endLine": 267,
              "endColumn": 49,
              "uri": "kafka-4.0.0/clients/src/main/java/org/apache/kafka/common/config/AbstractConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "     * @return a Map containing the settings with the prefix\n     */\n    public Map<String, Object> originalsWithPrefix(String prefix) {\n        return originalsWithPrefix(prefix, true);\n    }\n\n    /**"
            },
            {
              "step": 132,
              "variableName": "originalsWithPrefix(property + \".\")",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 73,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "RecordingMap [<map.key>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 133,
              "variableName": "originalsWithPrefix(property + \".\").keySet()",
              "startLine": 307,
              "startColumn": 38,
              "endLine": 307,
              "endColumn": 82,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "Set [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 134,
              "variableName": "removedProperties",
              "startLine": 307,
              "startColumn": 13,
              "endLine": 307,
              "endColumn": 30,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "ArrayList [<element>] : String",
              "code": "            if (props.containsKey(property)) {\n                removedProperties.add(property);\n            }\n            removedProperties.addAll(originalsWithPrefix(property + \".\").keySet());\n        }\n        if (!removedProperties.isEmpty()) {\n            log.warn("
            },
            {
              "step": 135,
              "variableName": "removedProperties",
              "startLine": 318,
              "startColumn": 21,
              "endLine": 318,
              "endColumn": 38,
              "uri": "kafka-4.0.0/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfig.java",
              "type": "",
              "code": "                            + \"set to false will be used. For more information, please visit \"\n                            + \"https://kafka.apache.org/documentation/#upgrade and consult the upgrade notes\"\n                            + \"for the 3.0 release.\",\n                    removedProperties);\n        }\n    }\n"
            }
          ],
          "label": "No",
          "probability": 0.9950997233390808
        }
      ]
    }
  ]
}