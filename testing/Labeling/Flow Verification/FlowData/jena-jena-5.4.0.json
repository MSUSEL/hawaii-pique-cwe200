{
  "214": [
    {
      "resultIndex": 30,
      "fileName": "HttpOp.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "httpClient",
              "startLine": 44,
              "startColumn": 58,
              "endLine": 44,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpEnv.java",
              "type": "HttpClient",
              "code": "     */\n    public static /* final */ int urlLimit = 2 * 1024;\n\n    public static HttpClient getDftHttpClient() { return httpClient; }\n    public static void setDftHttpClient(HttpClient dftHttpClient) { httpClient = dftHttpClient; }\n\n    /** Return the {@link HttpClient} based on URL and a possible pre-selected {@link HttpClient}. */"
            },
            {
              "step": 1,
              "variableName": "HttpEnv.getDftHttpClient()",
              "startLine": 209,
              "startColumn": 24,
              "endLine": 209,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(String url, String acceptHeader) {\n        return httpGet(HttpEnv.getDftHttpClient(), url, acceptHeader);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 2,
              "variableName": "HttpClient httpClient",
              "startLine": 218,
              "startColumn": 44,
              "endLine": 218,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "httpClient",
              "startLine": 219,
              "startColumn": 24,
              "endLine": 219,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "httpClient",
              "startLine": 44,
              "startColumn": 58,
              "endLine": 44,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpEnv.java",
              "type": "HttpClient",
              "code": "     */\n    public static /* final */ int urlLimit = 2 * 1024;\n\n    public static HttpClient getDftHttpClient() { return httpClient; }\n    public static void setDftHttpClient(HttpClient dftHttpClient) { httpClient = dftHttpClient; }\n\n    /** Return the {@link HttpClient} based on URL and a possible pre-selected {@link HttpClient}. */"
            },
            {
              "step": 1,
              "variableName": "HttpEnv.getDftHttpClient()",
              "startLine": 204,
              "startColumn": 24,
              "endLine": 204,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL, with \"Accept\" header \"*{@literal /}*\". The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(String url) {\n        return httpGet(HttpEnv.getDftHttpClient(), url);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 2,
              "variableName": "HttpClient httpClient",
              "startLine": 213,
              "startColumn": 44,
              "endLine": 213,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url) {\n        return httpGet(httpClient, url, null);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "httpClient",
              "startLine": 214,
              "startColumn": 24,
              "endLine": 214,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url) {\n        return httpGet(httpClient, url, null);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 4,
              "variableName": "HttpClient httpClient",
              "startLine": 218,
              "startColumn": 44,
              "endLine": 218,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "httpClient",
              "startLine": 219,
              "startColumn": 24,
              "endLine": 219,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "httpClient",
              "startLine": 214,
              "startColumn": 24,
              "endLine": 214,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url) {\n        return httpGet(httpClient, url, null);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 1,
              "variableName": "HttpClient httpClient",
              "startLine": 218,
              "startColumn": 44,
              "endLine": 218,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "httpClient",
              "startLine": 219,
              "startColumn": 24,
              "endLine": 219,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 31,
      "fileName": "HttpOp.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "httpClient",
              "startLine": 44,
              "startColumn": 58,
              "endLine": 44,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpEnv.java",
              "type": "HttpClient",
              "code": "     */\n    public static /* final */ int urlLimit = 2 * 1024;\n\n    public static HttpClient getDftHttpClient() { return httpClient; }\n    public static void setDftHttpClient(HttpClient dftHttpClient) { httpClient = dftHttpClient; }\n\n    /** Return the {@link HttpClient} based on URL and a possible pre-selected {@link HttpClient}. */"
            },
            {
              "step": 1,
              "variableName": "HttpEnv.getDftHttpClient()",
              "startLine": 209,
              "startColumn": 24,
              "endLine": 209,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(String url, String acceptHeader) {\n        return httpGet(HttpEnv.getDftHttpClient(), url, acceptHeader);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 2,
              "variableName": "HttpClient httpClient",
              "startLine": 218,
              "startColumn": 44,
              "endLine": 218,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "httpClient",
              "startLine": 219,
              "startColumn": 24,
              "endLine": 219,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            },
            {
              "step": 4,
              "variableName": "HttpClient httpClient",
              "startLine": 223,
              "startColumn": 45,
              "endLine": 223,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** MUST read the whole InputStream or close it. */\n    private static TypedInputStream execGet(HttpClient httpClient, String url, String acceptHeader) {\n        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));"
            },
            {
              "step": 5,
              "variableName": "httpClient",
              "startLine": 227,
              "startColumn": 24,
              "endLine": 227,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "",
              "code": "        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));\n        return execGet(httpClient, request);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "httpClient",
              "startLine": 44,
              "startColumn": 58,
              "endLine": 44,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpEnv.java",
              "type": "HttpClient",
              "code": "     */\n    public static /* final */ int urlLimit = 2 * 1024;\n\n    public static HttpClient getDftHttpClient() { return httpClient; }\n    public static void setDftHttpClient(HttpClient dftHttpClient) { httpClient = dftHttpClient; }\n\n    /** Return the {@link HttpClient} based on URL and a possible pre-selected {@link HttpClient}. */"
            },
            {
              "step": 1,
              "variableName": "HttpEnv.getDftHttpClient()",
              "startLine": 204,
              "startColumn": 24,
              "endLine": 204,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL, with \"Accept\" header \"*{@literal /}*\". The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(String url) {\n        return httpGet(HttpEnv.getDftHttpClient(), url);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 2,
              "variableName": "HttpClient httpClient",
              "startLine": 213,
              "startColumn": 44,
              "endLine": 213,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url) {\n        return httpGet(httpClient, url, null);\n    }\n"
            },
            {
              "step": 3,
              "variableName": "httpClient",
              "startLine": 214,
              "startColumn": 24,
              "endLine": 214,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url) {\n        return httpGet(httpClient, url, null);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 4,
              "variableName": "HttpClient httpClient",
              "startLine": 218,
              "startColumn": 44,
              "endLine": 218,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "httpClient",
              "startLine": 219,
              "startColumn": 24,
              "endLine": 219,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            },
            {
              "step": 6,
              "variableName": "HttpClient httpClient",
              "startLine": 223,
              "startColumn": 45,
              "endLine": 223,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** MUST read the whole InputStream or close it. */\n    private static TypedInputStream execGet(HttpClient httpClient, String url, String acceptHeader) {\n        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));"
            },
            {
              "step": 7,
              "variableName": "httpClient",
              "startLine": 227,
              "startColumn": 24,
              "endLine": 227,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "",
              "code": "        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));\n        return execGet(httpClient, request);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "httpClient",
              "startLine": 214,
              "startColumn": 24,
              "endLine": 214,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url) {\n        return httpGet(httpClient, url, null);\n    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */"
            },
            {
              "step": 1,
              "variableName": "HttpClient httpClient",
              "startLine": 218,
              "startColumn": 44,
              "endLine": 218,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "httpClient",
              "startLine": 219,
              "startColumn": 24,
              "endLine": 219,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            },
            {
              "step": 3,
              "variableName": "HttpClient httpClient",
              "startLine": 223,
              "startColumn": 45,
              "endLine": 223,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** MUST read the whole InputStream or close it. */\n    private static TypedInputStream execGet(HttpClient httpClient, String url, String acceptHeader) {\n        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));"
            },
            {
              "step": 4,
              "variableName": "httpClient",
              "startLine": 227,
              "startColumn": 24,
              "endLine": 227,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "",
              "code": "        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));\n        return execGet(httpClient, request);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "httpClient",
              "startLine": 219,
              "startColumn": 24,
              "endLine": 219,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "\n    /** Perform an HTTP GET to a URL. The application MUST close the InputStream. */\n    public static TypedInputStream httpGet(HttpClient httpClient, String url, String acceptHeader) {\n        return execGet(httpClient, url, acceptHeader);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            },
            {
              "step": 1,
              "variableName": "HttpClient httpClient",
              "startLine": 223,
              "startColumn": 45,
              "endLine": 223,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "HttpClient",
              "code": "    }\n\n    /** MUST read the whole InputStream or close it. */\n    private static TypedInputStream execGet(HttpClient httpClient, String url, String acceptHeader) {\n        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));"
            },
            {
              "step": 2,
              "variableName": "httpClient",
              "startLine": 227,
              "startColumn": 24,
              "endLine": 227,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/HttpOp.java",
              "type": "",
              "code": "        if ( acceptHeader == null )\n            acceptHeader = \"*/*\";\n        HttpRequest request = newGetRequest(url, setAcceptHeader(acceptHeader));\n        return execGet(httpClient, request);\n    }\n\n    /** MUST read the whole InputStream or close it. */"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 34,
      "fileName": "OpExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryOp",
              "startLine": 116,
              "startColumn": 17,
              "endLine": 116,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    protected Plan createPlan() {\n        // Decide the algebra to actually execute.\n        Op op = queryOp;\n        if ( !startBinding.isEmpty() ) {\n            op = Substitute.substitute(op, startBinding);\n            context.put(ARQConstants.sysCurrentAlgebra, op);"
            },
            {
              "step": 1,
              "variableName": "op",
              "startLine": 123,
              "startColumn": 23,
              "endLine": 123,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 2,
              "variableName": "Op op",
              "startLine": 65,
              "startColumn": 27,
              "endLine": 65,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    protected Op modifyOp(Op op)\n    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;"
            },
            {
              "step": 3,
              "variableName": "op",
              "startLine": 69,
              "startColumn": 33,
              "endLine": 69,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 4,
              "variableName": "Op op",
              "startLine": 57,
              "startColumn": 31,
              "endLine": 57,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)\n    {\n        if ( context == null )\n            context = ARQ.getContext();"
            },
            {
              "step": 5,
              "variableName": "op",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 6,
              "variableName": "Op op",
              "startLine": 61,
              "startColumn": 31,
              "endLine": 61,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    }\n\n    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }"
            },
            {
              "step": 7,
              "variableName": "op",
              "startLine": 63,
              "startColumn": 28,
              "endLine": 63,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 8,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 69,
              "endLine": 42,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 9,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 75,
              "endLine": 42,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 10,
              "variableName": "opt.rewrite(op)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 11,
              "variableName": "Optimize.optimize(op, context)",
              "startLine": 64,
              "startColumn": 16,
              "endLine": 64,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 12,
              "variableName": "Algebra.optimize(op, super.context)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 13,
              "variableName": "modifyOp(op)",
              "startLine": 123,
              "startColumn": 14,
              "endLine": 123,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 128,
              "startColumn": 38,
              "endLine": 128,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        QueryIterator queryIterator = null;\n        if ( dataset != null )\n            // Null means setting up but not executing a query.\n            queryIterator = evaluate(op, dataset, startBinding, context);\n        else\n            // Bypass management interface\n            queryIterator = evaluateNoMgt(op, dataset, startBinding, context);"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 160,
              "startColumn": 41,
              "endLine": 160,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    // Record the query operation as it goes pass and call the actual worker\n    @Override\n    final public QueryIterator evaluate(Op op, DatasetGraph dsg, Binding binding, Context context) {\n        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 164,
              "startColumn": 21,
              "endLine": 164,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);\n        return eval(op, dsg, binding, context);\n    }\n\n    private QueryIterator evaluateNoMgt(Op op, DatasetGraph dsg, Binding binding, Context context) {"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 49,
              "startColumn": 31,
              "endLine": 49,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public QueryIterator eval(Op op, DatasetGraph dsg, Binding input, Context context)\n    {\n        ExecutionContext execCxt = ExecutionContext.create(dsg, context);\n        QueryIterator qIter1 ="
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 55,
              "startColumn": 42,
              "endLine": 55,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "        QueryIterator qIter1 =\n            ( input.isEmpty() ) ? QueryIterRoot.create(execCxt)\n                                : QueryIterRoot.create(input, execCxt);\n        QueryIterator qIter = QC.execute(op, qIter1, execCxt) ;\n        // Wrap with something to check for closed iterators.\n        qIter = QueryIteratorCheck.check(qIter, execCxt) ;\n        // Need call back."
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 52,
              "startColumn": 41,
              "endLine": 52,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 53,
              "startColumn": 35,
              "endLine": 53,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 21,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 22,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "queryOp",
              "startLine": 116,
              "startColumn": 17,
              "endLine": 116,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    protected Plan createPlan() {\n        // Decide the algebra to actually execute.\n        Op op = queryOp;\n        if ( !startBinding.isEmpty() ) {\n            op = Substitute.substitute(op, startBinding);\n            context.put(ARQConstants.sysCurrentAlgebra, op);"
            },
            {
              "step": 1,
              "variableName": "op",
              "startLine": 118,
              "startColumn": 40,
              "endLine": 118,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        // Decide the algebra to actually execute.\n        Op op = queryOp;\n        if ( !startBinding.isEmpty() ) {\n            op = Substitute.substitute(op, startBinding);\n            context.put(ARQConstants.sysCurrentAlgebra, op);\n            // Don't reset the startBinding because it also is\n            // needed in the output."
            },
            {
              "step": 2,
              "variableName": "Op op",
              "startLine": 79,
              "startColumn": 33,
              "endLine": 79,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/Substitute.java",
              "type": "Op",
              "code": "        return opOutput;\n    }\n\n    public static Op substitute(Op op, Binding binding) {\n        // Want to avoid cost if the binding is empty\n        // but the empty test is not zero-cost on non-empty things.\n        if ( isNotNeeded(binding) )"
            },
            {
              "step": 3,
              "variableName": "op",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/Substitute.java",
              "type": "Op",
              "code": "        // Want to avoid cost if the binding is empty\n        // but the empty test is not zero-cost on non-empty things.\n        if ( isNotNeeded(binding) )\n            return op;\n        return Transformer.transform(new OpSubstituteWorker(binding), op);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "Substitute.substitute(op, startBinding)",
              "startLine": 118,
              "startColumn": 18,
              "endLine": 118,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        // Decide the algebra to actually execute.\n        Op op = queryOp;\n        if ( !startBinding.isEmpty() ) {\n            op = Substitute.substitute(op, startBinding);\n            context.put(ARQConstants.sysCurrentAlgebra, op);\n            // Don't reset the startBinding because it also is\n            // needed in the output."
            },
            {
              "step": 5,
              "variableName": "op",
              "startLine": 123,
              "startColumn": 23,
              "endLine": 123,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 6,
              "variableName": "Op op",
              "startLine": 70,
              "startColumn": 27,
              "endLine": 70,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-examples/src/main/java/arq/examples/engine/MyQueryEngine.java",
              "type": "Op",
              "code": "    }\n    \n    @Override\n    protected Op modifyOp(Op op)\n    {\n        // Extension point: possible place to alter the algebra expression.\n        // Alternative to eval(). "
            },
            {
              "step": 7,
              "variableName": "op",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-examples/src/main/java/arq/examples/engine/MyQueryEngine.java",
              "type": "Op",
              "code": "    {\n        // Extension point: possible place to alter the algebra expression.\n        // Alternative to eval(). \n        op = super.modifyOp(op) ;\n        // op = Algebra.toQuadForm(op) ;\n        return op ;\n    }"
            },
            {
              "step": 8,
              "variableName": "Op op",
              "startLine": 65,
              "startColumn": 27,
              "endLine": 65,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    protected Op modifyOp(Op op)\n    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;"
            },
            {
              "step": 9,
              "variableName": "op",
              "startLine": 69,
              "startColumn": 33,
              "endLine": 69,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 10,
              "variableName": "Op op",
              "startLine": 57,
              "startColumn": 31,
              "endLine": 57,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)\n    {\n        if ( context == null )\n            context = ARQ.getContext();"
            },
            {
              "step": 11,
              "variableName": "op",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 12,
              "variableName": "Op op",
              "startLine": 61,
              "startColumn": 31,
              "endLine": 61,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    }\n\n    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }"
            },
            {
              "step": 13,
              "variableName": "op",
              "startLine": 63,
              "startColumn": 28,
              "endLine": 63,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 69,
              "endLine": 42,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 15,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 75,
              "endLine": 42,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 16,
              "variableName": "opt.rewrite(op)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 17,
              "variableName": "Optimize.optimize(op, context)",
              "startLine": 64,
              "startColumn": 16,
              "endLine": 64,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 18,
              "variableName": "Algebra.optimize(op, super.context)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 19,
              "variableName": "super.modifyOp(op)",
              "startLine": 74,
              "startColumn": 14,
              "endLine": 74,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-examples/src/main/java/arq/examples/engine/MyQueryEngine.java",
              "type": "Op",
              "code": "    {\n        // Extension point: possible place to alter the algebra expression.\n        // Alternative to eval(). \n        op = super.modifyOp(op) ;\n        // op = Algebra.toQuadForm(op) ;\n        return op ;\n    }"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 76,
              "startColumn": 16,
              "endLine": 76,
              "endColumn": 18,
              "uri": "jena-jena-5.4.0/jena-examples/src/main/java/arq/examples/engine/MyQueryEngine.java",
              "type": "Op",
              "code": "        // Alternative to eval(). \n        op = super.modifyOp(op) ;\n        // op = Algebra.toQuadForm(op) ;\n        return op ;\n    }\n    \n    // ---- Registration of the factory for this query engine class. "
            },
            {
              "step": 21,
              "variableName": "modifyOp(op)",
              "startLine": 123,
              "startColumn": 14,
              "endLine": 123,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 22,
              "variableName": "op",
              "startLine": 131,
              "startColumn": 43,
              "endLine": 131,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            queryIterator = evaluate(op, dataset, startBinding, context);\n        else\n            // Bypass management interface\n            queryIterator = evaluateNoMgt(op, dataset, startBinding, context);\n        // This could be an automagic iterator to catch close.\n        return new PlanOp(getOp(), this, queryIterator);\n    }"
            },
            {
              "step": 23,
              "variableName": "Op op",
              "startLine": 167,
              "startColumn": 41,
              "endLine": 167,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        return eval(op, dsg, binding, context);\n    }\n\n    private QueryIterator evaluateNoMgt(Op op, DatasetGraph dsg, Binding binding, Context context) {\n        return eval(op, dsg, binding, context);\n    }\n"
            },
            {
              "step": 24,
              "variableName": "op",
              "startLine": 168,
              "startColumn": 21,
              "endLine": 168,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "    }\n\n    private QueryIterator evaluateNoMgt(Op op, DatasetGraph dsg, Binding binding, Context context) {\n        return eval(op, dsg, binding, context);\n    }\n\n    abstract protected QueryIterator eval(Op op, DatasetGraph dsg, Binding binding, Context context);"
            },
            {
              "step": 25,
              "variableName": "Op op",
              "startLine": 49,
              "startColumn": 31,
              "endLine": 49,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public QueryIterator eval(Op op, DatasetGraph dsg, Binding input, Context context)\n    {\n        ExecutionContext execCxt = ExecutionContext.create(dsg, context);\n        QueryIterator qIter1 ="
            },
            {
              "step": 26,
              "variableName": "op",
              "startLine": 55,
              "startColumn": 42,
              "endLine": 55,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "        QueryIterator qIter1 =\n            ( input.isEmpty() ) ? QueryIterRoot.create(execCxt)\n                                : QueryIterRoot.create(input, execCxt);\n        QueryIterator qIter = QC.execute(op, qIter1, execCxt) ;\n        // Wrap with something to check for closed iterators.\n        qIter = QueryIteratorCheck.check(qIter, execCxt) ;\n        // Need call back."
            },
            {
              "step": 27,
              "variableName": "Op op",
              "startLine": 52,
              "startColumn": 41,
              "endLine": 52,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 28,
              "variableName": "op",
              "startLine": 53,
              "startColumn": 35,
              "endLine": 53,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 29,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 30,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "subOp",
              "startLine": 149,
              "startColumn": 28,
              "endLine": 149,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "\n        if ( Quad.isDefaultGraph(gn) ) {\n            ExecutionContext cxt2 = ExecutionContext.copyChangeActiveGraph(execCxt, execCxt.getDataset().getDefaultGraph());\n            return execute(subOp, input, cxt2);\n        }\n\n        // Bad news -- if ( Lib.equals(gn, Quad.tripleInQuad) ) {}"
            },
            {
              "step": 1,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 2,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "subOps",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "List",
              "code": "    @Override\n    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n"
            },
            {
              "step": 1,
              "variableName": "subOps.iterator()",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Iterator [<element>] : Object",
              "code": "    @Override\n    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n"
            },
            {
              "step": 2,
              "variableName": "Iterator<Op> subOpIt : Iterator [<element>] : Object",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 103,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Iterator [<element>] : Object",
              "code": "    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n\n            @Override"
            },
            {
              "step": 3,
              "variableName": "new (...) : new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 103,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n\n            @Override"
            },
            {
              "step": 4,
              "variableName": "nextStage(binding)",
              "startLine": 100,
              "startColumn": 30,
              "endLine": 100,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "iter",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "makeNextStage()",
              "startLine": 60,
              "startColumn": 32,
              "endLine": 60,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "\n        for ( ;; ) {\n            if ( currentStage == null )\n                currentStage = makeNextStage();\n\n            if ( currentStage == null )\n                return false;"
            },
            {
              "step": 7,
              "variableName": "currentStage",
              "startLine": 69,
              "startColumn": 18,
              "endLine": 69,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "                // Pass on the cancelRequest to the active stage.\n                performRequestCancel(currentStage);\n\n            if ( currentStage.hasNext() )\n                return true;\n\n            // finish this step"
            },
            {
              "step": 8,
              "variableName": "hasNext",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "\n    /** final - subclasses implement hasNextBinding() */\n    @Override\n    public final boolean hasNext() {\n        if ( finished )\n            // Even if aborted. Finished is finished.\n            return false;"
            },
            {
              "step": 9,
              "variableName": "hasNextBinding()",
              "startLine": 122,
              "startColumn": 21,
              "endLine": 122,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "        }\n\n        // Handles exceptions\n        boolean r = hasNextBinding();\n\n        if ( r == false )\n            try {"
            },
            {
              "step": 10,
              "variableName": "hasNextBinding",
              "startLine": 68,
              "startColumn": 31,
              "endLine": 68,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "            }\n\n            @Override\n            protected boolean hasNextBinding() {\n                for (;;) {\n                    if (qIter != null) {\n                        if (qIter.hasNext()) {"
            },
            {
              "step": 11,
              "variableName": "subOpIt",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "                        }\n                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;"
            },
            {
              "step": 12,
              "variableName": "subOpIt",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Iterator [<element>] : Object",
              "code": "                        }\n                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;"
            },
            {
              "step": 13,
              "variableName": "subOpIt.next()",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Op",
              "code": "                        }\n                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;"
            },
            {
              "step": 14,
              "variableName": "subOp",
              "startLine": 80,
              "startColumn": 48,
              "endLine": 80,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Op",
              "code": "                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;\n                        }"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 56,
              "startColumn": 41,
              "endLine": 56,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {\n        QueryIterator qIter = QueryIterSingleton.create(binding, execCxt);\n        return OpExecutor.execute(op, qIter, execCxt);\n    }"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 58,
              "startColumn": 35,
              "endLine": 58,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {\n        QueryIterator qIter = QueryIterSingleton.create(binding, execCxt);\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    /** Execute a BGP directly - no optimization. */"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 35,
      "fileName": "OpExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "subInput",
              "startLine": 187,
              "startColumn": 39,
              "endLine": 187,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterGraph.java",
              "type": "QueryIterSingleton",
              "code": "\n            ExecutionContext cxt2 = ExecutionContext.copyChangeActiveGraph(outerCxt, g) ;\n            QueryIterator subInput = QueryIterSingleton.create(binding, cxt2) ;\n            return QC.execute(opExec, subInput, cxt2) ;\n        }\n\n        @Override"
            },
            {
              "step": 1,
              "variableName": "QueryIterator qIter",
              "startLine": 52,
              "startColumn": 48,
              "endLine": 52,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "qIter",
              "startLine": 53,
              "startColumn": 39,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 3,
              "variableName": "QueryIterator qIter",
              "startLine": 85,
              "startColumn": 41,
              "endLine": 85,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 4,
              "variableName": "qIter",
              "startLine": 87,
              "startColumn": 41,
              "endLine": 87,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 36,
      "fileName": "OpExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryOp",
              "startLine": 116,
              "startColumn": 17,
              "endLine": 116,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    protected Plan createPlan() {\n        // Decide the algebra to actually execute.\n        Op op = queryOp;\n        if ( !startBinding.isEmpty() ) {\n            op = Substitute.substitute(op, startBinding);\n            context.put(ARQConstants.sysCurrentAlgebra, op);"
            },
            {
              "step": 1,
              "variableName": "op",
              "startLine": 123,
              "startColumn": 23,
              "endLine": 123,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 2,
              "variableName": "Op op",
              "startLine": 65,
              "startColumn": 27,
              "endLine": 65,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    protected Op modifyOp(Op op)\n    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;"
            },
            {
              "step": 3,
              "variableName": "op",
              "startLine": 69,
              "startColumn": 33,
              "endLine": 69,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 4,
              "variableName": "Op op",
              "startLine": 57,
              "startColumn": 31,
              "endLine": 57,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)\n    {\n        if ( context == null )\n            context = ARQ.getContext();"
            },
            {
              "step": 5,
              "variableName": "op",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 6,
              "variableName": "Op op",
              "startLine": 61,
              "startColumn": 31,
              "endLine": 61,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    }\n\n    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }"
            },
            {
              "step": 7,
              "variableName": "op",
              "startLine": 63,
              "startColumn": 28,
              "endLine": 63,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 8,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 69,
              "endLine": 42,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 9,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 75,
              "endLine": 42,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 10,
              "variableName": "opt.rewrite(op)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 11,
              "variableName": "Optimize.optimize(op, context)",
              "startLine": 64,
              "startColumn": 16,
              "endLine": 64,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 12,
              "variableName": "Algebra.optimize(op, super.context)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 13,
              "variableName": "modifyOp(op)",
              "startLine": 123,
              "startColumn": 14,
              "endLine": 123,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 128,
              "startColumn": 38,
              "endLine": 128,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        QueryIterator queryIterator = null;\n        if ( dataset != null )\n            // Null means setting up but not executing a query.\n            queryIterator = evaluate(op, dataset, startBinding, context);\n        else\n            // Bypass management interface\n            queryIterator = evaluateNoMgt(op, dataset, startBinding, context);"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 160,
              "startColumn": 41,
              "endLine": 160,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    // Record the query operation as it goes pass and call the actual worker\n    @Override\n    final public QueryIterator evaluate(Op op, DatasetGraph dsg, Binding binding, Context context) {\n        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 164,
              "startColumn": 21,
              "endLine": 164,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);\n        return eval(op, dsg, binding, context);\n    }\n\n    private QueryIterator evaluateNoMgt(Op op, DatasetGraph dsg, Binding binding, Context context) {"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 49,
              "startColumn": 31,
              "endLine": 49,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public QueryIterator eval(Op op, DatasetGraph dsg, Binding input, Context context)\n    {\n        ExecutionContext execCxt = ExecutionContext.create(dsg, context);\n        QueryIterator qIter1 ="
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 55,
              "startColumn": 42,
              "endLine": 55,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "        QueryIterator qIter1 =\n            ( input.isEmpty() ) ? QueryIterRoot.create(execCxt)\n                                : QueryIterRoot.create(input, execCxt);\n        QueryIterator qIter = QC.execute(op, qIter1, execCxt) ;\n        // Wrap with something to check for closed iterators.\n        qIter = QueryIteratorCheck.check(qIter, execCxt) ;\n        // Need call back."
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 52,
              "startColumn": 41,
              "endLine": 52,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 53,
              "startColumn": 35,
              "endLine": 53,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 21,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 22,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Op op",
              "startLine": 113,
              "startColumn": 34,
              "endLine": 113,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 24,
              "variableName": "op",
              "startLine": 115,
              "startColumn": 47,
              "endLine": 115,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "subOp",
              "startLine": 149,
              "startColumn": 28,
              "endLine": 149,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "\n        if ( Quad.isDefaultGraph(gn) ) {\n            ExecutionContext cxt2 = ExecutionContext.copyChangeActiveGraph(execCxt, execCxt.getDataset().getDefaultGraph());\n            return execute(subOp, input, cxt2);\n        }\n\n        // Bad news -- if ( Lib.equals(gn, Quad.tripleInQuad) ) {}"
            },
            {
              "step": 1,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 2,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "Op op",
              "startLine": 113,
              "startColumn": 34,
              "endLine": 113,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 4,
              "variableName": "op",
              "startLine": 115,
              "startColumn": 47,
              "endLine": 115,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "sub",
              "startLine": 225,
              "startColumn": 26,
              "endLine": 225,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "        QueryIterator qIter = input;\n        for ( Iterator<Op> iter = opSequence.iterator() ; iter.hasNext() ; ) {\n            Op sub = iter.next();\n            qIter = exec(sub, qIter);\n        }\n        return qIter;\n    }"
            },
            {
              "step": 1,
              "variableName": "Op op",
              "startLine": 113,
              "startColumn": 34,
              "endLine": 113,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 2,
              "variableName": "op",
              "startLine": 115,
              "startColumn": 47,
              "endLine": 115,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "subOps",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "List",
              "code": "    @Override\n    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n"
            },
            {
              "step": 1,
              "variableName": "subOps.iterator()",
              "startLine": 53,
              "startColumn": 32,
              "endLine": 53,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Iterator [<element>] : Object",
              "code": "    @Override\n    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n"
            },
            {
              "step": 2,
              "variableName": "Iterator<Op> subOpIt : Iterator [<element>] : Object",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 103,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Iterator [<element>] : Object",
              "code": "    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n\n            @Override"
            },
            {
              "step": 3,
              "variableName": "new (...) : new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "startLine": 54,
              "startColumn": 16,
              "endLine": 103,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "    protected QueryIterator nextStage(Binding binding)\n    {\n        Iterator<Op> subOpIt = subOps.iterator();\n        return new QueryIter(getExecContext()) {\n            QueryIterator qIter = null;\n\n            @Override"
            },
            {
              "step": 4,
              "variableName": "nextStage(binding)",
              "startLine": 100,
              "startColumn": 30,
              "endLine": 100,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "iter",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "makeNextStage()",
              "startLine": 60,
              "startColumn": 32,
              "endLine": 60,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "\n        for ( ;; ) {\n            if ( currentStage == null )\n                currentStage = makeNextStage();\n\n            if ( currentStage == null )\n                return false;"
            },
            {
              "step": 7,
              "variableName": "currentStage",
              "startLine": 69,
              "startColumn": 18,
              "endLine": 69,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "                // Pass on the cancelRequest to the active stage.\n                performRequestCancel(currentStage);\n\n            if ( currentStage.hasNext() )\n                return true;\n\n            // finish this step"
            },
            {
              "step": 8,
              "variableName": "hasNext",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "\n    /** final - subclasses implement hasNextBinding() */\n    @Override\n    public final boolean hasNext() {\n        if ( finished )\n            // Even if aborted. Finished is finished.\n            return false;"
            },
            {
              "step": 9,
              "variableName": "hasNextBinding()",
              "startLine": 122,
              "startColumn": 21,
              "endLine": 122,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "        }\n\n        // Handles exceptions\n        boolean r = hasNextBinding();\n\n        if ( r == false )\n            try {"
            },
            {
              "step": 10,
              "variableName": "hasNextBinding",
              "startLine": 68,
              "startColumn": 31,
              "endLine": 68,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "            }\n\n            @Override\n            protected boolean hasNextBinding() {\n                for (;;) {\n                    if (qIter != null) {\n                        if (qIter.hasNext()) {"
            },
            {
              "step": 11,
              "variableName": "subOpIt",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "new QueryIter(...) { ... } [Iterator<Op> subOpIt, <element>] : Object",
              "code": "                        }\n                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;"
            },
            {
              "step": 12,
              "variableName": "subOpIt",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Iterator [<element>] : Object",
              "code": "                        }\n                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;"
            },
            {
              "step": 13,
              "variableName": "subOpIt.next()",
              "startLine": 79,
              "startColumn": 40,
              "endLine": 79,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Op",
              "code": "                        }\n                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;"
            },
            {
              "step": 14,
              "variableName": "subOp",
              "startLine": 80,
              "startColumn": 48,
              "endLine": 80,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterUnion.java",
              "type": "Op",
              "code": "                    } else {\n                        if (subOpIt.hasNext()) {\n                            Op subOp = subOpIt.next();\n                            qIter = QC.execute(subOp, binding, getExecContext());\n                        } else {\n                            return false;\n                        }"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 56,
              "startColumn": 41,
              "endLine": 56,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {\n        QueryIterator qIter = QueryIterSingleton.create(binding, execCxt);\n        return OpExecutor.execute(op, qIter, execCxt);\n    }"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 58,
              "startColumn": 35,
              "endLine": 58,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {\n        QueryIterator qIter = QueryIterSingleton.create(binding, execCxt);\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    /** Execute a BGP directly - no optimization. */"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 113,
              "startColumn": 34,
              "endLine": 113,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 115,
              "startColumn": 47,
              "endLine": 115,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 37,
      "fileName": "OpExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "subInput",
              "startLine": 187,
              "startColumn": 39,
              "endLine": 187,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterGraph.java",
              "type": "QueryIterSingleton",
              "code": "\n            ExecutionContext cxt2 = ExecutionContext.copyChangeActiveGraph(outerCxt, g) ;\n            QueryIterator subInput = QueryIterSingleton.create(binding, cxt2) ;\n            return QC.execute(opExec, subInput, cxt2) ;\n        }\n\n        @Override"
            },
            {
              "step": 1,
              "variableName": "QueryIterator qIter",
              "startLine": 52,
              "startColumn": 48,
              "endLine": 52,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "qIter",
              "startLine": 53,
              "startColumn": 39,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 3,
              "variableName": "QueryIterator qIter",
              "startLine": 85,
              "startColumn": 41,
              "endLine": 85,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 4,
              "variableName": "qIter",
              "startLine": 87,
              "startColumn": 41,
              "endLine": 87,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "QueryIterator input",
              "startLine": 113,
              "startColumn": 41,
              "endLine": 113,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 6,
              "variableName": "input",
              "startLine": 115,
              "startColumn": 51,
              "endLine": 115,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "subInput",
              "startLine": 187,
              "startColumn": 39,
              "endLine": 187,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterGraph.java",
              "type": "QueryIterSingleton",
              "code": "\n            ExecutionContext cxt2 = ExecutionContext.copyChangeActiveGraph(outerCxt, g) ;\n            QueryIterator subInput = QueryIterSingleton.create(binding, cxt2) ;\n            return QC.execute(opExec, subInput, cxt2) ;\n        }\n\n        @Override"
            },
            {
              "step": 1,
              "variableName": "QueryIterator qIter",
              "startLine": 52,
              "startColumn": 48,
              "endLine": 52,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "qIter",
              "startLine": 53,
              "startColumn": 39,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 3,
              "variableName": "QueryIterator qIter",
              "startLine": 85,
              "startColumn": 41,
              "endLine": 85,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 4,
              "variableName": "qIter",
              "startLine": 87,
              "startColumn": 41,
              "endLine": 87,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "QueryIterator input",
              "startLine": 83,
              "startColumn": 41,
              "endLine": 83,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/solver/OpExecutorTDB1.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    @Override\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        if ( level < 0 )\n            // Print only at top level (and we're called before level++)\n            Explain.explain(\"TDB1\", op, super.execCxt.getContext());"
            },
            {
              "step": 6,
              "variableName": "input",
              "startLine": 87,
              "startColumn": 31,
              "endLine": 87,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/solver/OpExecutorTDB1.java",
              "type": "QueryIterSingleton",
              "code": "        if ( level < 0 )\n            // Print only at top level (and we're called before level++)\n            Explain.explain(\"TDB1\", op, super.execCxt.getContext());\n        return super.exec(op, input);\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "QueryIterator input",
              "startLine": 113,
              "startColumn": 41,
              "endLine": 113,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 8,
              "variableName": "input",
              "startLine": 115,
              "startColumn": 51,
              "endLine": 115,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "subInput",
              "startLine": 187,
              "startColumn": 39,
              "endLine": 187,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/iterator/QueryIterGraph.java",
              "type": "QueryIterSingleton",
              "code": "\n            ExecutionContext cxt2 = ExecutionContext.copyChangeActiveGraph(outerCxt, g) ;\n            QueryIterator subInput = QueryIterSingleton.create(binding, cxt2) ;\n            return QC.execute(opExec, subInput, cxt2) ;\n        }\n\n        @Override"
            },
            {
              "step": 1,
              "variableName": "QueryIterator qIter",
              "startLine": 52,
              "startColumn": 48,
              "endLine": 52,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "qIter",
              "startLine": 53,
              "startColumn": 39,
              "endLine": 53,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 3,
              "variableName": "QueryIterator qIter",
              "startLine": 85,
              "startColumn": 41,
              "endLine": 85,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 4,
              "variableName": "qIter",
              "startLine": 87,
              "startColumn": 41,
              "endLine": 87,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "QueryIterator input",
              "startLine": 83,
              "startColumn": 41,
              "endLine": 83,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/solver/OpExecutorTDB2.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    @Override\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        if ( level < 0 )\n            // Print only at top level (and we're called before level++)\n            Explain.explain(\"TDB2\", op, super.execCxt.getContext());"
            },
            {
              "step": 6,
              "variableName": "input",
              "startLine": 87,
              "startColumn": 31,
              "endLine": 87,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/solver/OpExecutorTDB2.java",
              "type": "QueryIterSingleton",
              "code": "        if ( level < 0 )\n            // Print only at top level (and we're called before level++)\n            Explain.explain(\"TDB2\", op, super.execCxt.getContext());\n        return super.exec(op, input);\n    }\n\n    // Retrieving nodes isn't so bad because they will be needed anyway."
            },
            {
              "step": 7,
              "variableName": "QueryIterator input",
              "startLine": 113,
              "startColumn": 41,
              "endLine": 113,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "QueryIterSingleton",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 8,
              "variableName": "input",
              "startLine": 115,
              "startColumn": 51,
              "endLine": 115,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 39,
      "fileName": "OpExecutor.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "subOp",
              "startLine": 55,
              "startColumn": 40,
              "endLine": 55,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpTopN.java",
              "type": "Op",
              "code": "\n    @Override\n    public Op apply(Transform transform, Op subOp)\n    { return transform.transform(this, subOp); }\n\n    @Override\n    public int hashCode() {"
            },
            {
              "step": 1,
              "variableName": "Op subOp",
              "startLine": 337,
              "startColumn": 39,
              "endLine": 337,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public Op transform(OpTopN opTop, Op subOp) {\n        if (!this.isApplicable())\n            return super.transform(opTop, subOp);\n"
            },
            {
              "step": 2,
              "variableName": "subOp",
              "startLine": 356,
              "startColumn": 45,
              "endLine": 356,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "            Expr e = getAssignExpr(var);\n            if (this.tracker.getUsageCount(var) == 2 && hasAssignment(var) && canInline(e) && shouldInline(e)) {\n                // Can go back and eliminate that assignment\n                subOp = eliminateAssignment(subOp, var);\n                // Replace the variable usage with the expression within the\n                // sort conditions\n                conditions = processConditions(opTop.getConditions(), conditions, var);"
            },
            {
              "step": 3,
              "variableName": "Op subOp",
              "startLine": 377,
              "startColumn": 36,
              "endLine": 377,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "        return super.transform(opGroup, subOp);\n    }\n\n    private Op eliminateAssignment(Op subOp, Var var) {\n        return Transformer.transform(new TransformRemoveAssignment(var, getAssignExpr(var)), subOp);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "subOp",
              "startLine": 378,
              "startColumn": 94,
              "endLine": 378,
              "endColumn": 99,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "    }\n\n    private Op eliminateAssignment(Op subOp, Var var) {\n        return Transformer.transform(new TransformRemoveAssignment(var, getAssignExpr(var)), subOp);\n    }\n\n    private VarExprList processVarExprList(VarExprList exprs, ExprTransform transform) {"
            },
            {
              "step": 5,
              "variableName": "Op op",
              "startLine": 40,
              "startColumn": 53,
              "endLine": 40,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    public static void set(Transformer value) { Transformer.singleton = value; }\n\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */"
            },
            {
              "step": 6,
              "variableName": "op",
              "startLine": 41,
              "startColumn": 46,
              "endLine": 41,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */\n    public static Op transform(Transform transform, ExprTransform exprTransform, Op op)"
            },
            {
              "step": 7,
              "variableName": "Op op",
              "startLine": 86,
              "startColumn": 54,
              "endLine": 86,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 8,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 48,
              "endLine": 87,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 9,
              "variableName": "Op op",
              "startLine": 90,
              "startColumn": 83,
              "endLine": 90,
              "endColumn": 88,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "op",
              "startLine": 91,
              "startColumn": 58,
              "endLine": 91,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 11,
              "variableName": "Op op",
              "startLine": 94,
              "startColumn": 82,
              "endLine": 94,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 12,
              "variableName": "op",
              "startLine": 95,
              "startColumn": 33,
              "endLine": 95,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n\n    // --------------------------------"
            },
            {
              "step": 13,
              "variableName": "Op op",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }"
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 172,
              "startColumn": 26,
              "endLine": 172,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }\n\n    /** Transform an {@link Op}. */"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 181,
              "startColumn": 32,
              "endLine": 181,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 182,
              "startColumn": 14,
              "endLine": 182,
              "endColumn": 16,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 48,
              "startColumn": 29,
              "endLine": 48,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Walk visiting every {@link Op} and every {@link Expr},\n     *  starting from an {@link Op}.\n     */\n    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);"
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 51,
              "startColumn": 15,
              "endLine": 51,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    public static void walkSkipService(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 60,
              "startColumn": 31,
              "endLine": 60,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walkSkipService$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 62,
              "startColumn": 15,
              "endLine": 62,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }\n\n    private static void walkSkipService$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 21,
              "variableName": "Op op",
              "startLine": 70,
              "startColumn": 31,
              "endLine": 70,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walk$(op, wv);\n    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "op",
              "startLine": 71,
              "startColumn": 21,
              "endLine": 71,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n\n    /** Walk visiting every {@link Expr} with an {@link ExprVisitor},"
            },
            {
              "step": 23,
              "variableName": "Op op",
              "startLine": 74,
              "startColumn": 22,
              "endLine": 74,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            op.visit(afterVisitor) ;\n    }\n\n    public void walk(Op op) {\n        if ( op == null )\n            return ;\n        if ( opDepth == opDepthLimit )"
            },
            {
              "step": 24,
              "variableName": "op",
              "startLine": 81,
              "startColumn": 15,
              "endLine": 81,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            // No deeper.\n            return ;\n        opDepth++ ;\n        try { op.visit(this); }\n        finally { opDepth-- ; }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 26,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 27,
              "variableName": "OpService op",
              "startLine": 33,
              "startColumn": 23,
              "endLine": 33,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    }\n    \n    @Override\n    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;"
            },
            {
              "step": 28,
              "variableName": "op",
              "startLine": 36,
              "startColumn": 13,
              "endLine": 36,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;\n    }\n}\n"
            },
            {
              "step": 29,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 30,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 31,
              "variableName": "OpService opService",
              "startLine": 193,
              "startColumn": 23,
              "endLine": 193,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);"
            },
            {
              "step": 32,
              "variableName": "opService",
              "startLine": 195,
              "startColumn": 50,
              "endLine": 195,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);\n    }\n"
            },
            {
              "step": 33,
              "variableName": "OpService opService",
              "startLine": 318,
              "startColumn": 37,
              "endLine": 318,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "OpService",
              "code": "        return qIter;\n    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "opService",
              "startLine": 319,
              "startColumn": 33,
              "endLine": 319,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n\n    // Quad form, \"GRAPH ?g {}\" Flip back to OpGraph."
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "queryOp",
              "startLine": 116,
              "startColumn": 17,
              "endLine": 116,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    protected Plan createPlan() {\n        // Decide the algebra to actually execute.\n        Op op = queryOp;\n        if ( !startBinding.isEmpty() ) {\n            op = Substitute.substitute(op, startBinding);\n            context.put(ARQConstants.sysCurrentAlgebra, op);"
            },
            {
              "step": 1,
              "variableName": "op",
              "startLine": 123,
              "startColumn": 23,
              "endLine": 123,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 2,
              "variableName": "Op op",
              "startLine": 65,
              "startColumn": 27,
              "endLine": 65,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    protected Op modifyOp(Op op)\n    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;"
            },
            {
              "step": 3,
              "variableName": "op",
              "startLine": 69,
              "startColumn": 33,
              "endLine": 69,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 4,
              "variableName": "Op op",
              "startLine": 57,
              "startColumn": 31,
              "endLine": 57,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)\n    {\n        if ( context == null )\n            context = ARQ.getContext();"
            },
            {
              "step": 5,
              "variableName": "op",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 6,
              "variableName": "Op op",
              "startLine": 61,
              "startColumn": 31,
              "endLine": 61,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    }\n\n    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }"
            },
            {
              "step": 7,
              "variableName": "op",
              "startLine": 63,
              "startColumn": 28,
              "endLine": 63,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 8,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 69,
              "endLine": 42,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 9,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 75,
              "endLine": 42,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 10,
              "variableName": "opt.rewrite(op)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 11,
              "variableName": "Optimize.optimize(op, context)",
              "startLine": 64,
              "startColumn": 16,
              "endLine": 64,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 12,
              "variableName": "Algebra.optimize(op, super.context)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 13,
              "variableName": "modifyOp(op)",
              "startLine": 123,
              "startColumn": 14,
              "endLine": 123,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 128,
              "startColumn": 38,
              "endLine": 128,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        QueryIterator queryIterator = null;\n        if ( dataset != null )\n            // Null means setting up but not executing a query.\n            queryIterator = evaluate(op, dataset, startBinding, context);\n        else\n            // Bypass management interface\n            queryIterator = evaluateNoMgt(op, dataset, startBinding, context);"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 160,
              "startColumn": 41,
              "endLine": 160,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    // Record the query operation as it goes pass and call the actual worker\n    @Override\n    final public QueryIterator evaluate(Op op, DatasetGraph dsg, Binding binding, Context context) {\n        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 164,
              "startColumn": 21,
              "endLine": 164,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);\n        return eval(op, dsg, binding, context);\n    }\n\n    private QueryIterator evaluateNoMgt(Op op, DatasetGraph dsg, Binding binding, Context context) {"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 49,
              "startColumn": 31,
              "endLine": 49,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public QueryIterator eval(Op op, DatasetGraph dsg, Binding input, Context context)\n    {\n        ExecutionContext execCxt = ExecutionContext.create(dsg, context);\n        QueryIterator qIter1 ="
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 55,
              "startColumn": 42,
              "endLine": 55,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "        QueryIterator qIter1 =\n            ( input.isEmpty() ) ? QueryIterRoot.create(execCxt)\n                                : QueryIterRoot.create(input, execCxt);\n        QueryIterator qIter = QC.execute(op, qIter1, execCxt) ;\n        // Wrap with something to check for closed iterators.\n        qIter = QueryIteratorCheck.check(qIter, execCxt) ;\n        // Need call back."
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 52,
              "startColumn": 41,
              "endLine": 52,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "        return Substitute.substitute(op, binding);\n    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 53,
              "startColumn": 35,
              "endLine": 53,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QC.java",
              "type": "Op",
              "code": "    }\n\n    public static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        return OpExecutor.execute(op, qIter, execCxt);\n    }\n\n    public static QueryIterator execute(Op op, Binding binding, ExecutionContext execCxt) {"
            },
            {
              "step": 21,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 22,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 23,
              "variableName": "Op op",
              "startLine": 113,
              "startColumn": 34,
              "endLine": 113,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 24,
              "variableName": "op",
              "startLine": 115,
              "startColumn": 47,
              "endLine": 115,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            },
            {
              "step": 25,
              "variableName": "Op op",
              "startLine": 40,
              "startColumn": 24,
              "endLine": 40,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "Op",
              "code": "        opExecutor = exec;\n    }\n\n    QueryIterator exec(Op op, QueryIterator input) {\n        push(input);\n        int x = stack.size();\n        op.visit(this);"
            },
            {
              "step": 26,
              "variableName": "op",
              "startLine": 43,
              "startColumn": 9,
              "endLine": 43,
              "endColumn": 11,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "Op",
              "code": "    QueryIterator exec(Op op, QueryIterator input) {\n        push(input);\n        int x = stack.size();\n        op.visit(this);\n        int y = stack.size();\n        if ( x != y )\n            Log.warn(this, \"Possible stack misalignment\");"
            },
            {
              "step": 27,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 28,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 29,
              "variableName": "OpService opService",
              "startLine": 193,
              "startColumn": 23,
              "endLine": 193,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);"
            },
            {
              "step": 30,
              "variableName": "opService",
              "startLine": 195,
              "startColumn": 50,
              "endLine": 195,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "OpService opService",
              "startLine": 318,
              "startColumn": 37,
              "endLine": 318,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "OpService",
              "code": "        return qIter;\n    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "opService",
              "startLine": 319,
              "startColumn": 33,
              "endLine": 319,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n\n    // Quad form, \"GRAPH ?g {}\" Flip back to OpGraph."
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "subOp",
              "startLine": 149,
              "startColumn": 28,
              "endLine": 149,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "\n        if ( Quad.isDefaultGraph(gn) ) {\n            ExecutionContext cxt2 = ExecutionContext.copyChangeActiveGraph(execCxt, execCxt.getDataset().getDefaultGraph());\n            return execute(subOp, input, cxt2);\n        }\n\n        // Bad news -- if ( Lib.equals(gn, Quad.tripleInQuad) ) {}"
            },
            {
              "step": 1,
              "variableName": "Op op",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;"
            },
            {
              "step": 2,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 37,
              "endLine": 87,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    /** Public interface is via QC.execute. **/\n    static QueryIterator execute(Op op, QueryIterator qIter, ExecutionContext execCxt) {\n        OpExecutor exec = createOpExecutor(execCxt);\n        QueryIterator q = exec.exec(op, qIter);\n        return q;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "Op op",
              "startLine": 113,
              "startColumn": 34,
              "endLine": 113,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 4,
              "variableName": "op",
              "startLine": 115,
              "startColumn": 47,
              "endLine": 115,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            },
            {
              "step": 5,
              "variableName": "Op op",
              "startLine": 40,
              "startColumn": 24,
              "endLine": 40,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "Op",
              "code": "        opExecutor = exec;\n    }\n\n    QueryIterator exec(Op op, QueryIterator input) {\n        push(input);\n        int x = stack.size();\n        op.visit(this);"
            },
            {
              "step": 6,
              "variableName": "op",
              "startLine": 43,
              "startColumn": 9,
              "endLine": 43,
              "endColumn": 11,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "Op",
              "code": "    QueryIterator exec(Op op, QueryIterator input) {\n        push(input);\n        int x = stack.size();\n        op.visit(this);\n        int y = stack.size();\n        if ( x != y )\n            Log.warn(this, \"Possible stack misalignment\");"
            },
            {
              "step": 7,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 8,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 9,
              "variableName": "OpService opService",
              "startLine": 193,
              "startColumn": 23,
              "endLine": 193,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);"
            },
            {
              "step": 10,
              "variableName": "opService",
              "startLine": 195,
              "startColumn": 50,
              "endLine": 195,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);\n    }\n"
            },
            {
              "step": 11,
              "variableName": "OpService opService",
              "startLine": 318,
              "startColumn": 37,
              "endLine": 318,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "OpService",
              "code": "        return qIter;\n    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n"
            },
            {
              "step": 12,
              "variableName": "opService",
              "startLine": 319,
              "startColumn": 33,
              "endLine": 319,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n\n    // Quad form, \"GRAPH ?g {}\" Flip back to OpGraph."
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "sub",
              "startLine": 225,
              "startColumn": 26,
              "endLine": 225,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "        QueryIterator qIter = input;\n        for ( Iterator<Op> iter = opSequence.iterator() ; iter.hasNext() ; ) {\n            Op sub = iter.next();\n            qIter = exec(sub, qIter);\n        }\n        return qIter;\n    }"
            },
            {
              "step": 1,
              "variableName": "Op op",
              "startLine": 113,
              "startColumn": 34,
              "endLine": 113,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    }\n\n    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence"
            },
            {
              "step": 2,
              "variableName": "op",
              "startLine": 115,
              "startColumn": 47,
              "endLine": 115,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "Op",
              "code": "    // ---- The recursive step.\n    protected QueryIterator exec(Op op, QueryIterator input) {\n        level++;\n        QueryIterator qIter = dispatcher.exec(op, input);\n        // Intentionally not try/finally so exceptions leave some evidence\n        // around.\n        level--;"
            },
            {
              "step": 3,
              "variableName": "Op op",
              "startLine": 40,
              "startColumn": 24,
              "endLine": 40,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "Op",
              "code": "        opExecutor = exec;\n    }\n\n    QueryIterator exec(Op op, QueryIterator input) {\n        push(input);\n        int x = stack.size();\n        op.visit(this);"
            },
            {
              "step": 4,
              "variableName": "op",
              "startLine": 43,
              "startColumn": 9,
              "endLine": 43,
              "endColumn": 11,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "Op",
              "code": "    QueryIterator exec(Op op, QueryIterator input) {\n        push(input);\n        int x = stack.size();\n        op.visit(this);\n        int y = stack.size();\n        if ( x != y )\n            Log.warn(this, \"Possible stack misalignment\");"
            },
            {
              "step": 5,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 6,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 7,
              "variableName": "OpService opService",
              "startLine": 193,
              "startColumn": 23,
              "endLine": 193,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);"
            },
            {
              "step": 8,
              "variableName": "opService",
              "startLine": 195,
              "startColumn": 50,
              "endLine": 195,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/ExecutionDispatch.java",
              "type": "OpService",
              "code": "    @Override\n    public void visit(OpService opService) {\n        QueryIterator input = pop();\n        QueryIterator qIter = opExecutor.execute(opService, input);\n        push(qIter);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "OpService opService",
              "startLine": 318,
              "startColumn": 37,
              "endLine": 318,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "OpService",
              "code": "        return qIter;\n    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "opService",
              "startLine": 319,
              "startColumn": 33,
              "endLine": 319,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/OpExecutor.java",
              "type": "",
              "code": "    }\n\n    protected QueryIterator execute(OpService opService, QueryIterator input) {\n        return ServiceExec.exec(opService, input, execCxt);\n    }\n\n    // Quad form, \"GRAPH ?g {}\" Flip back to OpGraph."
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 40,
      "fileName": "EvaluatorDispatch.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "subOp",
              "startLine": 55,
              "startColumn": 40,
              "endLine": 55,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpTopN.java",
              "type": "Op",
              "code": "\n    @Override\n    public Op apply(Transform transform, Op subOp)\n    { return transform.transform(this, subOp); }\n\n    @Override\n    public int hashCode() {"
            },
            {
              "step": 1,
              "variableName": "Op subOp",
              "startLine": 337,
              "startColumn": 39,
              "endLine": 337,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public Op transform(OpTopN opTop, Op subOp) {\n        if (!this.isApplicable())\n            return super.transform(opTop, subOp);\n"
            },
            {
              "step": 2,
              "variableName": "subOp",
              "startLine": 356,
              "startColumn": 45,
              "endLine": 356,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "            Expr e = getAssignExpr(var);\n            if (this.tracker.getUsageCount(var) == 2 && hasAssignment(var) && canInline(e) && shouldInline(e)) {\n                // Can go back and eliminate that assignment\n                subOp = eliminateAssignment(subOp, var);\n                // Replace the variable usage with the expression within the\n                // sort conditions\n                conditions = processConditions(opTop.getConditions(), conditions, var);"
            },
            {
              "step": 3,
              "variableName": "Op subOp",
              "startLine": 377,
              "startColumn": 36,
              "endLine": 377,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "        return super.transform(opGroup, subOp);\n    }\n\n    private Op eliminateAssignment(Op subOp, Var var) {\n        return Transformer.transform(new TransformRemoveAssignment(var, getAssignExpr(var)), subOp);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "subOp",
              "startLine": 378,
              "startColumn": 94,
              "endLine": 378,
              "endColumn": 99,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformEliminateAssignments.java",
              "type": "Op",
              "code": "    }\n\n    private Op eliminateAssignment(Op subOp, Var var) {\n        return Transformer.transform(new TransformRemoveAssignment(var, getAssignExpr(var)), subOp);\n    }\n\n    private VarExprList processVarExprList(VarExprList exprs, ExprTransform transform) {"
            },
            {
              "step": 5,
              "variableName": "Op op",
              "startLine": 40,
              "startColumn": 53,
              "endLine": 40,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    public static void set(Transformer value) { Transformer.singleton = value; }\n\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */"
            },
            {
              "step": 6,
              "variableName": "op",
              "startLine": 41,
              "startColumn": 46,
              "endLine": 41,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */\n    public static Op transform(Transform transform, ExprTransform exprTransform, Op op)"
            },
            {
              "step": 7,
              "variableName": "Op op",
              "startLine": 86,
              "startColumn": 54,
              "endLine": 86,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 8,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 48,
              "endLine": 87,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 9,
              "variableName": "Op op",
              "startLine": 90,
              "startColumn": 83,
              "endLine": 90,
              "endColumn": 88,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 10,
              "variableName": "op",
              "startLine": 91,
              "startColumn": 58,
              "endLine": 91,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 11,
              "variableName": "Op op",
              "startLine": 94,
              "startColumn": 82,
              "endLine": 94,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 12,
              "variableName": "op",
              "startLine": 95,
              "startColumn": 33,
              "endLine": 95,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n\n    // --------------------------------"
            },
            {
              "step": 13,
              "variableName": "Op op",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }"
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 172,
              "startColumn": 26,
              "endLine": 172,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }\n\n    /** Transform an {@link Op}. */"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 181,
              "startColumn": 32,
              "endLine": 181,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 182,
              "startColumn": 14,
              "endLine": 182,
              "endColumn": 16,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }\n"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 48,
              "startColumn": 29,
              "endLine": 48,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Walk visiting every {@link Op} and every {@link Expr},\n     *  starting from an {@link Op}.\n     */\n    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);"
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 51,
              "startColumn": 15,
              "endLine": 51,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    public static void walkSkipService(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 60,
              "startColumn": 31,
              "endLine": 60,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walkSkipService$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 62,
              "startColumn": 15,
              "endLine": 62,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }\n\n    private static void walkSkipService$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 21,
              "variableName": "Op op",
              "startLine": 70,
              "startColumn": 31,
              "endLine": 70,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walk$(op, wv);\n    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n"
            },
            {
              "step": 22,
              "variableName": "op",
              "startLine": 71,
              "startColumn": 21,
              "endLine": 71,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n\n    /** Walk visiting every {@link Expr} with an {@link ExprVisitor},"
            },
            {
              "step": 23,
              "variableName": "Op op",
              "startLine": 74,
              "startColumn": 22,
              "endLine": 74,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            op.visit(afterVisitor) ;\n    }\n\n    public void walk(Op op) {\n        if ( op == null )\n            return ;\n        if ( opDepth == opDepthLimit )"
            },
            {
              "step": 24,
              "variableName": "op",
              "startLine": 81,
              "startColumn": 15,
              "endLine": 81,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            // No deeper.\n            return ;\n        opDepth++ ;\n        try { op.visit(this); }\n        finally { opDepth-- ; }\n    }\n"
            },
            {
              "step": 25,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 26,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 27,
              "variableName": "OpService op",
              "startLine": 33,
              "startColumn": 23,
              "endLine": 33,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    }\n    \n    @Override\n    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;"
            },
            {
              "step": 28,
              "variableName": "op",
              "startLine": 36,
              "startColumn": 13,
              "endLine": 36,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;\n    }\n}\n"
            },
            {
              "step": 29,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 30,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 31,
              "variableName": "OpService opService",
              "startLine": 219,
              "startColumn": 23,
              "endLine": 219,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);"
            },
            {
              "step": 32,
              "variableName": "opService",
              "startLine": 220,
              "startColumn": 44,
              "endLine": 220,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "",
              "code": "\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "queryOp",
              "startLine": 116,
              "startColumn": 17,
              "endLine": 116,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    protected Plan createPlan() {\n        // Decide the algebra to actually execute.\n        Op op = queryOp;\n        if ( !startBinding.isEmpty() ) {\n            op = Substitute.substitute(op, startBinding);\n            context.put(ARQConstants.sysCurrentAlgebra, op);"
            },
            {
              "step": 1,
              "variableName": "op",
              "startLine": 123,
              "startColumn": 23,
              "endLine": 123,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 2,
              "variableName": "Op op",
              "startLine": 65,
              "startColumn": 27,
              "endLine": 65,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    protected Op modifyOp(Op op)\n    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;"
            },
            {
              "step": 3,
              "variableName": "op",
              "startLine": 69,
              "startColumn": 33,
              "endLine": 69,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 4,
              "variableName": "Op op",
              "startLine": 57,
              "startColumn": 31,
              "endLine": 57,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)\n    {\n        if ( context == null )\n            context = ARQ.getContext();"
            },
            {
              "step": 5,
              "variableName": "op",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 6,
              "variableName": "Op op",
              "startLine": 61,
              "startColumn": 31,
              "endLine": 61,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    }\n\n    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }"
            },
            {
              "step": 7,
              "variableName": "op",
              "startLine": 63,
              "startColumn": 28,
              "endLine": 63,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 8,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 69,
              "endLine": 42,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 9,
              "variableName": "op",
              "startLine": 42,
              "startColumn": 75,
              "endLine": 42,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "{\n    /** Factory for the \"Do nothing\" optimizer. */\n    // also known as :: (context) -> { return (op) -> op ; } ;\n    public static RewriteFactory noOptimizationFactory = context -> op -> op ; // Right associative.\n\n    /** Factory for the \"minimal\" optimizer. */\n    public static RewriteFactory minimalOptimizationFactory = (context) -> new OptimizerMinimal(context);"
            },
            {
              "step": 10,
              "variableName": "opt.rewrite(op)",
              "startLine": 63,
              "startColumn": 16,
              "endLine": 63,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 11,
              "variableName": "Optimize.optimize(op, context)",
              "startLine": 64,
              "startColumn": 16,
              "endLine": 64,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 12,
              "variableName": "Algebra.optimize(op, super.context)",
              "startLine": 69,
              "startColumn": 16,
              "endLine": 69,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/main/QueryEngineMain.java",
              "type": "Op",
              "code": "    {\n        if ( context.isFalse(ARQ.optimization) )\n            return minimalModifyOp(op) ;\n        return Algebra.optimize(op, super.context) ;\n    }\n\n    protected Op minimalModifyOp(Op op) {"
            },
            {
              "step": 13,
              "variableName": "modifyOp(op)",
              "startLine": 123,
              "startColumn": 14,
              "endLine": 123,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "            // Don't reset the startBinding because it also is\n            // needed in the output.\n        }\n        op = modifyOp(op);\n\n        QueryIterator queryIterator = null;\n        if ( dataset != null )"
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 128,
              "startColumn": 38,
              "endLine": 128,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        QueryIterator queryIterator = null;\n        if ( dataset != null )\n            // Null means setting up but not executing a query.\n            queryIterator = evaluate(op, dataset, startBinding, context);\n        else\n            // Bypass management interface\n            queryIterator = evaluateNoMgt(op, dataset, startBinding, context);"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 160,
              "startColumn": 41,
              "endLine": 160,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "\n    // Record the query operation as it goes pass and call the actual worker\n    @Override\n    final public QueryIterator evaluate(Op op, DatasetGraph dsg, Binding binding, Context context) {\n        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 164,
              "startColumn": 21,
              "endLine": 164,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/QueryEngineBase.java",
              "type": "Op",
              "code": "        if ( query != null )\n            Explain.explain(\"QUERY\", query, context);\n        Explain.explain(\"ALGEBRA\", op, context);\n        return eval(op, dsg, binding, context);\n    }\n\n    private QueryIterator evaluateNoMgt(Op op, DatasetGraph dsg, Binding binding, Context context) {"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 64,
              "startColumn": 31,
              "endLine": 64,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/QueryEngineRef.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public QueryIterator eval(Op op, DatasetGraph dsg, Binding binding, Context context) {\n        if ( binding.vars().hasNext() )\n            op = Substitute.substitute(op, binding);\n        ExecutionContext execCxt = ExecutionContext.create(dsg, context);"
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 69,
              "startColumn": 42,
              "endLine": 69,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/QueryEngineRef.java",
              "type": "Op",
              "code": "            op = Substitute.substitute(op, binding);\n        ExecutionContext execCxt = ExecutionContext.create(dsg, context);\n        Evaluator eval = EvaluatorFactory.create(execCxt);\n        Table table = RefEval.eval(eval, op);\n        QueryIterator qIter = table.iterator(execCxt);\n        return QueryIteratorCheck.check(qIter, execCxt);\n    }"
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 55,
              "startColumn": 51,
              "endLine": 55,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/RefEval.java",
              "type": "Op",
              "code": "import org.apache.jena.sparql.engine.main.QC;\n\npublic class RefEval {\n    public static Table eval(Evaluator evaluator, Op op) {\n        EvaluatorDispatch ev = new EvaluatorDispatch(evaluator);\n        op.visit(ev);\n        Table table = ev.getResult();"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 57,
              "startColumn": 9,
              "endLine": 57,
              "endColumn": 11,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/RefEval.java",
              "type": "Op",
              "code": "public class RefEval {\n    public static Table eval(Evaluator evaluator, Op op) {\n        EvaluatorDispatch ev = new EvaluatorDispatch(evaluator);\n        op.visit(ev);\n        Table table = ev.getResult();\n        return table;\n    }"
            },
            {
              "step": 21,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 22,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 23,
              "variableName": "OpService opService",
              "startLine": 219,
              "startColumn": 23,
              "endLine": 219,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);"
            },
            {
              "step": 24,
              "variableName": "opService",
              "startLine": 220,
              "startColumn": 44,
              "endLine": 220,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "",
              "code": "\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "opQuery",
              "startLine": 73,
              "startColumn": 15,
              "endLine": 73,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/test/java/org/apache/jena/sparql/algebra/optimize/TransformTests.java",
              "type": "Op",
              "code": "        Query query = QueryFactory.create(queryString);\n        Op opQuery = Algebra.compile(query);\n        Op op1 = Algebra.compile(query);   // Safe copy\n        check(opQuery, opExpectedString);\n        assertEquals(\"Modification of input during optimization\", op1, opQuery);\n    }\n"
            },
            {
              "step": 1,
              "variableName": "Op opToOptimize",
              "startLine": 77,
              "startColumn": 31,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/test/java/org/apache/jena/sparql/algebra/optimize/TransformTests.java",
              "type": "Op",
              "code": "        assertEquals(\"Modification of input during optimization\", op1, opQuery);\n    }\n\n    private static void check(Op opToOptimize, String opExpectedString) {\n        Op opOptimize = Algebra.optimize(opToOptimize);\n        Op opExpected = SSE.parseOp(opExpectedString);\n        if ( false ) {"
            },
            {
              "step": 2,
              "variableName": "opToOptimize",
              "startLine": 78,
              "startColumn": 42,
              "endLine": 78,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/test/java/org/apache/jena/sparql/algebra/optimize/TransformTests.java",
              "type": "Op",
              "code": "    }\n\n    private static void check(Op opToOptimize, String opExpectedString) {\n        Op opOptimize = Algebra.optimize(opToOptimize);\n        Op opExpected = SSE.parseOp(opExpectedString);\n        if ( false ) {\n            // Hook for more detail during development."
            },
            {
              "step": 3,
              "variableName": "Op op",
              "startLine": 54,
              "startColumn": 31,
              "endLine": 54,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    // -------- Optimize\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)"
            },
            {
              "step": 4,
              "variableName": "op",
              "startLine": 54,
              "startColumn": 56,
              "endLine": 54,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    // -------- Optimize\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)"
            },
            {
              "step": 5,
              "variableName": "Op op",
              "startLine": 57,
              "startColumn": 31,
              "endLine": 57,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "    public static Op optimize(Op op) { return optimize(op, null); }\n\n    /** Apply static transformations to a query to optimize it */\n    public static Op optimize(Op op, Context context)\n    {\n        if ( context == null )\n            context = ARQ.getContext();"
            },
            {
              "step": 6,
              "variableName": "op",
              "startLine": 64,
              "startColumn": 34,
              "endLine": 64,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Algebra.java",
              "type": "Op",
              "code": "        // Call-through to somewhere to manage all the optimizations\n        if ( op == null )\n            return null;\n        return Optimize.optimize(op, context);\n    }\n\n    // -------- Compile"
            },
            {
              "step": 7,
              "variableName": "Op op",
              "startLine": 61,
              "startColumn": 31,
              "endLine": 61,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    }\n\n    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }"
            },
            {
              "step": 8,
              "variableName": "op",
              "startLine": 63,
              "startColumn": 28,
              "endLine": 63,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/Optimize.java",
              "type": "Op",
              "code": "    /** Optimize based on all options */\n    public static Op optimize(Op op, Context context) {\n        Rewrite opt = decideOptimizer(context) ;\n        return opt.rewrite(op) ;\n    }\n\n    /** Set the global optimizer factory to one that does nothing."
            },
            {
              "step": 9,
              "variableName": "Op op",
              "startLine": 38,
              "startColumn": 23,
              "endLine": 38,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/OptimizerMinimal.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public Op rewrite(Op op) {\n        // Property functions - convert lists to arguments, create (propfunc)\n        op = TransformPropertyFunction.transform(op, context) ;\n        // Rename variables that are hidden by subqueries etc."
            },
            {
              "step": 10,
              "variableName": "op",
              "startLine": 40,
              "startColumn": 50,
              "endLine": 40,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/OptimizerMinimal.java",
              "type": "Op",
              "code": "    @Override\n    public Op rewrite(Op op) {\n        // Property functions - convert lists to arguments, create (propfunc)\n        op = TransformPropertyFunction.transform(op, context) ;\n        // Rename variables that are hidden by subqueries etc.\n        // so all variables can be treated globally.\n        // Must always do this for QueryEngineMain."
            },
            {
              "step": 11,
              "variableName": "Op op",
              "startLine": 48,
              "startColumn": 32,
              "endLine": 48,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformPropertyFunction.java",
              "type": "Op",
              "code": "     * If {@link ARQ#enablePropertyFunctions} is false, then property functions are\n     * not enabled and remain as plain triples. For example, this is set false by \"strict mode\"\n     */\n    public static Op transform(Op op, Context context) {\n        Transform t = new TransformPropertyFunction(context);\n        return Transformer.transform(t, op);\n    }"
            },
            {
              "step": 12,
              "variableName": "op",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformPropertyFunction.java",
              "type": "Op",
              "code": "     */\n    public static Op transform(Op op, Context context) {\n        Transform t = new TransformPropertyFunction(context);\n        return Transformer.transform(t, op);\n    }\n\n    public TransformPropertyFunction(Context context) {"
            },
            {
              "step": 13,
              "variableName": "Op op",
              "startLine": 40,
              "startColumn": 53,
              "endLine": 40,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    public static void set(Transformer value) { Transformer.singleton = value; }\n\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */"
            },
            {
              "step": 14,
              "variableName": "op",
              "startLine": 41,
              "startColumn": 46,
              "endLine": 41,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */\n    public static Op transform(Transform transform, ExprTransform exprTransform, Op op)"
            },
            {
              "step": 15,
              "variableName": "Op op",
              "startLine": 86,
              "startColumn": 54,
              "endLine": 86,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 16,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 48,
              "endLine": 87,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 17,
              "variableName": "Op op",
              "startLine": 90,
              "startColumn": 83,
              "endLine": 90,
              "endColumn": 88,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "op",
              "startLine": 91,
              "startColumn": 58,
              "endLine": 91,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 19,
              "variableName": "Op op",
              "startLine": 94,
              "startColumn": 82,
              "endLine": 94,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 20,
              "variableName": "op",
              "startLine": 95,
              "startColumn": 33,
              "endLine": 95,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n\n    // --------------------------------"
            },
            {
              "step": 21,
              "variableName": "Op op",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }"
            },
            {
              "step": 22,
              "variableName": "op",
              "startLine": 172,
              "startColumn": 26,
              "endLine": 172,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }\n\n    /** Transform an {@link Op}. */"
            },
            {
              "step": 23,
              "variableName": "Op op",
              "startLine": 181,
              "startColumn": 32,
              "endLine": 181,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }"
            },
            {
              "step": 24,
              "variableName": "op",
              "startLine": 182,
              "startColumn": 14,
              "endLine": 182,
              "endColumn": 16,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }\n"
            },
            {
              "step": 25,
              "variableName": "Op op",
              "startLine": 48,
              "startColumn": 29,
              "endLine": 48,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Walk visiting every {@link Op} and every {@link Expr},\n     *  starting from an {@link Op}.\n     */\n    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);"
            },
            {
              "step": 26,
              "variableName": "op",
              "startLine": 51,
              "startColumn": 15,
              "endLine": 51,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    public static void walkSkipService(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 27,
              "variableName": "Op op",
              "startLine": 60,
              "startColumn": 31,
              "endLine": 60,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walkSkipService$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }"
            },
            {
              "step": 28,
              "variableName": "op",
              "startLine": 62,
              "startColumn": 15,
              "endLine": 62,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }\n\n    private static void walkSkipService$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 29,
              "variableName": "Op op",
              "startLine": 70,
              "startColumn": 31,
              "endLine": 70,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walk$(op, wv);\n    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "op",
              "startLine": 71,
              "startColumn": 21,
              "endLine": 71,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n\n    /** Walk visiting every {@link Expr} with an {@link ExprVisitor},"
            },
            {
              "step": 31,
              "variableName": "Op op",
              "startLine": 74,
              "startColumn": 22,
              "endLine": 74,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            op.visit(afterVisitor) ;\n    }\n\n    public void walk(Op op) {\n        if ( op == null )\n            return ;\n        if ( opDepth == opDepthLimit )"
            },
            {
              "step": 32,
              "variableName": "op",
              "startLine": 81,
              "startColumn": 15,
              "endLine": 81,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            // No deeper.\n            return ;\n        opDepth++ ;\n        try { op.visit(this); }\n        finally { opDepth-- ; }\n    }\n"
            },
            {
              "step": 33,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 34,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 35,
              "variableName": "OpService op",
              "startLine": 33,
              "startColumn": 23,
              "endLine": 33,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    }\n    \n    @Override\n    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;"
            },
            {
              "step": 36,
              "variableName": "op",
              "startLine": 36,
              "startColumn": 13,
              "endLine": 36,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;\n    }\n}\n"
            },
            {
              "step": 37,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 38,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 39,
              "variableName": "OpService opService",
              "startLine": 219,
              "startColumn": 23,
              "endLine": 219,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);"
            },
            {
              "step": 40,
              "variableName": "opService",
              "startLine": 220,
              "startColumn": 44,
              "endLine": 220,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "",
              "code": "\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "subOp",
              "startLine": 45,
              "startColumn": 55,
              "endLine": 45,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/algebra/TransformSE_OptimizeSelfJoin.java",
              "type": "Op",
              "code": "    public Op transform(OpService opService, Op subOp) {\n        Op result;\n        ServiceOpts so = ServiceOpts.getEffectiveService(\n                new OpService(opService.getService(), subOp, opService.getSilent()));\n\n        OpService targetService = so.getTargetService();\n        if (ServiceEnhancerConstants.SELF.equals(targetService.getService())) {"
            },
            {
              "step": 1,
              "variableName": "Op subOp",
              "startLine": 35,
              "startColumn": 40,
              "endLine": 35,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "Op",
              "code": "    private final ElementService serviceElement;\n    private final boolean silent;\n\n    public OpService(Node serviceNode, Op subOp, boolean silent) {\n        this(serviceNode, subOp, null, silent);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "subOp",
              "startLine": 36,
              "startColumn": 27,
              "endLine": 36,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "Op",
              "code": "    private final boolean silent;\n\n    public OpService(Node serviceNode, Op subOp, boolean silent) {\n        this(serviceNode, subOp, null, silent);\n    }\n\n    public OpService(Node serviceNode, Op subOp, ElementService elt, boolean silent) {"
            },
            {
              "step": 3,
              "variableName": "Op subOp",
              "startLine": 39,
              "startColumn": 40,
              "endLine": 39,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "Op",
              "code": "        this(serviceNode, subOp, null, silent);\n    }\n\n    public OpService(Node serviceNode, Op subOp, ElementService elt, boolean silent) {\n        super(subOp);\n        this.serviceNode = serviceNode;\n        this.serviceElement = elt;"
            },
            {
              "step": 4,
              "variableName": "subOp",
              "startLine": 40,
              "startColumn": 15,
              "endLine": 40,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "Op",
              "code": "    }\n\n    public OpService(Node serviceNode, Op subOp, ElementService elt, boolean silent) {\n        super(subOp);\n        this.serviceNode = serviceNode;\n        this.serviceElement = elt;\n        this.silent = silent;"
            },
            {
              "step": 5,
              "variableName": "super(subOp);",
              "startLine": 40,
              "startColumn": 9,
              "endLine": 40,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService [sub] : Op",
              "code": "    }\n\n    public OpService(Node serviceNode, Op subOp, ElementService elt, boolean silent) {\n        super(subOp);\n        this.serviceNode = serviceNode;\n        this.serviceElement = elt;\n        this.silent = silent;"
            },
            {
              "step": 6,
              "variableName": "this(serviceNode, subOp, null, silent);",
              "startLine": 36,
              "startColumn": 9,
              "endLine": 36,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService [sub] : Op",
              "code": "    private final boolean silent;\n\n    public OpService(Node serviceNode, Op subOp, boolean silent) {\n        this(serviceNode, subOp, null, silent);\n    }\n\n    public OpService(Node serviceNode, Op subOp, ElementService elt, boolean silent) {"
            },
            {
              "step": 7,
              "variableName": "new OpService(opService.getService(), subOp, opService.getSilent())",
              "startLine": 45,
              "startColumn": 17,
              "endLine": 45,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/algebra/TransformSE_OptimizeSelfJoin.java",
              "type": "OpService [sub] : Op",
              "code": "    public Op transform(OpService opService, Op subOp) {\n        Op result;\n        ServiceOpts so = ServiceOpts.getEffectiveService(\n                new OpService(opService.getService(), subOp, opService.getSilent()));\n\n        OpService targetService = so.getTargetService();\n        if (ServiceEnhancerConstants.SELF.equals(targetService.getService())) {"
            },
            {
              "step": 8,
              "variableName": "OpService opService",
              "startLine": 210,
              "startColumn": 51,
              "endLine": 210,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "OpService [sub] : Op",
              "code": "        return knownOptions.contains(key);\n    }\n\n    public static ServiceOpts getEffectiveService(OpService opService) {\n        List<Entry<String, String>> opts = new ArrayList<>();\n        OpService currentOp = opService;\n        boolean isSilent;"
            },
            {
              "step": 9,
              "variableName": "opService",
              "startLine": 256,
              "startColumn": 35,
              "endLine": 256,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "OpService [sub] : Op",
              "code": "        }\n\n        ServiceOpts result = opts.isEmpty()\n                ? new ServiceOpts(opService, opts)\n                : new ServiceOpts(new OpService(NodeFactory.createURI(serviceStr), currentOp.getSubOp(), isSilent), opts);\n        return result;\n    }"
            },
            {
              "step": 10,
              "variableName": "OpService opService",
              "startLine": 74,
              "startColumn": 24,
              "endLine": 74,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "OpService [sub] : Op",
              "code": "    protected OpService opService;\n    protected List<Entry<String, String>> options;\n\n    public ServiceOpts(OpService opService, List<Entry<String, String>> options) {\n        super();\n        this.opService = opService;\n        this.options = options;"
            },
            {
              "step": 11,
              "variableName": "opService",
              "startLine": 76,
              "startColumn": 26,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "OpService [sub] : Op",
              "code": "\n    public ServiceOpts(OpService opService, List<Entry<String, String>> options) {\n        super();\n        this.opService = opService;\n        this.options = options;\n    }\n"
            },
            {
              "step": 12,
              "variableName": "this",
              "startLine": 76,
              "startColumn": 9,
              "endLine": 76,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "ServiceOpts [opService, sub] : Op",
              "code": "\n    public ServiceOpts(OpService opService, List<Entry<String, String>> options) {\n        super();\n        this.opService = opService;\n        this.options = options;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "new ServiceOpts(opService, opts)",
              "startLine": 256,
              "startColumn": 19,
              "endLine": 256,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "ServiceOpts [opService, sub] : Op",
              "code": "        }\n\n        ServiceOpts result = opts.isEmpty()\n                ? new ServiceOpts(opService, opts)\n                : new ServiceOpts(new OpService(NodeFactory.createURI(serviceStr), currentOp.getSubOp(), isSilent), opts);\n        return result;\n    }"
            },
            {
              "step": 14,
              "variableName": "result",
              "startLine": 258,
              "startColumn": 16,
              "endLine": 258,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "ServiceOpts [opService, sub] : Op",
              "code": "        ServiceOpts result = opts.isEmpty()\n                ? new ServiceOpts(opService, opts)\n                : new ServiceOpts(new OpService(NodeFactory.createURI(serviceStr), currentOp.getSubOp(), isSilent), opts);\n        return result;\n    }\n}\n"
            },
            {
              "step": 15,
              "variableName": "ServiceOpts.getEffectiveService(",
              "startLine": 44,
              "startColumn": 26,
              "endLine": 45,
              "endColumn": 85,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/algebra/TransformSE_OptimizeSelfJoin.java",
              "type": "ServiceOpts [opService, sub] : Op",
              "code": "    @Override\n    public Op transform(OpService opService, Op subOp) {\n        Op result;\n        ServiceOpts so = ServiceOpts.getEffectiveService(\n                new OpService(opService.getService(), subOp, opService.getSilent()));\n\n        OpService targetService = so.getTargetService();"
            },
            {
              "step": 16,
              "variableName": "so",
              "startLine": 47,
              "startColumn": 35,
              "endLine": 47,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/algebra/TransformSE_OptimizeSelfJoin.java",
              "type": "ServiceOpts [opService, sub] : Op",
              "code": "        ServiceOpts so = ServiceOpts.getEffectiveService(\n                new OpService(opService.getService(), subOp, opService.getSilent()));\n\n        OpService targetService = so.getTargetService();\n        if (ServiceEnhancerConstants.SELF.equals(targetService.getService())) {\n            String optimizerOpt = so.getFirstValue(ServiceOpts.SO_OPTIMIZE, \"on\", \"on\");\n"
            },
            {
              "step": 17,
              "variableName": "getTargetService",
              "startLine": 80,
              "startColumn": 22,
              "endLine": 80,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "ServiceOpts [opService, sub] : Op",
              "code": "        this.options = options;\n    }\n\n    public OpService getTargetService() {\n        return opService;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "opService",
              "startLine": 81,
              "startColumn": 16,
              "endLine": 81,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "ServiceOpts [opService, sub] : Op",
              "code": "    }\n\n    public OpService getTargetService() {\n        return opService;\n    }\n\n    public ServiceOpts copy() {"
            },
            {
              "step": 19,
              "variableName": "opService",
              "startLine": 81,
              "startColumn": 16,
              "endLine": 81,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/impl/ServiceOpts.java",
              "type": "OpService [sub] : Op",
              "code": "    }\n\n    public OpService getTargetService() {\n        return opService;\n    }\n\n    public ServiceOpts copy() {"
            },
            {
              "step": 20,
              "variableName": "so.getTargetService()",
              "startLine": 47,
              "startColumn": 35,
              "endLine": 47,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/algebra/TransformSE_OptimizeSelfJoin.java",
              "type": "OpService [sub] : Op",
              "code": "        ServiceOpts so = ServiceOpts.getEffectiveService(\n                new OpService(opService.getService(), subOp, opService.getSilent()));\n\n        OpService targetService = so.getTargetService();\n        if (ServiceEnhancerConstants.SELF.equals(targetService.getService())) {\n            String optimizerOpt = so.getFirstValue(ServiceOpts.SO_OPTIMIZE, \"on\", \"on\");\n"
            },
            {
              "step": 21,
              "variableName": "targetService",
              "startLine": 52,
              "startColumn": 49,
              "endLine": 52,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/algebra/TransformSE_OptimizeSelfJoin.java",
              "type": "OpService [sub] : Op",
              "code": "            String optimizerOpt = so.getFirstValue(ServiceOpts.SO_OPTIMIZE, \"on\", \"on\");\n\n            if (!optimizerOpt.equalsIgnoreCase(\"off\")) {\n                Op newSub = selfRewrite.rewrite(targetService.getSubOp());\n\n                so.removeKey(ServiceOpts.SO_OPTIMIZE);\n                // so.add(ServiceOpts.SO_OPTIMIZE, \"off\");"
            },
            {
              "step": 22,
              "variableName": "getSubOp",
              "startLine": 35,
              "startColumn": 15,
              "endLine": 35,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/Op1.java",
              "type": "OpService [sub] : Op",
              "code": "        this.sub = subOp;\n    }\n    \n    public Op getSubOp() { return sub; }\n    //public void setSubOp(Op op) { sub = op; }\n    \n    public abstract Op apply(Transform transform, Op subOp);"
            },
            {
              "step": 23,
              "variableName": "sub",
              "startLine": 35,
              "startColumn": 35,
              "endLine": 35,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/Op1.java",
              "type": "OpService [sub] : Op",
              "code": "        this.sub = subOp;\n    }\n    \n    public Op getSubOp() { return sub; }\n    //public void setSubOp(Op op) { sub = op; }\n    \n    public abstract Op apply(Transform transform, Op subOp);"
            },
            {
              "step": 24,
              "variableName": "sub",
              "startLine": 35,
              "startColumn": 35,
              "endLine": 35,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/Op1.java",
              "type": "Op",
              "code": "        this.sub = subOp;\n    }\n    \n    public Op getSubOp() { return sub; }\n    //public void setSubOp(Op op) { sub = op; }\n    \n    public abstract Op apply(Transform transform, Op subOp);"
            },
            {
              "step": 25,
              "variableName": "targetService.getSubOp()",
              "startLine": 52,
              "startColumn": 49,
              "endLine": 52,
              "endColumn": 73,
              "uri": "jena-jena-5.4.0/jena-extras/jena-serviceenhancer/src/main/java/org/apache/jena/sparql/service/enhancer/algebra/TransformSE_OptimizeSelfJoin.java",
              "type": "Op",
              "code": "            String optimizerOpt = so.getFirstValue(ServiceOpts.SO_OPTIMIZE, \"on\", \"on\");\n\n            if (!optimizerOpt.equalsIgnoreCase(\"off\")) {\n                Op newSub = selfRewrite.rewrite(targetService.getSubOp());\n\n                so.removeKey(ServiceOpts.SO_OPTIMIZE);\n                // so.add(ServiceOpts.SO_OPTIMIZE, \"off\");"
            },
            {
              "step": 26,
              "variableName": "Op op",
              "startLine": 38,
              "startColumn": 23,
              "endLine": 38,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/OptimizerMinimal.java",
              "type": "Op",
              "code": "    }\n\n    @Override\n    public Op rewrite(Op op) {\n        // Property functions - convert lists to arguments, create (propfunc)\n        op = TransformPropertyFunction.transform(op, context) ;\n        // Rename variables that are hidden by subqueries etc."
            },
            {
              "step": 27,
              "variableName": "op",
              "startLine": 40,
              "startColumn": 50,
              "endLine": 40,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/OptimizerMinimal.java",
              "type": "Op",
              "code": "    @Override\n    public Op rewrite(Op op) {\n        // Property functions - convert lists to arguments, create (propfunc)\n        op = TransformPropertyFunction.transform(op, context) ;\n        // Rename variables that are hidden by subqueries etc.\n        // so all variables can be treated globally.\n        // Must always do this for QueryEngineMain."
            },
            {
              "step": 28,
              "variableName": "Op op",
              "startLine": 48,
              "startColumn": 32,
              "endLine": 48,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformPropertyFunction.java",
              "type": "Op",
              "code": "     * If {@link ARQ#enablePropertyFunctions} is false, then property functions are\n     * not enabled and remain as plain triples. For example, this is set false by \"strict mode\"\n     */\n    public static Op transform(Op op, Context context) {\n        Transform t = new TransformPropertyFunction(context);\n        return Transformer.transform(t, op);\n    }"
            },
            {
              "step": 29,
              "variableName": "op",
              "startLine": 50,
              "startColumn": 41,
              "endLine": 50,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/optimize/TransformPropertyFunction.java",
              "type": "Op",
              "code": "     */\n    public static Op transform(Op op, Context context) {\n        Transform t = new TransformPropertyFunction(context);\n        return Transformer.transform(t, op);\n    }\n\n    public TransformPropertyFunction(Context context) {"
            },
            {
              "step": 30,
              "variableName": "Op op",
              "startLine": 40,
              "startColumn": 53,
              "endLine": 40,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    public static void set(Transformer value) { Transformer.singleton = value; }\n\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */"
            },
            {
              "step": 31,
              "variableName": "op",
              "startLine": 41,
              "startColumn": 46,
              "endLine": 41,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    /** Transform an algebra expression */\n    public static Op transform(Transform transform, Op op)\n    { return get().transformation(transform, op, null, null) ; }\n\n    /** Transform an algebra expression and the expressions */\n    public static Op transform(Transform transform, ExprTransform exprTransform, Op op)"
            },
            {
              "step": 32,
              "variableName": "Op op",
              "startLine": 86,
              "startColumn": 54,
              "endLine": 86,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "\n    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 33,
              "variableName": "op",
              "startLine": 87,
              "startColumn": 48,
              "endLine": 87,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    // To allow subclassing this class, we use a singleton pattern\n    // and these protected methods.\n    protected Op transformation(Transform transform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 34,
              "variableName": "Op op",
              "startLine": 90,
              "startColumn": 83,
              "endLine": 90,
              "endColumn": 88,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation(transform, null, op, beforeVisitor, afterVisitor) ;\n    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 35,
              "variableName": "op",
              "startLine": 91,
              "startColumn": 58,
              "endLine": 91,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    protected Op transformation(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 36,
              "variableName": "Op op",
              "startLine": 94,
              "startColumn": 82,
              "endLine": 94,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "        return transformation$(transform, exprTransform, op, beforeVisitor, afterVisitor) ;\n    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n"
            },
            {
              "step": 37,
              "variableName": "op",
              "startLine": 95,
              "startColumn": 33,
              "endLine": 95,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/Transformer.java",
              "type": "Op",
              "code": "    }\n\n    private Op transformation$(Transform transform, ExprTransform exprTransform, Op op, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        return Walker.transform(op, transform, exprTransform, beforeVisitor, afterVisitor) ;\n    }\n\n    // --------------------------------"
            },
            {
              "step": 38,
              "variableName": "Op op",
              "startLine": 170,
              "startColumn": 32,
              "endLine": 170,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }"
            },
            {
              "step": 39,
              "variableName": "op",
              "startLine": 172,
              "startColumn": 26,
              "endLine": 172,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Transform an {@link Op}. */\n    public static Op transform(Op op, Transform opTransform, ExprTransform exprTransform, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        ApplyTransformVisitor v = createTransformer(opTransform, exprTransform, beforeVisitor,afterVisitor);\n        return transform(op, v, beforeVisitor, afterVisitor);\n    }\n\n    /** Transform an {@link Op}. */"
            },
            {
              "step": 40,
              "variableName": "Op op",
              "startLine": 181,
              "startColumn": 32,
              "endLine": 181,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }"
            },
            {
              "step": 41,
              "variableName": "op",
              "startLine": 182,
              "startColumn": 14,
              "endLine": 182,
              "endColumn": 16,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    /** Transform an {@link Op}. */\n    public static Op transform(Op op, ApplyTransformVisitor v, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        walk(op, v, v, beforeVisitor, afterVisitor);\n        return v.opResult();\n    }\n"
            },
            {
              "step": 42,
              "variableName": "Op op",
              "startLine": 48,
              "startColumn": 29,
              "endLine": 48,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    /** Walk visiting every {@link Op} and every {@link Expr},\n     *  starting from an {@link Op}.\n     */\n    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);"
            },
            {
              "step": 43,
              "variableName": "op",
              "startLine": 51,
              "startColumn": 15,
              "endLine": 51,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    public static void walk(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        if ( op == null )\n            return;\n        walk$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    public static void walkSkipService(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 44,
              "variableName": "Op op",
              "startLine": 60,
              "startColumn": 31,
              "endLine": 60,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walkSkipService$(op, opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n    }\n\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }"
            },
            {
              "step": 45,
              "variableName": "op",
              "startLine": 62,
              "startColumn": 15,
              "endLine": 62,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "\n    private static void walk$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {\n        WalkerVisitor wv = createWalker(opVisitor, exprVisitor, beforeVisitor, afterVisitor);\n        walk$(op, wv);\n    }\n\n    private static void walkSkipService$(Op op, OpVisitor opVisitor, ExprVisitor exprVisitor, OpVisitor beforeVisitor, OpVisitor afterVisitor) {"
            },
            {
              "step": 46,
              "variableName": "Op op",
              "startLine": 70,
              "startColumn": 31,
              "endLine": 70,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "        walk$(op, wv);\n    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "op",
              "startLine": 71,
              "startColumn": 21,
              "endLine": 71,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/Walker.java",
              "type": "Op",
              "code": "    }\n\n    private static void walk$(Op op, WalkerVisitor walker) {\n        walker.walk(op);\n    }\n\n    /** Walk visiting every {@link Expr} with an {@link ExprVisitor},"
            },
            {
              "step": 48,
              "variableName": "Op op",
              "startLine": 74,
              "startColumn": 22,
              "endLine": 74,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            op.visit(afterVisitor) ;\n    }\n\n    public void walk(Op op) {\n        if ( op == null )\n            return ;\n        if ( opDepth == opDepthLimit )"
            },
            {
              "step": 49,
              "variableName": "op",
              "startLine": 81,
              "startColumn": 15,
              "endLine": 81,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitor.java",
              "type": "Op",
              "code": "            // No deeper.\n            return ;\n        opDepth++ ;\n        try { op.visit(this); }\n        finally { opDepth-- ; }\n    }\n"
            },
            {
              "step": 50,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 51,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 52,
              "variableName": "OpService op",
              "startLine": 33,
              "startColumn": 23,
              "endLine": 33,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    }\n    \n    @Override\n    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;"
            },
            {
              "step": 53,
              "variableName": "op",
              "startLine": 36,
              "startColumn": 13,
              "endLine": 36,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/walker/WalkerVisitorSkipService.java",
              "type": "OpService",
              "code": "    public void visit(OpService op) {\n        // Visit the op itself but not the subOp. \n        if ( opVisitor != null )\n            op.visit(opVisitor) ;\n    }\n}\n"
            },
            {
              "step": 54,
              "variableName": "visit",
              "startLine": 54,
              "startColumn": 17,
              "endLine": 54,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 55,
              "variableName": "this",
              "startLine": 54,
              "startColumn": 67,
              "endLine": 54,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/algebra/op/OpService.java",
              "type": "OpService",
              "code": "    @Override\n    public String getName()                     { return Tags.tagService; }\n    @Override\n    public void visit(OpVisitor opVisitor)      { opVisitor.visit(this); }\n    public Node getService()                    { return serviceNode;  }\n    public ElementService getServiceElement()   { return serviceElement;  }\n    public boolean getSilent()                  { return silent; }"
            },
            {
              "step": 56,
              "variableName": "OpService opService",
              "startLine": 219,
              "startColumn": 23,
              "endLine": 219,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "OpService",
              "code": "    }\n\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);"
            },
            {
              "step": 57,
              "variableName": "opService",
              "startLine": 220,
              "startColumn": 44,
              "endLine": 220,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/ref/EvaluatorDispatch.java",
              "type": "",
              "code": "\n    @Override\n    public void visit(OpService opService) {\n        QueryIterator qIter = Service.exec(opService, ARQ.getContext());\n        Table table = TableFactory.create(qIter);\n        push(table);\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 41,
      "fileName": "E_Function.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "iter.nextBinding()",
              "startLine": 111,
              "startColumn": 33,
              "endLine": 111,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterGroup.java",
              "type": "Binding",
              "code": "                // Phase 1 : Create keys and aggregators per key, and pump bindings through the aggregators.\n                MultiValuedMap<Binding, Pair<Var, Accumulator>> accumulators = MultiMapUtils.newListValuedHashMap();\n                while (iter.hasNext()) {\n                    Binding b = iter.nextBinding();\n                    Binding key = genKey(groupVarExpr, b, execCxt);\n\n                    if ( !hasAggregators ) {"
            },
            {
              "step": 13,
              "variableName": "b",
              "startLine": 131,
              "startColumn": 52,
              "endLine": 131,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterGroup.java",
              "type": "Binding",
              "code": "\n                    // Do the per-accumulator calculation.\n                    for ( Pair<Var, Accumulator> pair : accumulators.get(key) )\n                        pair.getRight().accumulate(b, execCxt);\n                }\n\n                // Phase 2 : There was input and so there are some groups."
            },
            {
              "step": 14,
              "variableName": "Binding binding",
              "startLine": 70,
              "startColumn": 32,
              "endLine": 70,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-examples/src/main/java/arq/examples/aggregates/CustomAggregate.java",
              "type": "Binding",
              "code": "\n        /** Function called on each row in a group */\n        @Override\n        public void accumulate(Binding binding, FunctionEnv functionEnv) {\n            ExprList exprList = agg.getExprList() ;\n            for(Expr expr: exprList) {\n                try {"
            },
            {
              "step": 15,
              "variableName": "binding",
              "startLine": 74,
              "startColumn": 46,
              "endLine": 74,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-examples/src/main/java/arq/examples/aggregates/CustomAggregate.java",
              "type": "Binding",
              "code": "            ExprList exprList = agg.getExprList() ;\n            for(Expr expr: exprList) {\n                try {\n                    NodeValue nv = expr.eval(binding, functionEnv) ;\n                    // Evaluation succeeded.\n                    if ( nv.isLiteral())\n                        count ++ ;"
            },
            {
              "step": 16,
              "variableName": "Binding binding",
              "startLine": 91,
              "startColumn": 33,
              "endLine": 91,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "    protected NodeValue evalSpecial(Binding binding, FunctionEnv env) { return null; }\n\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 92,
              "startColumn": 35,
              "endLine": 92,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;\n"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 60,
              "startColumn": 34,
              "endLine": 60,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "Binding",
              "code": "    // The Function subsystem takes over evaluation via SpecialForms.\n    // This allows a \"function\" to behave as a special form (this is discouraged).\n    @Override\n    public NodeValue evalSpecial(Binding binding, FunctionEnv env) {\n        // Otherwise, the buildFunction() calls should have done everything\n        if ( !functionBound )\n            buildFunction(env.getContext()) ;"
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "",
              "code": "            buildFunction(env.getContext()) ;\n        if ( function == null )\n            throw new ExprEvalException(\"URI <\" + getFunctionIRI() + \"> not bound\") ;\n        NodeValue r = function.exec(binding, args, getFunctionIRI(), env) ;\n        return r ;\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 8,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 10,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 11,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 12,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 13,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 14,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 15,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 16,
              "variableName": "Binding inputBinding",
              "startLine": 59,
              "startColumn": 39,
              "endLine": 59,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterUnfold.java",
              "type": "Binding",
              "code": "    }\n\n    @Override\n    protected QueryIterator nextStage(Binding inputBinding) {\n        final NodeValue nv;\n        try {\n            nv = expr.eval( inputBinding, getExecContext() );"
            },
            {
              "step": 17,
              "variableName": "inputBinding",
              "startLine": 62,
              "startColumn": 29,
              "endLine": 62,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterUnfold.java",
              "type": "Binding",
              "code": "    protected QueryIterator nextStage(Binding inputBinding) {\n        final NodeValue nv;\n        try {\n            nv = expr.eval( inputBinding, getExecContext() );\n        }\n        catch ( final ExprEvalException ex ) {\n            // If the expression failed to evaluate, we create no"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 91,
              "startColumn": 33,
              "endLine": 91,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "    protected NodeValue evalSpecial(Binding binding, FunctionEnv env) { return null; }\n\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;"
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 92,
              "startColumn": 35,
              "endLine": 92,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;\n"
            },
            {
              "step": 20,
              "variableName": "Binding binding",
              "startLine": 60,
              "startColumn": 34,
              "endLine": 60,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "Binding",
              "code": "    // The Function subsystem takes over evaluation via SpecialForms.\n    // This allows a \"function\" to behave as a special form (this is discouraged).\n    @Override\n    public NodeValue evalSpecial(Binding binding, FunctionEnv env) {\n        // Otherwise, the buildFunction() calls should have done everything\n        if ( !functionBound )\n            buildFunction(env.getContext()) ;"
            },
            {
              "step": 21,
              "variableName": "binding",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "",
              "code": "            buildFunction(env.getContext()) ;\n        if ( function == null )\n            throw new ExprEvalException(\"URI <\" + getFunctionIRI() + \"> not bound\") ;\n        NodeValue r = function.exec(binding, args, getFunctionIRI(), env) ;\n        return r ;\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "getInput().nextBinding()",
              "startLine": 79,
              "startColumn": 29,
              "endLine": 79,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterProcessBinding.java",
              "type": "Binding",
              "code": "        while (getInput().hasNext()) {\n            checkCancelled();\n            // Skip forward until a binding to return is found.\n            Binding input = getInput().nextBinding() ;\n            Binding output = accept(input) ;\n            if ( output != null ) {\n                nextBinding = output ;"
            },
            {
              "step": 13,
              "variableName": "input",
              "startLine": 80,
              "startColumn": 37,
              "endLine": 80,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterProcessBinding.java",
              "type": "Binding",
              "code": "            checkCancelled();\n            // Skip forward until a binding to return is found.\n            Binding input = getInput().nextBinding() ;\n            Binding output = accept(input) ;\n            if ( output != null ) {\n                nextBinding = output ;\n                return true ;"
            },
            {
              "step": 14,
              "variableName": "Binding binding",
              "startLine": 46,
              "startColumn": 27,
              "endLine": 46,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterFilterExpr.java",
              "type": "Binding",
              "code": "    }\n\n    @Override\n    public Binding accept(Binding binding) {\n        try {\n            // ExprNode.isSatisfied converts exceptions to ExprEvalException\n            if ( expr.isSatisfied(binding, super.getExecContext()) )"
            },
            {
              "step": 15,
              "variableName": "binding",
              "startLine": 49,
              "startColumn": 35,
              "endLine": 49,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterFilterExpr.java",
              "type": "Binding",
              "code": "    public Binding accept(Binding binding) {\n        try {\n            // ExprNode.isSatisfied converts exceptions to ExprEvalException\n            if ( expr.isSatisfied(binding, super.getExecContext()) )\n                return binding;\n            return null;\n        } catch (QueryCancelledException ex) {"
            },
            {
              "step": 16,
              "variableName": "Binding binding",
              "startLine": 40,
              "startColumn": 32,
              "endLine": 40,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprNode.java",
              "type": "Binding",
              "code": "public abstract class ExprNode implements Expr\n{\n    @Override\n    public boolean isSatisfied(Binding binding, FunctionEnv funcEnv) {\n        try {\n            NodeValue v = eval(binding, funcEnv);\n            boolean b = XSDFuncOp.booleanEffectiveValue(v);"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 42,
              "startColumn": 32,
              "endLine": 42,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprNode.java",
              "type": "Binding",
              "code": "    @Override\n    public boolean isSatisfied(Binding binding, FunctionEnv funcEnv) {\n        try {\n            NodeValue v = eval(binding, funcEnv);\n            boolean b = XSDFuncOp.booleanEffectiveValue(v);\n            return b;\n        }"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 91,
              "startColumn": 33,
              "endLine": 91,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "    protected NodeValue evalSpecial(Binding binding, FunctionEnv env) { return null; }\n\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;"
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 92,
              "startColumn": 35,
              "endLine": 92,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;\n"
            },
            {
              "step": 20,
              "variableName": "Binding binding",
              "startLine": 60,
              "startColumn": 34,
              "endLine": 60,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "Binding",
              "code": "    // The Function subsystem takes over evaluation via SpecialForms.\n    // This allows a \"function\" to behave as a special form (this is discouraged).\n    @Override\n    public NodeValue evalSpecial(Binding binding, FunctionEnv env) {\n        // Otherwise, the buildFunction() calls should have done everything\n        if ( !functionBound )\n            buildFunction(env.getContext()) ;"
            },
            {
              "step": 21,
              "variableName": "binding",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "",
              "code": "            buildFunction(env.getContext()) ;\n        if ( function == null )\n            throw new ExprEvalException(\"URI <\" + getFunctionIRI() + \"> not bound\") ;\n        NodeValue r = function.exec(binding, args, getFunctionIRI(), env) ;\n        return r ;\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "procIter.nextBinding()",
              "startLine": 80,
              "startColumn": 16,
              "endLine": 80,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterProcedure.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding()\n    {\n        init( ) ;\n        return procIter.nextBinding() ;\n    }\n    \n    @Override"
            },
            {
              "step": 13,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 14,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 15,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 16,
              "variableName": "qIter.next()",
              "startLine": 99,
              "startColumn": 40,
              "endLine": 99,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterTopN.java",
              "type": "Binding",
              "code": "            protected Iterator<Binding> initializeIterator() {\n\t\ttry {\n\t                while ( qIter.hasNext() ) {\n\t                    Binding binding = qIter.next() ;\n\t                    if ( heap.size() < limit )\n\t                        add(binding) ;\n\t                    else {"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 104,
              "startColumn": 50,
              "endLine": 104,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterTopN.java",
              "type": "Binding",
              "code": "\t                        add(binding) ;\n\t                    else {\n\t                        Binding currentMaxLeastN = heap.peek() ;\n\t                        if ( comparator.compare(binding, currentMaxLeastN) < 0 )\n\t                            add(binding) ;\n\t                    }\n\t                }"
            },
            {
              "step": 18,
              "variableName": "Binding bind1",
              "startLine": 71,
              "startColumn": 24,
              "endLine": 71,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/binding/BindingComparator.java",
              "type": "Binding",
              "code": "    // Compare bindings by iterating.\n\n    @Override\n    public int compare(Binding bind1, Binding bind2) {\n        for ( SortCondition sc : conditions ) {\n            if ( sc.expression == null ) {\n                throw new QueryExecException(\"Broken sort condition\");"
            },
            {
              "step": 19,
              "variableName": "bind1",
              "startLine": 81,
              "startColumn": 42,
              "endLine": 81,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/binding/BindingComparator.java",
              "type": "Binding",
              "code": "            NodeValue nv2 = null;\n\n            try {\n                nv1 = sc.expression.eval(bind1, env);\n            } catch (VariableNotBoundException ex) {} catch (ExprEvalException ex) {\n                Log.warn(this, ex.getMessage());\n            }"
            },
            {
              "step": 20,
              "variableName": "Binding binding",
              "startLine": 91,
              "startColumn": 33,
              "endLine": 91,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "    protected NodeValue evalSpecial(Binding binding, FunctionEnv env) { return null; }\n\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;"
            },
            {
              "step": 21,
              "variableName": "binding",
              "startLine": 92,
              "startColumn": 35,
              "endLine": 92,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/ExprFunctionN.java",
              "type": "Binding",
              "code": "\n    @Override\n    final public NodeValue eval(Binding binding, FunctionEnv env) {\n        NodeValue s = evalSpecial(binding, env);\n        if ( s != null )\n            return s;\n"
            },
            {
              "step": 22,
              "variableName": "Binding binding",
              "startLine": 60,
              "startColumn": 34,
              "endLine": 60,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "Binding",
              "code": "    // The Function subsystem takes over evaluation via SpecialForms.\n    // This allows a \"function\" to behave as a special form (this is discouraged).\n    @Override\n    public NodeValue evalSpecial(Binding binding, FunctionEnv env) {\n        // Otherwise, the buildFunction() calls should have done everything\n        if ( !functionBound )\n            buildFunction(env.getContext()) ;"
            },
            {
              "step": 23,
              "variableName": "binding",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/expr/E_Function.java",
              "type": "",
              "code": "            buildFunction(env.getContext()) ;\n        if ( function == null )\n            throw new ExprEvalException(\"URI <\" + getFunctionIRI() + \"> not bound\") ;\n        NodeValue r = function.exec(binding, args, getFunctionIRI(), env) ;\n        return r ;\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 42,
      "fileName": "PropertyFunctionBase.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 13,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 14,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "Binding binding",
              "startLine": 102,
              "startColumn": 43,
              "endLine": 102,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "Binding",
              "code": "        }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )"
            },
            {
              "step": 16,
              "variableName": "binding",
              "startLine": 104,
              "startColumn": 39,
              "endLine": 104,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )\n                iter = IterLib.noResults(getExecContext()) ;\n            return iter ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 8,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 10,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 11,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 12,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 13,
              "variableName": "procIter.nextBinding()",
              "startLine": 80,
              "startColumn": 16,
              "endLine": 80,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterProcedure.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding()\n    {\n        init( ) ;\n        return procIter.nextBinding() ;\n    }\n    \n    @Override"
            },
            {
              "step": 14,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 15,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 16,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 17,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 18,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "Binding binding",
              "startLine": 102,
              "startColumn": 43,
              "endLine": 102,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "Binding",
              "code": "        }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )"
            },
            {
              "step": 20,
              "variableName": "binding",
              "startLine": 104,
              "startColumn": 39,
              "endLine": 104,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )\n                iter = IterLib.noResults(getExecContext()) ;\n            return iter ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "currentStage.nextBinding()",
              "startLine": 84,
              "startColumn": 16,
              "endLine": 84,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding() {\n        if ( !hasNextBinding() )\n            throw new NoSuchElementException(Lib.className(this) + \".next()/finished\");\n        return currentStage.nextBinding();\n\n    }\n"
            },
            {
              "step": 13,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 14,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 15,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 16,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 102,
              "startColumn": 43,
              "endLine": 102,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "Binding",
              "code": "        }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )"
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 104,
              "startColumn": 39,
              "endLine": 104,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )\n                iter = IterLib.noResults(getExecContext()) ;\n            return iter ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "getInput().nextBinding()",
              "startLine": 89,
              "startColumn": 16,
              "endLine": 89,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterSlice.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding()\n    {\n        count ++ ;\n        return getInput().nextBinding() ;\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 14,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 15,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 16,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 102,
              "startColumn": 43,
              "endLine": 102,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "Binding",
              "code": "        }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )"
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 104,
              "startColumn": 39,
              "endLine": 104,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/pfunction/PropertyFunctionBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, argSubject, predicate, argObject, getExecContext()) ;\n            if ( iter == null )\n                iter = IterLib.noResults(getExecContext()) ;\n            return iter ;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 43,
      "fileName": "ProcedureBase.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 13,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 14,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 16,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 8,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 10,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 11,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 12,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 13,
              "variableName": "procIter.nextBinding()",
              "startLine": 80,
              "startColumn": 16,
              "endLine": 80,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterProcedure.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding()\n    {\n        init( ) ;\n        return procIter.nextBinding() ;\n    }\n    \n    @Override"
            },
            {
              "step": 14,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 15,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 16,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 17,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 18,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 20,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "currentStage.nextBinding()",
              "startLine": 84,
              "startColumn": 16,
              "endLine": 84,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding() {\n        if ( !hasNextBinding() )\n            throw new NoSuchElementException(Lib.className(this) + \".next()/finished\");\n        return currentStage.nextBinding();\n\n    }\n"
            },
            {
              "step": 13,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 14,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 15,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 16,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "getInput().nextBinding()",
              "startLine": 89,
              "startColumn": 16,
              "endLine": 89,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterSlice.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding()\n    {\n        count ++ ;\n        return getInput().nextBinding() ;\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 14,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 15,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 16,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 44,
      "fileName": "ProcedureEval.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 13,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 14,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 15,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 16,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            },
            {
              "step": 17,
              "variableName": "Binding binding",
              "startLine": 33,
              "startColumn": 31,
              "endLine": 33,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "Binding",
              "code": "public abstract class ProcedureEval extends ProcedureBase\n{\n    @Override\n    public QueryIterator exec(Binding binding, Node name, ExprList args, ExecutionContext execCxt)\n    {\n        // Eval if possible.\n        ExprList evalArgs = new ExprList() ;"
            },
            {
              "step": 18,
              "variableName": "binding",
              "startLine": 54,
              "startColumn": 25,
              "endLine": 54,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "",
              "code": "                evalArgs.add(x) ;\n            }\n        }\n        return execEval(binding, evalArgs, execCxt) ;\n    }\n    \n    public abstract QueryIterator execEval(Binding binding, ExprList args, ExecutionContext execCxt) ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 137,
              "startColumn": 14,
              "endLine": 137,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            slot = null ;\n            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }"
            },
            {
              "step": 8,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 10,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 11,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 12,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 13,
              "variableName": "procIter.nextBinding()",
              "startLine": 80,
              "startColumn": 16,
              "endLine": 80,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterProcedure.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding()\n    {\n        init( ) ;\n        return procIter.nextBinding() ;\n    }\n    \n    @Override"
            },
            {
              "step": 14,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 15,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 16,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 17,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 18,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 19,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 20,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            },
            {
              "step": 21,
              "variableName": "Binding binding",
              "startLine": 33,
              "startColumn": 31,
              "endLine": 33,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "Binding",
              "code": "public abstract class ProcedureEval extends ProcedureBase\n{\n    @Override\n    public QueryIterator exec(Binding binding, Node name, ExprList args, ExecutionContext execCxt)\n    {\n        // Eval if possible.\n        ExprList evalArgs = new ExprList() ;"
            },
            {
              "step": 22,
              "variableName": "binding",
              "startLine": 54,
              "startColumn": 25,
              "endLine": 54,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "",
              "code": "                evalArgs.add(x) ;\n            }\n        }\n        return execEval(binding, evalArgs, execCxt) ;\n    }\n    \n    public abstract QueryIterator execEval(Binding binding, ExprList args, ExecutionContext execCxt) ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "currentStage.nextBinding()",
              "startLine": 84,
              "startColumn": 16,
              "endLine": 84,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding() {\n        if ( !hasNextBinding() )\n            throw new NoSuchElementException(Lib.className(this) + \".next()/finished\");\n        return currentStage.nextBinding();\n\n    }\n"
            },
            {
              "step": 13,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 14,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 15,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 16,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            },
            {
              "step": 20,
              "variableName": "Binding binding",
              "startLine": 33,
              "startColumn": 31,
              "endLine": 33,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "Binding",
              "code": "public abstract class ProcedureEval extends ProcedureBase\n{\n    @Override\n    public QueryIterator exec(Binding binding, Node name, ExprList args, ExecutionContext execCxt)\n    {\n        // Eval if possible.\n        ExprList evalArgs = new ExprList() ;"
            },
            {
              "step": 21,
              "variableName": "binding",
              "startLine": 54,
              "startColumn": 25,
              "endLine": 54,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "",
              "code": "                evalArgs.add(x) ;\n            }\n        }\n        return execEval(binding, evalArgs, execCxt) ;\n    }\n    \n    public abstract QueryIterator execEval(Binding binding, ExprList args, ExecutionContext execCxt) ;"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "db",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "DistinctDataBag",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 1,
              "variableName": "db.iterator()",
              "startLine": 83,
              "startColumn": 20,
              "endLine": 83,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 2,
              "variableName": "iterator",
              "startLine": 83,
              "startColumn": 9,
              "endLine": 83,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "        // Hit the threshold.\n        loadDataBag() ;\n        // Switch to iterating from the data bag.  \n        iterator = db.iterator() ;\n        // Leave slot null.\n        return iterator.hasNext() ;\n    }"
            },
            {
              "step": 3,
              "variableName": "hasNextBinding()",
              "startLine": 160,
              "startColumn": 19,
              "endLine": 160,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( finished )\n                throw new NoSuchElementException(Lib.className(this));\n\n            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();"
            },
            {
              "step": 4,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 5,
              "variableName": "moveToNextBinding",
              "startLine": 131,
              "startColumn": 23,
              "endLine": 131,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "    }\n\n    @Override\n    protected Binding moveToNextBinding() {\n        if ( slot != null ) {\n            Binding b = slot ;\n            slot = null ;"
            },
            {
              "step": 6,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "QueryIterDistinct [iterator, <element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 7,
              "variableName": "iterator",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Iterator [<element>] : Object",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 8,
              "variableName": "iterator.next()",
              "startLine": 138,
              "startColumn": 25,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "            return b ;\n        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;"
            },
            {
              "step": 9,
              "variableName": "b",
              "startLine": 139,
              "startColumn": 20,
              "endLine": 139,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterDistinct.java",
              "type": "Binding",
              "code": "        }\n        if ( iterator != null ) {\n            Binding b = iterator.next() ;\n            return b ;\n        }\n        throw new InternalErrorException() ;\n    }"
            },
            {
              "step": 10,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 11,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 12,
              "variableName": "getInput().nextBinding()",
              "startLine": 89,
              "startColumn": 16,
              "endLine": 89,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterSlice.java",
              "type": "Binding",
              "code": "    protected Binding moveToNextBinding()\n    {\n        count ++ ;\n        return getInput().nextBinding() ;\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "moveToNextBinding()",
              "startLine": 163,
              "startColumn": 27,
              "endLine": 163,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "            if ( !hasNextBinding() )\n                throw new NoSuchElementException(Lib.className(this));\n\n            Binding obj = moveToNextBinding();\n            if ( obj == null )\n                throw new NoSuchElementException(Lib.className(this));\n"
            },
            {
              "step": 14,
              "variableName": "obj",
              "startLine": 173,
              "startColumn": 20,
              "endLine": 173,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "                close();\n            }\n\n            return obj;\n        } catch (QueryFatalException ex) {\n            Log.error(this, \"QueryFatalException\", ex);\n            throw ex;"
            },
            {
              "step": 15,
              "variableName": "nextBinding()",
              "startLine": 140,
              "startColumn": 16,
              "endLine": 140,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIteratorBase.java",
              "type": "Binding",
              "code": "     */\n    @Override\n    public final Binding next() {\n        return nextBinding();\n    }\n\n    /** final - subclasses implement moveToNextBinding() */"
            },
            {
              "step": 16,
              "variableName": "getInput().next()",
              "startLine": 99,
              "startColumn": 27,
              "endLine": 99,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "            return null;\n        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }"
            },
            {
              "step": 17,
              "variableName": "binding",
              "startLine": 100,
              "startColumn": 40,
              "endLine": 100,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/engine/iterator/QueryIterRepeatApply.java",
              "type": "Binding",
              "code": "        }\n\n        Binding binding = getInput().next();\n        QueryIterator iter = nextStage(binding);\n        return iter;\n    }\n"
            },
            {
              "step": 18,
              "variableName": "Binding binding",
              "startLine": 75,
              "startColumn": 43,
              "endLine": 75,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "       }\n\n        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) "
            },
            {
              "step": 19,
              "variableName": "binding",
              "startLine": 77,
              "startColumn": 39,
              "endLine": 77,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureBase.java",
              "type": "Binding",
              "code": "        @Override\n        protected QueryIterator nextStage(Binding binding)\n        {\n            QueryIterator iter = exec(binding, name, args, super.getExecContext()) ;\n            if ( iter == null ) \n                iter = IterLib.noResults(execCxt) ;\n            return iter ;"
            },
            {
              "step": 20,
              "variableName": "Binding binding",
              "startLine": 33,
              "startColumn": 31,
              "endLine": 33,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "Binding",
              "code": "public abstract class ProcedureEval extends ProcedureBase\n{\n    @Override\n    public QueryIterator exec(Binding binding, Node name, ExprList args, ExecutionContext execCxt)\n    {\n        // Eval if possible.\n        ExprList evalArgs = new ExprList() ;"
            },
            {
              "step": 21,
              "variableName": "binding",
              "startLine": 54,
              "startColumn": 25,
              "endLine": 54,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/procedure/ProcedureEval.java",
              "type": "",
              "code": "                evalArgs.add(x) ;\n            }\n        }\n        return execEval(binding, evalArgs, execCxt) ;\n    }\n    \n    public abstract QueryIterator execEval(Binding binding, ExprList args, ExecutionContext execCxt) ;"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 45,
      "fileName": "QueryExecUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecApp.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return queryHere;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 560,
              "startColumn": 42,
              "endLine": 560,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecDataset.java",
              "type": "Query",
              "code": "    public DatasetGraph getDataset() { return dataset; }\n\n    @Override\n    public Query getQuery()     { return query; }\n\n    @Override\n    public String getQueryString() {"
            },
            {
              "step": 1,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 85,
              "startColumn": 14,
              "endLine": 85,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();"
            },
            {
              "step": 1,
              "variableName": "queryHere",
              "startLine": 86,
              "startColumn": 20,
              "endLine": 86,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();\n        return qExecHere.getQuery();"
            },
            {
              "step": 2,
              "variableName": "get().getQuery()",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecAdapter.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return get().getQuery();\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 86,
              "startColumn": 20,
              "endLine": 86,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();\n        return qExecHere.getQuery();"
            },
            {
              "step": 1,
              "variableName": "get().getQuery()",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecAdapter.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return get().getQuery();\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 46,
      "fileName": "QueryExecUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 1,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 36,
              "endLine": 71,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 47,
      "fileName": "QueryExecUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecApp.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return queryHere;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 2,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 560,
              "startColumn": 42,
              "endLine": 560,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecDataset.java",
              "type": "Query",
              "code": "    public DatasetGraph getDataset() { return dataset; }\n\n    @Override\n    public Query getQuery()     { return query; }\n\n    @Override\n    public String getQueryString() {"
            },
            {
              "step": 1,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 2,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 85,
              "startColumn": 14,
              "endLine": 85,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();"
            },
            {
              "step": 1,
              "variableName": "queryHere",
              "startLine": 86,
              "startColumn": 20,
              "endLine": 86,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();\n        return qExecHere.getQuery();"
            },
            {
              "step": 2,
              "variableName": "get().getQuery()",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecAdapter.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return get().getQuery();\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 4,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 86,
              "startColumn": 20,
              "endLine": 86,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();\n        return qExecHere.getQuery();"
            },
            {
              "step": 1,
              "variableName": "get().getQuery()",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecAdapter.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return get().getQuery();\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 3,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 4,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 48,
      "fileName": "QueryExecUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 36,
              "endLine": 71,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 1,
              "variableName": "QueryExec queryExec",
              "startLine": 74,
              "startColumn": 48,
              "endLine": 74,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "queryExec",
              "startLine": 75,
              "startColumn": 24,
              "endLine": 75,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 1,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 36,
              "endLine": 71,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 2,
              "variableName": "QueryExec queryExec",
              "startLine": 74,
              "startColumn": 48,
              "endLine": 74,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "queryExec",
              "startLine": 75,
              "startColumn": 24,
              "endLine": 75,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 49,
      "fileName": "QueryExecUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 85,
              "startColumn": 16,
              "endLine": 85,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecApp.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return queryHere;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 2,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            },
            {
              "step": 4,
              "variableName": "Prologue prologue",
              "startLine": 78,
              "startColumn": 29,
              "endLine": 78,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "prologue",
              "startLine": 79,
              "startColumn": 14,
              "endLine": 79,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat, PrintStream output) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 560,
              "startColumn": 42,
              "endLine": 560,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecDataset.java",
              "type": "Query",
              "code": "    public DatasetGraph getDataset() { return dataset; }\n\n    @Override\n    public Query getQuery()     { return query; }\n\n    @Override\n    public String getQueryString() {"
            },
            {
              "step": 1,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 2,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            },
            {
              "step": 4,
              "variableName": "Prologue prologue",
              "startLine": 78,
              "startColumn": 29,
              "endLine": 78,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "prologue",
              "startLine": 79,
              "startColumn": 14,
              "endLine": 79,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat, PrintStream output) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 85,
              "startColumn": 14,
              "endLine": 85,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();"
            },
            {
              "step": 1,
              "variableName": "queryHere",
              "startLine": 86,
              "startColumn": 20,
              "endLine": 86,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();\n        return qExecHere.getQuery();"
            },
            {
              "step": 2,
              "variableName": "get().getQuery()",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecAdapter.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return get().getQuery();\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 4,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 5,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            },
            {
              "step": 6,
              "variableName": "Prologue prologue",
              "startLine": 78,
              "startColumn": 29,
              "endLine": 78,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n"
            },
            {
              "step": 7,
              "variableName": "prologue",
              "startLine": 79,
              "startColumn": 14,
              "endLine": 79,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat, PrintStream output) {"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "queryHere",
              "startLine": 86,
              "startColumn": 20,
              "endLine": 86,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecutionCompat.java",
              "type": "Query",
              "code": "    @Override\n    public Query getQuery() {\n        if ( queryHere != null )\n            return queryHere;\n        // Have to build (and hope! It may be a queryString with non-jena extensions).\n        execution();\n        return qExecHere.getQuery();"
            },
            {
              "step": 1,
              "variableName": "get().getQuery()",
              "startLine": 66,
              "startColumn": 16,
              "endLine": 66,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/exec/QueryExecAdapter.java",
              "type": "Query",
              "code": "\n    @Override\n    public Query getQuery() {\n        return get().getQuery();\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "queryExec.getQuery()",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 3,
              "variableName": "Prologue prologue",
              "startLine": 74,
              "startColumn": 29,
              "endLine": 74,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 4,
              "variableName": "prologue",
              "startLine": 75,
              "startColumn": 14,
              "endLine": 75,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            },
            {
              "step": 5,
              "variableName": "Prologue prologue",
              "startLine": 78,
              "startColumn": 29,
              "endLine": 78,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "Query",
              "code": "        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n"
            },
            {
              "step": 6,
              "variableName": "prologue",
              "startLine": 79,
              "startColumn": 14,
              "endLine": 79,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat, PrintStream output) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 50,
      "fileName": "QueryExecUtils.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 36,
              "endLine": 71,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 1,
              "variableName": "QueryExec queryExec",
              "startLine": 74,
              "startColumn": 48,
              "endLine": 74,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "queryExec",
              "startLine": 75,
              "startColumn": 24,
              "endLine": 75,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            },
            {
              "step": 3,
              "variableName": "QueryExec queryExec",
              "startLine": 78,
              "startColumn": 48,
              "endLine": 78,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "queryExec",
              "startLine": 79,
              "startColumn": 24,
              "endLine": 79,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat, PrintStream output) {"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 14,
              "endLine": 71,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 1,
              "variableName": "queryExec",
              "startLine": 71,
              "startColumn": 36,
              "endLine": 71,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(QueryExec queryExec) {\n        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {"
            },
            {
              "step": 2,
              "variableName": "QueryExec queryExec",
              "startLine": 74,
              "startColumn": 48,
              "endLine": 74,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "        exec(queryExec.getQuery(), queryExec) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "queryExec",
              "startLine": 75,
              "startColumn": 24,
              "endLine": 75,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            },
            {
              "step": 4,
              "variableName": "QueryExec queryExec",
              "startLine": 78,
              "startColumn": 48,
              "endLine": 78,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n"
            },
            {
              "step": 5,
              "variableName": "queryExec",
              "startLine": 79,
              "startColumn": 24,
              "endLine": 79,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat, PrintStream output) {"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "queryExec",
              "startLine": 75,
              "startColumn": 24,
              "endLine": 75,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec) {\n        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {"
            },
            {
              "step": 1,
              "variableName": "QueryExec queryExec",
              "startLine": 78,
              "startColumn": 48,
              "endLine": 78,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "QueryExec",
              "code": "        exec(prologue, queryExec, ResultsFormat.FMT_TEXT) ;\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "queryExec",
              "startLine": 79,
              "startColumn": 24,
              "endLine": 79,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/QueryExecUtils.java",
              "type": "",
              "code": "    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat) {\n        exec(prologue, queryExec, outputFormat, System.out);\n    }\n\n    public static void exec(Prologue prologue, QueryExec queryExec, ResultsFormat outputFormat, PrintStream output) {"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 51,
      "fileName": "Txn.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "ds",
              "startLine": 71,
              "startColumn": 29,
              "endLine": 71,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/tdb/cmdline/ModTDBDataset.java",
              "type": "DatasetImpl",
              "code": "    public Dataset createDataset() {\n        if ( inMemFile != null ) {\n            Dataset ds = TDB1Factory.createDataset();\n            RDFDataMgr.read(ds, inMemFile);\n            return ds;\n\n        }"
            },
            {
              "step": 1,
              "variableName": "ds",
              "startLine": 72,
              "startColumn": 20,
              "endLine": 72,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/tdb/cmdline/ModTDBDataset.java",
              "type": "DatasetImpl",
              "code": "        if ( inMemFile != null ) {\n            Dataset ds = TDB1Factory.createDataset();\n            RDFDataMgr.read(ds, inMemFile);\n            return ds;\n\n        }\n"
            },
            {
              "step": 2,
              "variableName": "createDataset()",
              "startLine": 35,
              "startColumn": 23,
              "endLine": 35,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "    final\n    public Dataset getDataset() { \n        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }"
            },
            {
              "step": 3,
              "variableName": "dataset",
              "startLine": 37,
              "startColumn": 16,
              "endLine": 37,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }\n    \n    public DatasetGraph getDatasetGraph() {"
            },
            {
              "step": 4,
              "variableName": "modDataset.getDataset()",
              "startLine": 181,
              "startColumn": 26,
              "endLine": 181,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "     */\n    protected Dataset getDataset(Query query)  {\n        try {\n            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;"
            },
            {
              "step": 5,
              "variableName": "ds",
              "startLine": 184,
              "startColumn": 20,
              "endLine": 184,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;\n        }\n        catch (RiotNotFoundException ex) {\n            System.err.println(\"Failed to load data: \" + ex.getMessage());"
            },
            {
              "step": 6,
              "variableName": "getDataset(query)",
              "startLine": 227,
              "startColumn": 31,
              "endLine": 227,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "\n            if ( isQuiet() )\n                LogCtl.setError(SysRIOT.riotLoggerName) ;\n            Dataset dataset = getDataset(query) ;\n            // Check there is a dataset. See dealWithNoDataset(query).\n            // The default policy is to create an empty one - convenience for VALUES and BIND providing the data.\n            if ( dataset == null && !query.hasDatasetDescription() ) {"
            },
            {
              "step": 7,
              "variableName": "transactional",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "                throw new TerminationException(1);\n            }\n            Transactional transactional = (dataset != null && dataset.supportsTransactions()) ? dataset : new TransactionalNull() ;\n            Txn.executeRead(transactional, ()->{\n                modTime.startTimer() ;\n                try ( QueryExecution qe = QueryExecutionFactory.create(query, dataset) ) {\n                    try { QueryExecUtils.executeQuery(query, qe, fmt, resultsDest); }"
            },
            {
              "step": 8,
              "variableName": "T txn",
              "startLine": 114,
              "startColumn": 62,
              "endLine": 114,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetImpl",
              "code": "    }\n\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "txn",
              "startLine": 115,
              "startColumn": 14,
              "endLine": 115,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n\n    /** Execute and return a value in a read transaction */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "ds",
              "startLine": 72,
              "startColumn": 20,
              "endLine": 72,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/tdb/cmdline/ModTDBDataset.java",
              "type": "DatasetImpl",
              "code": "        if ( inMemFile != null ) {\n            Dataset ds = TDB1Factory.createDataset();\n            RDFDataMgr.read(ds, inMemFile);\n            return ds;\n\n        }\n"
            },
            {
              "step": 1,
              "variableName": "createDataset()",
              "startLine": 35,
              "startColumn": 23,
              "endLine": 35,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "    final\n    public Dataset getDataset() { \n        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }"
            },
            {
              "step": 2,
              "variableName": "dataset",
              "startLine": 37,
              "startColumn": 16,
              "endLine": 37,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }\n    \n    public DatasetGraph getDatasetGraph() {"
            },
            {
              "step": 3,
              "variableName": "modDataset.getDataset()",
              "startLine": 181,
              "startColumn": 26,
              "endLine": 181,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "     */\n    protected Dataset getDataset(Query query)  {\n        try {\n            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;"
            },
            {
              "step": 4,
              "variableName": "ds",
              "startLine": 184,
              "startColumn": 20,
              "endLine": 184,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;\n        }\n        catch (RiotNotFoundException ex) {\n            System.err.println(\"Failed to load data: \" + ex.getMessage());"
            },
            {
              "step": 5,
              "variableName": "getDataset(query)",
              "startLine": 227,
              "startColumn": 31,
              "endLine": 227,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "\n            if ( isQuiet() )\n                LogCtl.setError(SysRIOT.riotLoggerName) ;\n            Dataset dataset = getDataset(query) ;\n            // Check there is a dataset. See dealWithNoDataset(query).\n            // The default policy is to create an empty one - convenience for VALUES and BIND providing the data.\n            if ( dataset == null && !query.hasDatasetDescription() ) {"
            },
            {
              "step": 6,
              "variableName": "transactional",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "                throw new TerminationException(1);\n            }\n            Transactional transactional = (dataset != null && dataset.supportsTransactions()) ? dataset : new TransactionalNull() ;\n            Txn.executeRead(transactional, ()->{\n                modTime.startTimer() ;\n                try ( QueryExecution qe = QueryExecutionFactory.create(query, dataset) ) {\n                    try { QueryExecUtils.executeQuery(query, qe, fmt, resultsDest); }"
            },
            {
              "step": 7,
              "variableName": "T txn",
              "startLine": 114,
              "startColumn": 62,
              "endLine": 114,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetImpl",
              "code": "    }\n\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "txn",
              "startLine": 115,
              "startColumn": 14,
              "endLine": 115,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n\n    /** Execute and return a value in a read transaction */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "ds",
              "startLine": 101,
              "startColumn": 16,
              "endLine": 101,
              "endColumn": 18,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/tdb/cmdline/ModTDBDataset.java",
              "type": "DatasetImpl",
              "code": "\n        // No assembler - use location to find a database.\n        Dataset ds = TDB1Factory.createDataset(modAssembler.getLocation());\n        return ds;\n    }\n\n    /** Build a dataset - several possible names (legacy) */"
            },
            {
              "step": 1,
              "variableName": "createDataset()",
              "startLine": 35,
              "startColumn": 23,
              "endLine": 35,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "    final\n    public Dataset getDataset() { \n        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }"
            },
            {
              "step": 2,
              "variableName": "dataset",
              "startLine": 37,
              "startColumn": 16,
              "endLine": 37,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }\n    \n    public DatasetGraph getDatasetGraph() {"
            },
            {
              "step": 3,
              "variableName": "modDataset.getDataset()",
              "startLine": 181,
              "startColumn": 26,
              "endLine": 181,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "     */\n    protected Dataset getDataset(Query query)  {\n        try {\n            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;"
            },
            {
              "step": 4,
              "variableName": "ds",
              "startLine": 184,
              "startColumn": 20,
              "endLine": 184,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;\n        }\n        catch (RiotNotFoundException ex) {\n            System.err.println(\"Failed to load data: \" + ex.getMessage());"
            },
            {
              "step": 5,
              "variableName": "getDataset(query)",
              "startLine": 227,
              "startColumn": 31,
              "endLine": 227,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "\n            if ( isQuiet() )\n                LogCtl.setError(SysRIOT.riotLoggerName) ;\n            Dataset dataset = getDataset(query) ;\n            // Check there is a dataset. See dealWithNoDataset(query).\n            // The default policy is to create an empty one - convenience for VALUES and BIND providing the data.\n            if ( dataset == null && !query.hasDatasetDescription() ) {"
            },
            {
              "step": 6,
              "variableName": "transactional",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "                throw new TerminationException(1);\n            }\n            Transactional transactional = (dataset != null && dataset.supportsTransactions()) ? dataset : new TransactionalNull() ;\n            Txn.executeRead(transactional, ()->{\n                modTime.startTimer() ;\n                try ( QueryExecution qe = QueryExecutionFactory.create(query, dataset) ) {\n                    try { QueryExecUtils.executeQuery(query, qe, fmt, resultsDest); }"
            },
            {
              "step": 7,
              "variableName": "T txn",
              "startLine": 114,
              "startColumn": 62,
              "endLine": 114,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetImpl",
              "code": "    }\n\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "txn",
              "startLine": 115,
              "startColumn": 14,
              "endLine": 115,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n\n    /** Execute and return a value in a read transaction */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "ds",
              "startLine": 73,
              "startColumn": 29,
              "endLine": 73,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/tdb2/cmdline/ModTDBDataset.java",
              "type": "DatasetImpl",
              "code": "    public Dataset createDataset() {\n        if ( inMemFile != null ) {\n            Dataset ds = TDB2Factory.createDataset();\n            RDFDataMgr.read(ds, inMemFile);\n            return ds;\n        }\n"
            },
            {
              "step": 1,
              "variableName": "ds",
              "startLine": 74,
              "startColumn": 20,
              "endLine": 74,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/tdb2/cmdline/ModTDBDataset.java",
              "type": "DatasetImpl",
              "code": "        if ( inMemFile != null ) {\n            Dataset ds = TDB2Factory.createDataset();\n            RDFDataMgr.read(ds, inMemFile);\n            return ds;\n        }\n\n        if ( modAssembler.getAssemblerFile() != null ) {"
            },
            {
              "step": 2,
              "variableName": "createDataset()",
              "startLine": 35,
              "startColumn": 23,
              "endLine": 35,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "    final\n    public Dataset getDataset() { \n        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }"
            },
            {
              "step": 3,
              "variableName": "dataset",
              "startLine": 37,
              "startColumn": 16,
              "endLine": 37,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/cmdline/ModDataset.java",
              "type": "DatasetImpl",
              "code": "        if ( ! createAttempted )\n            dataset = createDataset() ;\n        createAttempted = true ;\n        return dataset ;\n    }\n    \n    public DatasetGraph getDatasetGraph() {"
            },
            {
              "step": 4,
              "variableName": "modDataset.getDataset()",
              "startLine": 181,
              "startColumn": 26,
              "endLine": 181,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "     */\n    protected Dataset getDataset(Query query)  {\n        try {\n            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;"
            },
            {
              "step": 5,
              "variableName": "ds",
              "startLine": 184,
              "startColumn": 20,
              "endLine": 184,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "            Dataset ds = modDataset.getDataset();\n            if ( ds == null )\n                ds = dealWithNoDataset(query);\n            return ds;\n        }\n        catch (RiotNotFoundException ex) {\n            System.err.println(\"Failed to load data: \" + ex.getMessage());"
            },
            {
              "step": 6,
              "variableName": "getDataset(query)",
              "startLine": 227,
              "startColumn": 31,
              "endLine": 227,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "\n            if ( isQuiet() )\n                LogCtl.setError(SysRIOT.riotLoggerName) ;\n            Dataset dataset = getDataset(query) ;\n            // Check there is a dataset. See dealWithNoDataset(query).\n            // The default policy is to create an empty one - convenience for VALUES and BIND providing the data.\n            if ( dataset == null && !query.hasDatasetDescription() ) {"
            },
            {
              "step": 7,
              "variableName": "transactional",
              "startLine": 235,
              "startColumn": 29,
              "endLine": 235,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/arq/query.java",
              "type": "DatasetImpl",
              "code": "                throw new TerminationException(1);\n            }\n            Transactional transactional = (dataset != null && dataset.supportsTransactions()) ? dataset : new TransactionalNull() ;\n            Txn.executeRead(transactional, ()->{\n                modTime.startTimer() ;\n                try ( QueryExecution qe = QueryExecutionFactory.create(query, dataset) ) {\n                    try { QueryExecUtils.executeQuery(query, qe, fmt, resultsDest); }"
            },
            {
              "step": 8,
              "variableName": "T txn",
              "startLine": 114,
              "startColumn": 62,
              "endLine": 114,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetImpl",
              "code": "    }\n\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 9,
              "variableName": "txn",
              "startLine": 115,
              "startColumn": 14,
              "endLine": 115,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute in a read transaction */\n    public static <T extends Transactional> void executeRead(T txn, Runnable r) {\n        exec(txn, TxnType.READ, r);\n    }\n\n    /** Execute and return a value in a read transaction */"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 52,
      "fileName": "Txn.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "dest",
              "startLine": 166,
              "startColumn": 13,
              "endLine": 166,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/system/FusekiNetLib.java",
              "type": "DatasetGraph",
              "code": "        Iterator<Quad> iter = src.find(Node.ANY, Node.ANY, Node.ANY, Node.ANY);\n        for (; iter.hasNext();) {\n            Quad q = iter.next();\n            dest.add(q);\n        }\n\n        PrefixMapping pmapSrc = src.getDefaultGraph().getPrefixMapping();"
            },
            {
              "step": 1,
              "variableName": "add",
              "startLine": 33,
              "startColumn": 23,
              "endLine": 33,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "public abstract class DatasetGraphTriplesQuads extends DatasetGraphBaseFind\n{\n    @Override\n    final public void add(Quad quad) {\n        add(quad.getGraph(), quad.getSubject(), quad.getPredicate(), quad.getObject()) ;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "add(quad.getGraph(), quad.getSubject(), quad.getPredicate(), quad.getObject())",
              "startLine": 34,
              "startColumn": 9,
              "endLine": 34,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "{\n    @Override\n    final public void add(Quad quad) {\n        add(quad.getGraph(), quad.getSubject(), quad.getPredicate(), quad.getObject()) ;\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "add",
              "startLine": 43,
              "startColumn": 23,
              "endLine": 43,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "    }\n\n    @Override\n    final public void add(Node g, Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(g))\n            throw new AddDeniedException(\"Can't add to the union graph\");\n        if ( g == null || Quad.isDefaultGraph(g) )"
            },
            {
              "step": 4,
              "variableName": "addToDftGraph(s, p, o)",
              "startLine": 47,
              "startColumn": 13,
              "endLine": 47,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "        if ( Quad.isUnionGraph(g))\n            throw new AddDeniedException(\"Can't add to the union graph\");\n        if ( g == null || Quad.isDefaultGraph(g) )\n            addToDftGraph(s, p, o) ;\n        else\n            addToNamedGraph(g, s, p, o) ;\n    }"
            },
            {
              "step": 5,
              "variableName": "addToDftGraph",
              "startLine": 412,
              "startColumn": 20,
              "endLine": 412,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "    }\n\n    @Override\n    protected void addToDftGraph(final Node s, final Node p, final Node o) {\n        mutate(defaultGraph()::add, Triple.create(s, p, o));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "mutate(defaultGraph()::add, Triple.create(s, p, o))",
              "startLine": 413,
              "startColumn": 9,
              "endLine": 413,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "\n    @Override\n    protected void addToDftGraph(final Node s, final Node p, final Node o) {\n        mutate(defaultGraph()::add, Triple.create(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "mutate",
              "startLine": 370,
              "startColumn": 22,
              "endLine": 370,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "     * @param mutator\n     * @param payload\n     */\n    private <T> void mutate(final Consumer<T> mutator, final T payload) {\n        if (isInTransaction()) {\n            if (!transactionMode().equals(WRITE)) {\n                TxnType mode = transactionType.get();"
            },
            {
              "step": 8,
              "variableName": "this",
              "startLine": 387,
              "startColumn": 33,
              "endLine": 387,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "                }\n            }\n            mutator.accept(payload);\n        } else Txn.executeWrite(this, () -> mutator.accept(payload));\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "T txn",
              "startLine": 124,
              "startColumn": 63,
              "endLine": 124,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetGraphInMemory",
              "code": "    }\n\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "txn",
              "startLine": 125,
              "startColumn": 14,
              "endLine": 125,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n\n    /** Execute and return a value in a write transaction. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "dsg",
              "startLine": 58,
              "startColumn": 26,
              "endLine": 58,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/test/java/org/apache/jena/fuseki/main/access/AccessTestLib.java",
              "type": "DatasetGraph",
              "code": "    public static Node g4 = SSE.parseNode(\"<http://test/g4>\");\n\n    public static void addTestData(DatasetGraph dsg) {\n        Txn.executeWrite(dsg, ()->{\n            RDFParser.create().fromString(dataStr).lang(Lang.TRIG).parse(dsg);\n        });\n    }"
            },
            {
              "step": 1,
              "variableName": "T txn",
              "startLine": 124,
              "startColumn": 63,
              "endLine": 124,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetGraph",
              "code": "    }\n\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "txn",
              "startLine": 125,
              "startColumn": 14,
              "endLine": 125,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n\n    /** Execute and return a value in a write transaction. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "dsgDst",
              "startLine": 36,
              "startColumn": 30,
              "endLine": 36,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/sys/CopyDSG.java",
              "type": "DatasetGraph",
              "code": "\n    public static void copy(DatasetGraph dsgSrc, DatasetGraph dsgDst) {\n        Txn.executeRead(dsgSrc, ()->{\n            Txn.executeWrite(dsgDst, () -> {\n                Iterator<Quad> iter = dsgSrc.find();\n                iter.forEachRemaining(dsgDst::add);\n                copyPrefixes(dsgSrc, dsgDst);"
            },
            {
              "step": 1,
              "variableName": "T txn",
              "startLine": 124,
              "startColumn": 63,
              "endLine": 124,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetGraph",
              "code": "    }\n\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n"
            },
            {
              "step": 2,
              "variableName": "txn",
              "startLine": 125,
              "startColumn": 14,
              "endLine": 125,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n\n    /** Execute and return a value in a write transaction. */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "dsgDst",
              "startLine": 38,
              "startColumn": 39,
              "endLine": 38,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/sys/CopyDSG.java",
              "type": "DatasetGraph",
              "code": "        Txn.executeRead(dsgSrc, ()->{\n            Txn.executeWrite(dsgDst, () -> {\n                Iterator<Quad> iter = dsgSrc.find();\n                iter.forEachRemaining(dsgDst::add);\n                copyPrefixes(dsgSrc, dsgDst);\n            });\n        });"
            },
            {
              "step": 1,
              "variableName": "add",
              "startLine": 33,
              "startColumn": 23,
              "endLine": 33,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "public abstract class DatasetGraphTriplesQuads extends DatasetGraphBaseFind\n{\n    @Override\n    final public void add(Quad quad) {\n        add(quad.getGraph(), quad.getSubject(), quad.getPredicate(), quad.getObject()) ;\n    }\n"
            },
            {
              "step": 2,
              "variableName": "add(quad.getGraph(), quad.getSubject(), quad.getPredicate(), quad.getObject())",
              "startLine": 34,
              "startColumn": 9,
              "endLine": 34,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "{\n    @Override\n    final public void add(Quad quad) {\n        add(quad.getGraph(), quad.getSubject(), quad.getPredicate(), quad.getObject()) ;\n    }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "add",
              "startLine": 43,
              "startColumn": 23,
              "endLine": 43,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "    }\n\n    @Override\n    final public void add(Node g, Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(g))\n            throw new AddDeniedException(\"Can't add to the union graph\");\n        if ( g == null || Quad.isDefaultGraph(g) )"
            },
            {
              "step": 4,
              "variableName": "addToDftGraph(s, p, o)",
              "startLine": 47,
              "startColumn": 13,
              "endLine": 47,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphTriplesQuads.java",
              "type": "DatasetGraphTriplesQuads",
              "code": "        if ( Quad.isUnionGraph(g))\n            throw new AddDeniedException(\"Can't add to the union graph\");\n        if ( g == null || Quad.isDefaultGraph(g) )\n            addToDftGraph(s, p, o) ;\n        else\n            addToNamedGraph(g, s, p, o) ;\n    }"
            },
            {
              "step": 5,
              "variableName": "addToDftGraph",
              "startLine": 412,
              "startColumn": 20,
              "endLine": 412,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "    }\n\n    @Override\n    protected void addToDftGraph(final Node s, final Node p, final Node o) {\n        mutate(defaultGraph()::add, Triple.create(s, p, o));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "mutate(defaultGraph()::add, Triple.create(s, p, o))",
              "startLine": 413,
              "startColumn": 9,
              "endLine": 413,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "\n    @Override\n    protected void addToDftGraph(final Node s, final Node p, final Node o) {\n        mutate(defaultGraph()::add, Triple.create(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "mutate",
              "startLine": 370,
              "startColumn": 22,
              "endLine": 370,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "     * @param mutator\n     * @param payload\n     */\n    private <T> void mutate(final Consumer<T> mutator, final T payload) {\n        if (isInTransaction()) {\n            if (!transactionMode().equals(WRITE)) {\n                TxnType mode = transactionType.get();"
            },
            {
              "step": 8,
              "variableName": "this",
              "startLine": 387,
              "startColumn": 33,
              "endLine": 387,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "DatasetGraphInMemory",
              "code": "                }\n            }\n            mutator.accept(payload);\n        } else Txn.executeWrite(this, () -> mutator.accept(payload));\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "T txn",
              "startLine": 124,
              "startColumn": 63,
              "endLine": 124,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "DatasetGraphInMemory",
              "code": "    }\n\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n"
            },
            {
              "step": 10,
              "variableName": "txn",
              "startLine": 125,
              "startColumn": 14,
              "endLine": 125,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "",
              "code": "\n    /** Execute the Runnable in a write transaction */\n    public static <T extends Transactional> void executeWrite(T txn, Runnable r) {\n        exec(txn, TxnType.WRITE, r);\n    }\n\n    /** Execute and return a value in a write transaction. */"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 53,
      "fileName": "ModelAssembler.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "securedItem",
              "startLine": 100,
              "startColumn": 16,
              "endLine": 100,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/ItemHolder.java",
              "type": "SecuredItem",
              "code": "\n        securedItem = (Secured) Proxy.newProxyInstance(SecuredItemImpl.class.getClassLoader(),\n                ifac.toArray(new Class<?>[ifac.size()]), handler);\n        return securedItem;\n    }\n\n}"
            },
            {
              "step": 1,
              "variableName": "holder.setSecuredItem(new SecuredItemInvoker(model.getClass(), checker))",
              "startLine": 257,
              "startColumn": 16,
              "endLine": 257,
              "endColumn": 88,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/model/impl/SecuredModelImpl.java",
              "type": "SecuredModel",
              "code": "                return (SecuredModel) model;\n            }\n        }\n        return holder.setSecuredItem(new SecuredItemInvoker(model.getClass(), checker));\n    }\n\n    // the item holder that contains this SecuredModel."
            },
            {
              "step": 2,
              "variableName": "org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model)",
              "startLine": 60,
              "startColumn": 16,
              "endLine": 60,
              "endColumn": 119,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/Factory.java",
              "type": "SecuredModel",
              "code": "     */\n    public static SecuredModel getInstance(final SecurityEvaluator securityEvaluator, final String modelIRI,\n            final Model model) {\n        return org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel)",
              "startLine": 195,
              "startColumn": 16,
              "endLine": 195,
              "endColumn": 100,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "SecuredModel",
              "code": "        if (evaluatorImpl != null) {\n            securityEvaluator = getEvaluatorImpl(a, evaluatorImpl);\n        }\n        return Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel);\n\n    }\n"
            },
            {
              "step": 4,
              "variableName": "open(a, root, mode)",
              "startLine": 201,
              "startColumn": 16,
              "endLine": 201,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "SecuredModel",
              "code": "\n    @Override\n    protected Model openEmptyModel(Assembler a, Resource root, Mode mode) {\n        return open(a, root, mode);\n    }\n\n    private SecurityEvaluator executeEvaluatorFactory(Resource root, Literal factoryName) {"
            },
            {
              "step": 5,
              "variableName": "openEmptyModel( a, root, mode )",
              "startLine": 38,
              "startColumn": 19,
              "endLine": 38,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "SecuredModel",
              "code": "    \n    protected Model openModel( Assembler a, Resource root, Content initial, Mode mode )\n        {\n        Model m = openEmptyModel( a, root, mode );\n        if (!initial.isEmpty()) addContent( root, m, initial );\n        return m;\n        }"
            },
            {
              "step": 6,
              "variableName": "m",
              "startLine": 40,
              "startColumn": 16,
              "endLine": 40,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "SecuredModel",
              "code": "        {\n        Model m = openEmptyModel( a, root, mode );\n        if (!initial.isEmpty()) addContent( root, m, initial );\n        return m;\n        }\n    \n    /** Execute an action in a transaction if the model supports transactions.*/"
            },
            {
              "step": 7,
              "variableName": "openModel( a, root, getInitialContent( a, root ), mode )",
              "startLine": 60,
              "startColumn": 19,
              "endLine": 60,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "SecuredModel",
              "code": "    \n    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );"
            },
            {
              "step": 8,
              "variableName": "m",
              "startLine": 61,
              "startColumn": 14,
              "endLine": 61,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "",
              "code": "    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );\n            addPrefixes( m, a, root );"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "securedItem",
              "startLine": 100,
              "startColumn": 16,
              "endLine": 100,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/ItemHolder.java",
              "type": "SecuredItem",
              "code": "\n        securedItem = (Secured) Proxy.newProxyInstance(SecuredItemImpl.class.getClassLoader(),\n                ifac.toArray(new Class<?>[ifac.size()]), handler);\n        return securedItem;\n    }\n\n}"
            },
            {
              "step": 1,
              "variableName": "holder.setSecuredItem(new SecuredItemInvoker(model.getClass(), checker))",
              "startLine": 257,
              "startColumn": 16,
              "endLine": 257,
              "endColumn": 88,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/model/impl/SecuredModelImpl.java",
              "type": "SecuredModel",
              "code": "                return (SecuredModel) model;\n            }\n        }\n        return holder.setSecuredItem(new SecuredItemInvoker(model.getClass(), checker));\n    }\n\n    // the item holder that contains this SecuredModel."
            },
            {
              "step": 2,
              "variableName": "org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model)",
              "startLine": 60,
              "startColumn": 16,
              "endLine": 60,
              "endColumn": 119,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/Factory.java",
              "type": "SecuredModel",
              "code": "     */\n    public static SecuredModel getInstance(final SecurityEvaluator securityEvaluator, final String modelIRI,\n            final Model model) {\n        return org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel)",
              "startLine": 195,
              "startColumn": 16,
              "endLine": 195,
              "endColumn": 100,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "SecuredModel",
              "code": "        if (evaluatorImpl != null) {\n            securityEvaluator = getEvaluatorImpl(a, evaluatorImpl);\n        }\n        return Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel);\n\n    }\n"
            },
            {
              "step": 4,
              "variableName": "open( this, root, mode )",
              "startLine": 74,
              "startColumn": 26,
              "endLine": 74,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "SecuredModel",
              "code": "\n    @Override\n    public Model openModel( Resource root, Mode mode )\n        { return (Model) open( this, root, mode ); }\n\n    @Override\n    public Model openModel( Resource root )"
            },
            {
              "step": 5,
              "variableName": "(Model) open( this, root, mode )",
              "startLine": 74,
              "startColumn": 18,
              "endLine": 74,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "SecuredModel",
              "code": "\n    @Override\n    public Model openModel( Resource root, Mode mode )\n        { return (Model) open( this, root, mode ); }\n\n    @Override\n    public Model openModel( Resource root )"
            },
            {
              "step": 6,
              "variableName": "a.openModel(rootModel, Mode.ANY)",
              "startLine": 171,
              "startColumn": 27,
              "endLine": 171,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "SecuredModel",
              "code": "        if (rootModel == null) {\n            throw new AssemblerException(root, String.format(NO_X_PROVIDED, BASE_MODEL, root));\n        }\n        Model baseModel = a.openModel(rootModel, Mode.ANY);\n\n        Literal modelName = getUniqueLiteral(root, JA.modelName);\n        if (modelName == null) {"
            },
            {
              "step": 7,
              "variableName": "baseModel",
              "startLine": 195,
              "startColumn": 90,
              "endLine": 195,
              "endColumn": 99,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "SecuredModel",
              "code": "        if (evaluatorImpl != null) {\n            securityEvaluator = getEvaluatorImpl(a, evaluatorImpl);\n        }\n        return Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel);\n\n    }\n"
            },
            {
              "step": 8,
              "variableName": "final Model model",
              "startLine": 59,
              "startColumn": 13,
              "endLine": 59,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/Factory.java",
              "type": "SecuredModel",
              "code": "     * @return the model secured under the name modelIRI\n     */\n    public static SecuredModel getInstance(final SecurityEvaluator securityEvaluator, final String modelIRI,\n            final Model model) {\n        return org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model);\n    }\n}"
            },
            {
              "step": 9,
              "variableName": "model",
              "startLine": 60,
              "startColumn": 113,
              "endLine": 60,
              "endColumn": 118,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/Factory.java",
              "type": "SecuredModel",
              "code": "     */\n    public static SecuredModel getInstance(final SecurityEvaluator securityEvaluator, final String modelIRI,\n            final Model model) {\n        return org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model);\n    }\n}\n"
            },
            {
              "step": 10,
              "variableName": "final Model model",
              "startLine": 246,
              "startColumn": 13,
              "endLine": 246,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/model/impl/SecuredModelImpl.java",
              "type": "SecuredModel",
              "code": "     * @return the SecuredModel\n     */\n    public static SecuredModel getInstance(final SecurityEvaluator securityEvaluator, final String modelIRI,\n            final Model model) {\n        final ItemHolder<Model, SecuredModel> holder = new ItemHolder<>(model);\n\n        final SecuredModelImpl checker = new SecuredModelImpl(securityEvaluator, modelIRI, holder);"
            },
            {
              "step": 11,
              "variableName": "(SecuredModel) model",
              "startLine": 254,
              "startColumn": 24,
              "endLine": 254,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/model/impl/SecuredModelImpl.java",
              "type": "SecuredModel",
              "code": "        // one.\n        if (model instanceof SecuredModel) {\n            if (checker.isEquivalent((SecuredModel) model)) {\n                return (SecuredModel) model;\n            }\n        }\n        return holder.setSecuredItem(new SecuredItemInvoker(model.getClass(), checker));"
            },
            {
              "step": 12,
              "variableName": "org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model)",
              "startLine": 60,
              "startColumn": 16,
              "endLine": 60,
              "endColumn": 119,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/Factory.java",
              "type": "SecuredModel",
              "code": "     */\n    public static SecuredModel getInstance(final SecurityEvaluator securityEvaluator, final String modelIRI,\n            final Model model) {\n        return org.apache.jena.permissions.model.impl.SecuredModelImpl.getInstance(securityEvaluator, modelIRI, model);\n    }\n}\n"
            },
            {
              "step": 13,
              "variableName": "Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel)",
              "startLine": 195,
              "startColumn": 16,
              "endLine": 195,
              "endColumn": 100,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "SecuredModel",
              "code": "        if (evaluatorImpl != null) {\n            securityEvaluator = getEvaluatorImpl(a, evaluatorImpl);\n        }\n        return Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel);\n\n    }\n"
            },
            {
              "step": 14,
              "variableName": "open(a, root, mode)",
              "startLine": 201,
              "startColumn": 16,
              "endLine": 201,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "SecuredModel",
              "code": "\n    @Override\n    protected Model openEmptyModel(Assembler a, Resource root, Mode mode) {\n        return open(a, root, mode);\n    }\n\n    private SecurityEvaluator executeEvaluatorFactory(Resource root, Literal factoryName) {"
            },
            {
              "step": 15,
              "variableName": "openEmptyModel( a, root, mode )",
              "startLine": 38,
              "startColumn": 19,
              "endLine": 38,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "SecuredModel",
              "code": "    \n    protected Model openModel( Assembler a, Resource root, Content initial, Mode mode )\n        {\n        Model m = openEmptyModel( a, root, mode );\n        if (!initial.isEmpty()) addContent( root, m, initial );\n        return m;\n        }"
            },
            {
              "step": 16,
              "variableName": "m",
              "startLine": 40,
              "startColumn": 16,
              "endLine": 40,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "SecuredModel",
              "code": "        {\n        Model m = openEmptyModel( a, root, mode );\n        if (!initial.isEmpty()) addContent( root, m, initial );\n        return m;\n        }\n    \n    /** Execute an action in a transaction if the model supports transactions.*/"
            },
            {
              "step": 17,
              "variableName": "openModel( a, root, getInitialContent( a, root ), mode )",
              "startLine": 60,
              "startColumn": 19,
              "endLine": 60,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "SecuredModel",
              "code": "    \n    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );"
            },
            {
              "step": 18,
              "variableName": "m",
              "startLine": 61,
              "startColumn": 14,
              "endLine": 61,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "",
              "code": "    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );\n            addPrefixes( m, a, root );"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 54,
      "fileName": "ModelAssembler.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 60,
              "startColumn": 16,
              "endLine": 60,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/OntModelSpecAssembler.java",
              "type": "Resource",
              "code": "    private ModelGetter getModelSource( Assembler a, Resource root )\n        {\n        Resource source = getUniqueResource( root, JA.importSource );\n        return source == null ? null : (ModelGetter) a.open( source );\n        }\n\n    private String getLanguage( Assembler a, Resource root )"
            },
            {
              "step": 1,
              "variableName": "source",
              "startLine": 60,
              "startColumn": 62,
              "endLine": 60,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/OntModelSpecAssembler.java",
              "type": "Resource",
              "code": "    private ModelGetter getModelSource( Assembler a, Resource root )\n        {\n        Resource source = getUniqueResource( root, JA.importSource );\n        return source == null ? null : (ModelGetter) a.open( source );\n        }\n\n    private String getLanguage( Assembler a, Resource root )"
            },
            {
              "step": 2,
              "variableName": "Resource root",
              "startLine": 34,
              "startColumn": 31,
              "endLine": 34,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "    static { JenaSystem.init(); }\n\n    @Override\n    public final Object open( Resource root )\n        { return open( this, root ); }\n\n    @Override"
            },
            {
              "step": 3,
              "variableName": "root",
              "startLine": 35,
              "startColumn": 30,
              "endLine": 35,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "\n    @Override\n    public final Object open( Resource root )\n        { return open( this, root ); }\n\n    @Override\n    public final Object open( Assembler a, Resource root )"
            },
            {
              "step": 4,
              "variableName": "Resource root",
              "startLine": 38,
              "startColumn": 44,
              "endLine": 38,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "        { return open( this, root ); }\n\n    @Override\n    public final Object open( Assembler a, Resource root )\n        { return open( a, root, Mode.DEFAULT ); }\n\n    @Override"
            },
            {
              "step": 5,
              "variableName": "root",
              "startLine": 39,
              "startColumn": 27,
              "endLine": 39,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "\n    @Override\n    public final Object open( Assembler a, Resource root )\n        { return open( a, root, Mode.DEFAULT ); }\n\n    @Override\n    public abstract Object open( Assembler a, Resource root, Mode mode );"
            },
            {
              "step": 6,
              "variableName": "Resource root",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "Resource",
              "code": "        }\n    }\n    \n    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{"
            },
            {
              "step": 7,
              "variableName": "root",
              "startLine": 61,
              "startColumn": 17,
              "endLine": 61,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "",
              "code": "    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );\n            addPrefixes( m, a, root );"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "source",
              "startLine": 60,
              "startColumn": 62,
              "endLine": 60,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/OntModelSpecAssembler.java",
              "type": "Resource",
              "code": "    private ModelGetter getModelSource( Assembler a, Resource root )\n        {\n        Resource source = getUniqueResource( root, JA.importSource );\n        return source == null ? null : (ModelGetter) a.open( source );\n        }\n\n    private String getLanguage( Assembler a, Resource root )"
            },
            {
              "step": 1,
              "variableName": "Resource root",
              "startLine": 34,
              "startColumn": 31,
              "endLine": 34,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "    static { JenaSystem.init(); }\n\n    @Override\n    public final Object open( Resource root )\n        { return open( this, root ); }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "root",
              "startLine": 35,
              "startColumn": 30,
              "endLine": 35,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "\n    @Override\n    public final Object open( Resource root )\n        { return open( this, root ); }\n\n    @Override\n    public final Object open( Assembler a, Resource root )"
            },
            {
              "step": 3,
              "variableName": "Resource root",
              "startLine": 38,
              "startColumn": 44,
              "endLine": 38,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "        { return open( this, root ); }\n\n    @Override\n    public final Object open( Assembler a, Resource root )\n        { return open( a, root, Mode.DEFAULT ); }\n\n    @Override"
            },
            {
              "step": 4,
              "variableName": "root",
              "startLine": 39,
              "startColumn": 27,
              "endLine": 39,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/AssemblerBase.java",
              "type": "Resource",
              "code": "\n    @Override\n    public final Object open( Assembler a, Resource root )\n        { return open( a, root, Mode.DEFAULT ); }\n\n    @Override\n    public abstract Object open( Assembler a, Resource root, Mode mode );"
            },
            {
              "step": 5,
              "variableName": "Resource root",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "Resource",
              "code": "        }\n    }\n    \n    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{"
            },
            {
              "step": 6,
              "variableName": "root",
              "startLine": 61,
              "startColumn": 17,
              "endLine": 61,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "",
              "code": "    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );\n            addPrefixes( m, a, root );"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "evaluatorImpl",
              "startLine": 180,
              "startColumn": 36,
              "endLine": 180,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "\n        Literal factoryName = getUniqueLiteral(root, EVALUATOR_FACTORY);\n        Resource evaluatorImpl = getUniqueResource(root, EVALUATOR_IMPL);\n        if (factoryName == null && evaluatorImpl == null) {\n            throw new AssemblerException(root, String.format(\"Either a %s or a %s must be provided for %s\",\n                    EVALUATOR_FACTORY, EVALUATOR_IMPL, root));\n        }"
            },
            {
              "step": 1,
              "variableName": "evaluatorImpl",
              "startLine": 193,
              "startColumn": 53,
              "endLine": 193,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "            securityEvaluator = executeEvaluatorFactory(root, factoryName);\n        }\n        if (evaluatorImpl != null) {\n            securityEvaluator = getEvaluatorImpl(a, evaluatorImpl);\n        }\n        return Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel);\n"
            },
            {
              "step": 2,
              "variableName": "Resource evaluatorImpl",
              "startLine": 238,
              "startColumn": 61,
              "endLine": 238,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "        }\n    }\n\n    private SecurityEvaluator getEvaluatorImpl(Assembler a, Resource evaluatorImpl) {\n        Object obj = a.open(a, evaluatorImpl, Mode.ANY);\n        if (obj instanceof SecurityEvaluator) {\n            return (SecurityEvaluator) obj;"
            },
            {
              "step": 3,
              "variableName": "evaluatorImpl",
              "startLine": 239,
              "startColumn": 32,
              "endLine": 239,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "    }\n\n    private SecurityEvaluator getEvaluatorImpl(Assembler a, Resource evaluatorImpl) {\n        Object obj = a.open(a, evaluatorImpl, Mode.ANY);\n        if (obj instanceof SecurityEvaluator) {\n            return (SecurityEvaluator) obj;\n        }"
            },
            {
              "step": 4,
              "variableName": "Resource root",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "Resource",
              "code": "        }\n    }\n    \n    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{"
            },
            {
              "step": 5,
              "variableName": "root",
              "startLine": 61,
              "startColumn": 17,
              "endLine": 61,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "",
              "code": "    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );\n            addPrefixes( m, a, root );"
            }
          ]
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "evaluatorImpl",
              "startLine": 184,
              "startColumn": 36,
              "endLine": 184,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "            throw new AssemblerException(root, String.format(\"Either a %s or a %s must be provided for %s\",\n                    EVALUATOR_FACTORY, EVALUATOR_IMPL, root));\n        }\n        if (factoryName != null && evaluatorImpl != null) {\n            throw new AssemblerException(root, String.format(\"May not specify both a %s and a %s for %s\",\n                    EVALUATOR_FACTORY, EVALUATOR_IMPL, root));\n        }"
            },
            {
              "step": 1,
              "variableName": "evaluatorImpl",
              "startLine": 193,
              "startColumn": 53,
              "endLine": 193,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "            securityEvaluator = executeEvaluatorFactory(root, factoryName);\n        }\n        if (evaluatorImpl != null) {\n            securityEvaluator = getEvaluatorImpl(a, evaluatorImpl);\n        }\n        return Factory.getInstance(securityEvaluator, modelName.asLiteral().getString(), baseModel);\n"
            },
            {
              "step": 2,
              "variableName": "Resource evaluatorImpl",
              "startLine": 238,
              "startColumn": 61,
              "endLine": 238,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "        }\n    }\n\n    private SecurityEvaluator getEvaluatorImpl(Assembler a, Resource evaluatorImpl) {\n        Object obj = a.open(a, evaluatorImpl, Mode.ANY);\n        if (obj instanceof SecurityEvaluator) {\n            return (SecurityEvaluator) obj;"
            },
            {
              "step": 3,
              "variableName": "evaluatorImpl",
              "startLine": 239,
              "startColumn": 32,
              "endLine": 239,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/SecuredAssembler.java",
              "type": "Resource",
              "code": "    }\n\n    private SecurityEvaluator getEvaluatorImpl(Assembler a, Resource evaluatorImpl) {\n        Object obj = a.open(a, evaluatorImpl, Mode.ANY);\n        if (obj instanceof SecurityEvaluator) {\n            return (SecurityEvaluator) obj;\n        }"
            },
            {
              "step": 4,
              "variableName": "Resource root",
              "startLine": 58,
              "startColumn": 48,
              "endLine": 58,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "Resource",
              "code": "        }\n    }\n    \n    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{"
            },
            {
              "step": 5,
              "variableName": "root",
              "startLine": 61,
              "startColumn": 17,
              "endLine": 61,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/assembler/assemblers/ModelAssembler.java",
              "type": "",
              "code": "    @Override public Object open( Assembler a, Resource root, Mode mode )\n        { \n        Model m = openModel( a, root, getInitialContent( a, root ), mode );\n        exec(m, root, ()->{\n            // JENA-1663: Do these together inside a transaction.\n            addContent( root, m, getContent( a, root ) );\n            addPrefixes( m, a, root );"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 56,
      "fileName": "RDFLinkHTTP.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 42,
              "startColumn": 9,
              "endLine": 42,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/ParserARQ.java",
              "type": "Query",
              "code": "    @Override\n    protected Query parse$(final Query query, String queryString)\n    {\n        query.setSyntax(Syntax.syntaxARQ) ;\n\n        Action action = new Action() {\n            @Override"
            },
            {
              "step": 1,
              "variableName": "query",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/ParserARQ.java",
              "type": "Query",
              "code": "        } ;\n\n        perform(query, queryString, action) ;\n        return query ;\n    }\n\n    public static Element parseElement(String string)"
            },
            {
              "step": 2,
              "variableName": "parse$(query, queryString)",
              "startLine": 33,
              "startColumn": 29,
              "endLine": 33,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "public abstract class SPARQLParser\n{\n    public final Query parse(Query query, String queryString) throws QueryParseException {\n        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;"
            },
            {
              "step": 3,
              "variableName": "parsedQuery",
              "startLine": 36,
              "startColumn": 16,
              "endLine": 36,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;\n    }\n\n    protected abstract Query parse$(Query query, String queryString) throws QueryParseException ;"
            },
            {
              "step": 4,
              "variableName": "parser.parse(query, queryString)",
              "startLine": 142,
              "startColumn": 16,
              "endLine": 142,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "            query.setBase(queryBase);\n\n        }\n        return parser.parse(query, queryString);\n    }\n\n    static boolean knownParserSyntax(Syntax syntaxURI) {"
            },
            {
              "step": 5,
              "variableName": "parse(query, queryString, baseURI, syntax)",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "\n    static public Query create(String queryString, String baseURI, Syntax syntax) {\n        Query query = new Query();\n        return parse(query, queryString, baseURI, syntax);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "create(queryString, null, syntax)",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString, Syntax syntax) {\n        return create(queryString, null, syntax);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "create(queryString, Syntax.defaultQuerySyntax)",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString) {\n        return create(queryString, Syntax.defaultQuerySyntax);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "QueryFactory.create(queryString)",
              "startLine": 377,
              "startColumn": 22,
              "endLine": 377,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLink.java",
              "type": "Query",
              "code": "     */\n    @Override\n    public default QueryExec query(String queryString) {\n        return query(QueryFactory.create(queryString));\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Query query",
              "startLine": 247,
              "startColumn": 28,
              "endLine": 247,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "Query",
              "code": "    }\n\n    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }"
            },
            {
              "step": 10,
              "variableName": "query",
              "startLine": 249,
              "startColumn": 26,
              "endLine": 249,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "",
              "code": "    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 52,
              "startColumn": 17,
              "endLine": 52,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/ParserARQ.java",
              "type": "Query",
              "code": "            }\n        } ;\n\n        perform(query, queryString, action) ;\n        return query ;\n    }\n"
            },
            {
              "step": 1,
              "variableName": "query",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/ParserARQ.java",
              "type": "Query",
              "code": "        } ;\n\n        perform(query, queryString, action) ;\n        return query ;\n    }\n\n    public static Element parseElement(String string)"
            },
            {
              "step": 2,
              "variableName": "parse$(query, queryString)",
              "startLine": 33,
              "startColumn": 29,
              "endLine": 33,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "public abstract class SPARQLParser\n{\n    public final Query parse(Query query, String queryString) throws QueryParseException {\n        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;"
            },
            {
              "step": 3,
              "variableName": "parsedQuery",
              "startLine": 36,
              "startColumn": 16,
              "endLine": 36,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;\n    }\n\n    protected abstract Query parse$(Query query, String queryString) throws QueryParseException ;"
            },
            {
              "step": 4,
              "variableName": "parser.parse(query, queryString)",
              "startLine": 142,
              "startColumn": 16,
              "endLine": 142,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "            query.setBase(queryBase);\n\n        }\n        return parser.parse(query, queryString);\n    }\n\n    static boolean knownParserSyntax(Syntax syntaxURI) {"
            },
            {
              "step": 5,
              "variableName": "parse(query, queryString, baseURI, syntax)",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "\n    static public Query create(String queryString, String baseURI, Syntax syntax) {\n        Query query = new Query();\n        return parse(query, queryString, baseURI, syntax);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "create(queryString, null, syntax)",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString, Syntax syntax) {\n        return create(queryString, null, syntax);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "create(queryString, Syntax.defaultQuerySyntax)",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString) {\n        return create(queryString, Syntax.defaultQuerySyntax);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "QueryFactory.create(queryString)",
              "startLine": 377,
              "startColumn": 22,
              "endLine": 377,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLink.java",
              "type": "Query",
              "code": "     */\n    @Override\n    public default QueryExec query(String queryString) {\n        return query(QueryFactory.create(queryString));\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Query query",
              "startLine": 247,
              "startColumn": 28,
              "endLine": 247,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "Query",
              "code": "    }\n\n    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }"
            },
            {
              "step": 10,
              "variableName": "query",
              "startLine": 249,
              "startColumn": 26,
              "endLine": 249,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "",
              "code": "    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 53,
              "startColumn": 16,
              "endLine": 53,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/ParserARQ.java",
              "type": "Query",
              "code": "        } ;\n\n        perform(query, queryString, action) ;\n        return query ;\n    }\n\n    public static Element parseElement(String string)"
            },
            {
              "step": 1,
              "variableName": "parse$(query, queryString)",
              "startLine": 33,
              "startColumn": 29,
              "endLine": 33,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "public abstract class SPARQLParser\n{\n    public final Query parse(Query query, String queryString) throws QueryParseException {\n        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;"
            },
            {
              "step": 2,
              "variableName": "parsedQuery",
              "startLine": 36,
              "startColumn": 16,
              "endLine": 36,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;\n    }\n\n    protected abstract Query parse$(Query query, String queryString) throws QueryParseException ;"
            },
            {
              "step": 3,
              "variableName": "parser.parse(query, queryString)",
              "startLine": 142,
              "startColumn": 16,
              "endLine": 142,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "            query.setBase(queryBase);\n\n        }\n        return parser.parse(query, queryString);\n    }\n\n    static boolean knownParserSyntax(Syntax syntaxURI) {"
            },
            {
              "step": 4,
              "variableName": "parse(query, queryString, baseURI, syntax)",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "\n    static public Query create(String queryString, String baseURI, Syntax syntax) {\n        Query query = new Query();\n        return parse(query, queryString, baseURI, syntax);\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "create(queryString, null, syntax)",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString, Syntax syntax) {\n        return create(queryString, null, syntax);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "create(queryString, Syntax.defaultQuerySyntax)",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString) {\n        return create(queryString, Syntax.defaultQuerySyntax);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "QueryFactory.create(queryString)",
              "startLine": 377,
              "startColumn": 22,
              "endLine": 377,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLink.java",
              "type": "Query",
              "code": "     */\n    @Override\n    public default QueryExec query(String queryString) {\n        return query(QueryFactory.create(queryString));\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "Query query",
              "startLine": 247,
              "startColumn": 28,
              "endLine": 247,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "Query",
              "code": "    }\n\n    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }"
            },
            {
              "step": 9,
              "variableName": "query",
              "startLine": 249,
              "startColumn": 26,
              "endLine": 249,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "",
              "code": "    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 40,
              "startColumn": 9,
              "endLine": 40,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/ParserSPARQL10.java",
              "type": "Query",
              "code": "\n    @Override\n    protected Query parse$(final Query query, String queryString) {\n        query.setSyntax(Syntax.syntaxSPARQL_10);\n\n        Action action = (SPARQLParser10 parser) ->\n            parser.QueryUnit();"
            },
            {
              "step": 1,
              "variableName": "query",
              "startLine": 45,
              "startColumn": 16,
              "endLine": 45,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/ParserSPARQL10.java",
              "type": "Query",
              "code": "        Action action = (SPARQLParser10 parser) ->\n            parser.QueryUnit();\n        perform(query, queryString, action);\n        return query;\n    }\n\n    public static Element parseElement(String string) {"
            },
            {
              "step": 2,
              "variableName": "parse$(query, queryString)",
              "startLine": 33,
              "startColumn": 29,
              "endLine": 33,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "public abstract class SPARQLParser\n{\n    public final Query parse(Query query, String queryString) throws QueryParseException {\n        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;"
            },
            {
              "step": 3,
              "variableName": "parsedQuery",
              "startLine": 36,
              "startColumn": 16,
              "endLine": 36,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/lang/SPARQLParser.java",
              "type": "Query",
              "code": "        Query parsedQuery = parse$(query, queryString) ;\n        validateParsedQuery(parsedQuery) ;\n        parsedQuery.resetResultVars();\n        return parsedQuery ;\n    }\n\n    protected abstract Query parse$(Query query, String queryString) throws QueryParseException ;"
            },
            {
              "step": 4,
              "variableName": "parser.parse(query, queryString)",
              "startLine": 142,
              "startColumn": 16,
              "endLine": 142,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "            query.setBase(queryBase);\n\n        }\n        return parser.parse(query, queryString);\n    }\n\n    static boolean knownParserSyntax(Syntax syntaxURI) {"
            },
            {
              "step": 5,
              "variableName": "parse(query, queryString, baseURI, syntax)",
              "startLine": 82,
              "startColumn": 16,
              "endLine": 82,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "\n    static public Query create(String queryString, String baseURI, Syntax syntax) {\n        Query query = new Query();\n        return parse(query, queryString, baseURI, syntax);\n    }\n\n    /**"
            },
            {
              "step": 6,
              "variableName": "create(queryString, null, syntax)",
              "startLine": 55,
              "startColumn": 16,
              "endLine": 55,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString, Syntax syntax) {\n        return create(queryString, null, syntax);\n    }\n\n    /**"
            },
            {
              "step": 7,
              "variableName": "create(queryString, Syntax.defaultQuerySyntax)",
              "startLine": 43,
              "startColumn": 16,
              "endLine": 43,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/QueryFactory.java",
              "type": "Query",
              "code": "     */\n\n    static public Query create(String queryString) {\n        return create(queryString, Syntax.defaultQuerySyntax);\n    }\n\n    /**"
            },
            {
              "step": 8,
              "variableName": "QueryFactory.create(queryString)",
              "startLine": 377,
              "startColumn": 22,
              "endLine": 377,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLink.java",
              "type": "Query",
              "code": "     */\n    @Override\n    public default QueryExec query(String queryString) {\n        return query(QueryFactory.create(queryString));\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "Query query",
              "startLine": 247,
              "startColumn": 28,
              "endLine": 247,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "Query",
              "code": "    }\n\n    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }"
            },
            {
              "step": 10,
              "variableName": "query",
              "startLine": 249,
              "startColumn": 26,
              "endLine": 249,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-rdfconnection/src/main/java/org/apache/jena/rdflink/RDFLinkHTTP.java",
              "type": "",
              "code": "    @Override\n    public QueryExec query(Query query) {\n        Objects.requireNonNull(query);\n        return queryExec(query, null, null);\n    }\n\n    @Override"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "215": [
    {
      "resultIndex": 28,
      "fileName": "ParserShExC.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "curTokenImage",
              "startLine": 3957,
              "startColumn": 38,
              "endLine": 3957,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 1,
              "variableName": "String image",
              "startLine": 136,
              "startColumn": 44,
              "endLine": 136,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use sit in your lexical actions.\n   */\n  public static Token newToken(int ofKind, String image)\n  {\n    switch(ofKind)\n    {"
            },
            {
              "step": 2,
              "variableName": "image",
              "startLine": 140,
              "startColumn": 42,
              "endLine": 140,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "String image",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  /**\n   * Constructs a new token for the specified Image and Kind.\n   */\n  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;"
            },
            {
              "step": 4,
              "variableName": "image",
              "startLine": 112,
              "startColumn": 18,
              "endLine": 112,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 112,
              "startColumn": 5,
              "endLine": 112,
              "endColumn": 9,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 6,
              "variableName": "new Token(ofKind, image)",
              "startLine": 140,
              "startColumn": 24,
              "endLine": 140,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 7,
              "variableName": "Token.newToken(jjmatchedKind, curTokenImage)",
              "startLine": 3957,
              "startColumn": 8,
              "endLine": 3957,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 8,
              "variableName": "t",
              "startLine": 3959,
              "startColumn": 4,
              "endLine": 3959,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;"
            },
            {
              "step": 9,
              "variableName": "t",
              "startLine": 3960,
              "startColumn": 4,
              "endLine": 3960,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n"
            },
            {
              "step": 10,
              "variableName": "t",
              "startLine": 3961,
              "startColumn": 4,
              "endLine": 3961,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;"
            },
            {
              "step": 11,
              "variableName": "t",
              "startLine": 3962,
              "startColumn": 4,
              "endLine": 3962,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}"
            },
            {
              "step": 12,
              "variableName": "t",
              "startLine": 3964,
              "startColumn": 11,
              "endLine": 3964,
              "endColumn": 12,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}\nstatic final int[] jjnextStates = {\n   392, 393, 394, 402, 403, 408, 409, 392, 393, 394, 396, 401, 364, 390, 315, 341,"
            },
            {
              "step": 13,
              "variableName": "jjFillToken()",
              "startLine": 4552,
              "startColumn": 22,
              "endLine": 4552,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   {\n      jjmatchedKind = 0;\n      jjmatchedPos = -1;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n"
            },
            {
              "step": 14,
              "variableName": "matchedToken",
              "startLine": 4553,
              "startColumn": 14,
              "endLine": 4553,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "      jjmatchedKind = 0;\n      jjmatchedPos = -1;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   switch(curLexState)"
            },
            {
              "step": 15,
              "variableName": "token_source.getNextToken()",
              "startLine": 2769,
              "startColumn": 29,
              "endLine": 2769,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "  private Token jj_consume_token(int kind) throws ParseException {\n\t Token oldToken;\n\t if ((oldToken = token).next != null) token = token.next;\n\t else token = token.next = token_source.getNextToken();\n\t jj_ntk = -1;\n\t if (token.kind == kind) {\n\t   jj_gen++;"
            },
            {
              "step": 16,
              "variableName": "token",
              "startLine": 2783,
              "startColumn": 12,
              "endLine": 2783,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\t\t   }\n\t\t }\n\t   }\n\t   return token;\n\t }\n\t token = oldToken;\n\t jj_kind = kind;"
            },
            {
              "step": 17,
              "variableName": "jj_consume_token(CODE_BLOCK)",
              "startLine": 1856,
              "startColumn": 9,
              "endLine": 1856,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "}\n\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}"
            },
            {
              "step": 18,
              "variableName": "t",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 19,
              "variableName": "t.image",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 20,
              "variableName": "String iriAndCode",
              "startLine": 640,
              "startColumn": 42,
              "endLine": 640,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        addNodeConstraint(numLength);\n    }\n\n    protected SemAct crackSemanticAction(String iriAndCode, int line, int column) {\n        // e.g. % <http://shex.io/extensions/Test/> { print(s) %}\n        // or   % ex:Test { print(s) %}\n        // or   %<http://shex.io/extensions/Test/>%"
            },
            {
              "step": 21,
              "variableName": "iriAndCode",
              "startLine": 661,
              "startColumn": 19,
              "endLine": 661,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "            int codeDelimiter = iriAndCode.indexOf('{', iriEnd);\n            code = codeDelimiter == -1\n                ? null\n                : iriAndCode.substring(codeDelimiter + 1, iriAndCode.length() - 2);\n        } else {\n            // PNAME\n            int codeDelimiter = iriAndCode.indexOf('{', startOfIri);"
            },
            {
              "step": 22,
              "variableName": "iriAndCode.substring(codeDelimiter + 1, iriAndCode.length() - 2)",
              "startLine": 661,
              "startColumn": 19,
              "endLine": 661,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "            int codeDelimiter = iriAndCode.indexOf('{', iriEnd);\n            code = codeDelimiter == -1\n                ? null\n                : iriAndCode.substring(codeDelimiter + 1, iriAndCode.length() - 2);\n        } else {\n            // PNAME\n            int codeDelimiter = iriAndCode.indexOf('{', startOfIri);"
            },
            {
              "step": 23,
              "variableName": "code",
              "startLine": 679,
              "startColumn": 37,
              "endLine": 679,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 24,
              "variableName": "stack(\"SemAct: %s %s\", iri, code)",
              "startLine": 679,
              "startColumn": 9,
              "endLine": 679,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 25,
              "variableName": "Object...args",
              "startLine": 825,
              "startColumn": 36,
              "endLine": 825,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n    }\n\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();"
            },
            {
              "step": 26,
              "variableName": "args",
              "startLine": 827,
              "startColumn": 42,
              "endLine": 827,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            },
            {
              "step": 27,
              "variableName": "String.format(fmt, args)",
              "startLine": 827,
              "startColumn": 23,
              "endLine": 827,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "curTokenImage",
              "startLine": 3957,
              "startColumn": 38,
              "endLine": 3957,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 1,
              "variableName": "String image",
              "startLine": 136,
              "startColumn": 44,
              "endLine": 136,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use sit in your lexical actions.\n   */\n  public static Token newToken(int ofKind, String image)\n  {\n    switch(ofKind)\n    {"
            },
            {
              "step": 2,
              "variableName": "image",
              "startLine": 140,
              "startColumn": 42,
              "endLine": 140,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "String image",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  /**\n   * Constructs a new token for the specified Image and Kind.\n   */\n  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;"
            },
            {
              "step": 4,
              "variableName": "image",
              "startLine": 112,
              "startColumn": 18,
              "endLine": 112,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 112,
              "startColumn": 5,
              "endLine": 112,
              "endColumn": 9,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 6,
              "variableName": "new Token(ofKind, image)",
              "startLine": 140,
              "startColumn": 24,
              "endLine": 140,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 7,
              "variableName": "Token.newToken(jjmatchedKind, curTokenImage)",
              "startLine": 3957,
              "startColumn": 8,
              "endLine": 3957,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 8,
              "variableName": "t",
              "startLine": 3959,
              "startColumn": 4,
              "endLine": 3959,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;"
            },
            {
              "step": 9,
              "variableName": "t",
              "startLine": 3960,
              "startColumn": 4,
              "endLine": 3960,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n"
            },
            {
              "step": 10,
              "variableName": "t",
              "startLine": 3961,
              "startColumn": 4,
              "endLine": 3961,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;"
            },
            {
              "step": 11,
              "variableName": "t",
              "startLine": 3962,
              "startColumn": 4,
              "endLine": 3962,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}"
            },
            {
              "step": 12,
              "variableName": "t",
              "startLine": 3964,
              "startColumn": 11,
              "endLine": 3964,
              "endColumn": 12,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}\nstatic final int[] jjnextStates = {\n   392, 393, 394, 402, 403, 408, 409, 392, 393, 394, 396, 401, 364, 390, 315, 341,"
            },
            {
              "step": 13,
              "variableName": "jjFillToken()",
              "startLine": 4579,
              "startColumn": 27,
              "endLine": 4579,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "           input_stream.backup(curPos - jjmatchedPos - 1);\n        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           matchedToken = jjFillToken();\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           return matchedToken;"
            },
            {
              "step": 14,
              "variableName": "matchedToken",
              "startLine": 4582,
              "startColumn": 19,
              "endLine": 4582,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "           matchedToken = jjFillToken();\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           return matchedToken;\n        }\n        else\n        {"
            },
            {
              "step": 15,
              "variableName": "token_source.getNextToken()",
              "startLine": 2769,
              "startColumn": 29,
              "endLine": 2769,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "  private Token jj_consume_token(int kind) throws ParseException {\n\t Token oldToken;\n\t if ((oldToken = token).next != null) token = token.next;\n\t else token = token.next = token_source.getNextToken();\n\t jj_ntk = -1;\n\t if (token.kind == kind) {\n\t   jj_gen++;"
            },
            {
              "step": 16,
              "variableName": "token.next = token_source.getNextToken()",
              "startLine": 2769,
              "startColumn": 16,
              "endLine": 2769,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "  private Token jj_consume_token(int kind) throws ParseException {\n\t Token oldToken;\n\t if ((oldToken = token).next != null) token = token.next;\n\t else token = token.next = token_source.getNextToken();\n\t jj_ntk = -1;\n\t if (token.kind == kind) {\n\t   jj_gen++;"
            },
            {
              "step": 17,
              "variableName": "token",
              "startLine": 2769,
              "startColumn": 8,
              "endLine": 2769,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "ShExJavacc [token, image] : String",
              "code": "  private Token jj_consume_token(int kind) throws ParseException {\n\t Token oldToken;\n\t if ((oldToken = token).next != null) token = token.next;\n\t else token = token.next = token_source.getNextToken();\n\t jj_ntk = -1;\n\t if (token.kind == kind) {\n\t   jj_gen++;"
            },
            {
              "step": 18,
              "variableName": "jj_ntk",
              "startLine": 2770,
              "startColumn": 3,
              "endLine": 2770,
              "endColumn": 9,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "ShExJavacc [token, image] : String",
              "code": "\t Token oldToken;\n\t if ((oldToken = token).next != null) token = token.next;\n\t else token = token.next = token_source.getNextToken();\n\t jj_ntk = -1;\n\t if (token.kind == kind) {\n\t   jj_gen++;\n\t   if (++jj_gc > 100) {"
            },
            {
              "step": 19,
              "variableName": "token",
              "startLine": 2783,
              "startColumn": 12,
              "endLine": 2783,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "ShExJavacc [token, image] : String",
              "code": "\t\t   }\n\t\t }\n\t   }\n\t   return token;\n\t }\n\t token = oldToken;\n\t jj_kind = kind;"
            },
            {
              "step": 20,
              "variableName": "token",
              "startLine": 2783,
              "startColumn": 12,
              "endLine": 2783,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\t\t   }\n\t\t }\n\t   }\n\t   return token;\n\t }\n\t token = oldToken;\n\t jj_kind = kind;"
            },
            {
              "step": 21,
              "variableName": "jj_consume_token(CODE_BLOCK)",
              "startLine": 1856,
              "startColumn": 9,
              "endLine": 1856,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "}\n\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}"
            },
            {
              "step": 22,
              "variableName": "t",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 23,
              "variableName": "t.image",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 24,
              "variableName": "String iriAndCode",
              "startLine": 640,
              "startColumn": 42,
              "endLine": 640,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        addNodeConstraint(numLength);\n    }\n\n    protected SemAct crackSemanticAction(String iriAndCode, int line, int column) {\n        // e.g. % <http://shex.io/extensions/Test/> { print(s) %}\n        // or   % ex:Test { print(s) %}\n        // or   %<http://shex.io/extensions/Test/>%"
            },
            {
              "step": 25,
              "variableName": "iriAndCode",
              "startLine": 656,
              "startColumn": 38,
              "endLine": 656,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        if (iriAndCode.charAt(startOfIri) == '<') {\n            // relative IRI\n            int iriEnd = iriAndCode.indexOf('>');\n            iri = profile.resolveIRI(iriAndCode.substring(startOfIri + 1, iriEnd), line, column);\n\n            int codeDelimiter = iriAndCode.indexOf('{', iriEnd);\n            code = codeDelimiter == -1"
            },
            {
              "step": 26,
              "variableName": "iriAndCode.substring(startOfIri + 1, iriEnd)",
              "startLine": 656,
              "startColumn": 38,
              "endLine": 656,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        if (iriAndCode.charAt(startOfIri) == '<') {\n            // relative IRI\n            int iriEnd = iriAndCode.indexOf('>');\n            iri = profile.resolveIRI(iriAndCode.substring(startOfIri + 1, iriEnd), line, column);\n\n            int codeDelimiter = iriAndCode.indexOf('{', iriEnd);\n            code = codeDelimiter == -1"
            },
            {
              "step": 27,
              "variableName": "String uriStr",
              "startLine": 83,
              "startColumn": 30,
              "endLine": 83,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public String resolveIRI(String uriStr, long line, long col) {\n        return internalMakeIRI(uriStr, line, col).toString();\n    }\n"
            },
            {
              "step": 28,
              "variableName": "uriStr",
              "startLine": 84,
              "startColumn": 32,
              "endLine": 84,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "\n    @Override\n    public String resolveIRI(String uriStr, long line, long col) {\n        return internalMakeIRI(uriStr, line, col).toString();\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "String uriStr",
              "startLine": 98,
              "startColumn": 34,
              "endLine": 98,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "        this.resolver = resolver.resetBase(newBase);\n    }\n\n    private IRIx internalMakeIRI(String uriStr, long line, long col) {\n        if ( uriStr.contains(\" \") ) {\n            // Specific check for spaces.\n            errorHandler.warning(\"Bad IRI: <\" + uriStr + \"> Spaces are not legal in URIs/IRIs.\", line, col);"
            },
            {
              "step": 30,
              "variableName": "uriStr",
              "startLine": 102,
              "startColumn": 35,
              "endLine": 102,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "        if ( uriStr.contains(\" \") ) {\n            // Specific check for spaces.\n            errorHandler.warning(\"Bad IRI: <\" + uriStr + \"> Spaces are not legal in URIs/IRIs.\", line, col);\n            return IRIx.createAny(uriStr);\n        }\n        try {\n            IRIx iri = resolver.resolve(uriStr);"
            },
            {
              "step": 31,
              "variableName": "String iri",
              "startLine": 63,
              "startColumn": 34,
              "endLine": 63,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "String",
              "code": "     * It returns a IRIx holder and does no checking whatsoever.\n     * Whether the IRI \"works\" is down to care by the application.\n     */\n    static public IRIx createAny(String iri) {\n        Objects.requireNonNull(iri);\n        return IRIProviderAny.stringProvider().create(iri);\n    }"
            },
            {
              "step": 32,
              "variableName": "iri",
              "startLine": 65,
              "startColumn": 55,
              "endLine": 65,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "String",
              "code": "     */\n    static public IRIx createAny(String iri) {\n        Objects.requireNonNull(iri);\n        return IRIProviderAny.stringProvider().create(iri);\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "String iri",
              "startLine": 105,
              "startColumn": 24,
              "endLine": 105,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIProviderAny.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public IRIx create(String iri) {\n        return new IRIxString(iri);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "iri",
              "startLine": 106,
              "startColumn": 31,
              "endLine": 106,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIProviderAny.java",
              "type": "String",
              "code": "\n    @Override\n    public IRIx create(String iri) {\n        return new IRIxString(iri);\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "String string",
              "startLine": 38,
              "startColumn": 30,
              "endLine": 38,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIProviderAny.java",
              "type": "String",
              "code": "\n    static class IRIxString extends IRIx {\n\n        protected IRIxString(String string) {\n            super(string);\n        }\n"
            },
            {
              "step": 36,
              "variableName": "string",
              "startLine": 39,
              "startColumn": 19,
              "endLine": 39,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIProviderAny.java",
              "type": "String",
              "code": "    static class IRIxString extends IRIx {\n\n        protected IRIxString(String string) {\n            super(string);\n        }\n\n        // Meaningless."
            },
            {
              "step": 37,
              "variableName": "super(string);",
              "startLine": 39,
              "startColumn": 13,
              "endLine": 39,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIProviderAny.java",
              "type": "IRIxString [iriString] : String",
              "code": "    static class IRIxString extends IRIx {\n\n        protected IRIxString(String string) {\n            super(string);\n        }\n\n        // Meaningless."
            },
            {
              "step": 38,
              "variableName": "new IRIxString(iri)",
              "startLine": 106,
              "startColumn": 16,
              "endLine": 106,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIProviderAny.java",
              "type": "IRIxString [iriString] : String",
              "code": "\n    @Override\n    public IRIx create(String iri) {\n        return new IRIxString(iri);\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "IRIProviderAny.stringProvider().create(iri)",
              "startLine": 65,
              "startColumn": 16,
              "endLine": 65,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "IRIxString [iriString] : String",
              "code": "     */\n    static public IRIx createAny(String iri) {\n        Objects.requireNonNull(iri);\n        return IRIProviderAny.stringProvider().create(iri);\n    }\n\n    /**"
            },
            {
              "step": 40,
              "variableName": "IRIx.createAny(uriStr)",
              "startLine": 102,
              "startColumn": 20,
              "endLine": 102,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "IRIxString [iriString] : String",
              "code": "        if ( uriStr.contains(\" \") ) {\n            // Specific check for spaces.\n            errorHandler.warning(\"Bad IRI: <\" + uriStr + \"> Spaces are not legal in URIs/IRIs.\", line, col);\n            return IRIx.createAny(uriStr);\n        }\n        try {\n            IRIx iri = resolver.resolve(uriStr);"
            },
            {
              "step": 41,
              "variableName": "internalMakeIRI(uriStr, line, col)",
              "startLine": 84,
              "startColumn": 16,
              "endLine": 84,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "IRIxString [iriString] : String",
              "code": "\n    @Override\n    public String resolveIRI(String uriStr, long line, long col) {\n        return internalMakeIRI(uriStr, line, col).toString();\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "toString",
              "startLine": 245,
              "startColumn": 19,
              "endLine": 245,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "IRIxString [iriString] : String",
              "code": "     * Use {@link #str()} to get a string form that represents the IRI in the RFC grammar.\n     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}"
            },
            {
              "step": 43,
              "variableName": "iriString",
              "startLine": 246,
              "startColumn": 16,
              "endLine": 246,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "IRIxString [iriString] : String",
              "code": "     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}\n"
            },
            {
              "step": 44,
              "variableName": "iriString",
              "startLine": 246,
              "startColumn": 16,
              "endLine": 246,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "String",
              "code": "     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}\n"
            },
            {
              "step": 45,
              "variableName": "internalMakeIRI(uriStr, line, col).toString()",
              "startLine": 84,
              "startColumn": 16,
              "endLine": 84,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "\n    @Override\n    public String resolveIRI(String uriStr, long line, long col) {\n        return internalMakeIRI(uriStr, line, col).toString();\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "profile.resolveIRI(iriAndCode.substring(startOfIri + 1, iriEnd), line, column)",
              "startLine": 656,
              "startColumn": 19,
              "endLine": 656,
              "endColumn": 97,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        if (iriAndCode.charAt(startOfIri) == '<') {\n            // relative IRI\n            int iriEnd = iriAndCode.indexOf('>');\n            iri = profile.resolveIRI(iriAndCode.substring(startOfIri + 1, iriEnd), line, column);\n\n            int codeDelimiter = iriAndCode.indexOf('{', iriEnd);\n            code = codeDelimiter == -1"
            },
            {
              "step": 47,
              "variableName": "iri",
              "startLine": 679,
              "startColumn": 32,
              "endLine": 679,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 48,
              "variableName": "stack(\"SemAct: %s %s\", iri, code)",
              "startLine": 679,
              "startColumn": 9,
              "endLine": 679,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 49,
              "variableName": "Object...args",
              "startLine": 825,
              "startColumn": 36,
              "endLine": 825,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n    }\n\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();"
            },
            {
              "step": 50,
              "variableName": "args",
              "startLine": 827,
              "startColumn": 42,
              "endLine": 827,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            },
            {
              "step": 51,
              "variableName": "String.format(fmt, args)",
              "startLine": 827,
              "startColumn": 23,
              "endLine": 827,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "curTokenImage",
              "startLine": 3957,
              "startColumn": 38,
              "endLine": 3957,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 1,
              "variableName": "String image",
              "startLine": 136,
              "startColumn": 44,
              "endLine": 136,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use sit in your lexical actions.\n   */\n  public static Token newToken(int ofKind, String image)\n  {\n    switch(ofKind)\n    {"
            },
            {
              "step": 2,
              "variableName": "image",
              "startLine": 140,
              "startColumn": 42,
              "endLine": 140,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "String image",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  /**\n   * Constructs a new token for the specified Image and Kind.\n   */\n  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;"
            },
            {
              "step": 4,
              "variableName": "image",
              "startLine": 112,
              "startColumn": 18,
              "endLine": 112,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 112,
              "startColumn": 5,
              "endLine": 112,
              "endColumn": 9,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 6,
              "variableName": "new Token(ofKind, image)",
              "startLine": 140,
              "startColumn": 24,
              "endLine": 140,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 7,
              "variableName": "Token.newToken(jjmatchedKind, curTokenImage)",
              "startLine": 3957,
              "startColumn": 8,
              "endLine": 3957,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 8,
              "variableName": "t",
              "startLine": 3959,
              "startColumn": 4,
              "endLine": 3959,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;"
            },
            {
              "step": 9,
              "variableName": "t",
              "startLine": 3960,
              "startColumn": 4,
              "endLine": 3960,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n"
            },
            {
              "step": 10,
              "variableName": "t",
              "startLine": 3961,
              "startColumn": 4,
              "endLine": 3961,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;"
            },
            {
              "step": 11,
              "variableName": "t",
              "startLine": 3962,
              "startColumn": 4,
              "endLine": 3962,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}"
            },
            {
              "step": 12,
              "variableName": "t",
              "startLine": 3964,
              "startColumn": 11,
              "endLine": 3964,
              "endColumn": 12,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}\nstatic final int[] jjnextStates = {\n   392, 393, 394, 402, 403, 408, 409, 392, 393, 394, 396, 401, 364, 390, 315, 341,"
            },
            {
              "step": 13,
              "variableName": "jjFillToken()",
              "startLine": 4552,
              "startColumn": 22,
              "endLine": 4552,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   {\n      jjmatchedKind = 0;\n      jjmatchedPos = -1;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n"
            },
            {
              "step": 14,
              "variableName": "matchedToken",
              "startLine": 4553,
              "startColumn": 14,
              "endLine": 4553,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "      jjmatchedKind = 0;\n      jjmatchedPos = -1;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   switch(curLexState)"
            },
            {
              "step": 15,
              "variableName": "token_source.getNextToken()",
              "startLine": 2769,
              "startColumn": 29,
              "endLine": 2769,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "  private Token jj_consume_token(int kind) throws ParseException {\n\t Token oldToken;\n\t if ((oldToken = token).next != null) token = token.next;\n\t else token = token.next = token_source.getNextToken();\n\t jj_ntk = -1;\n\t if (token.kind == kind) {\n\t   jj_gen++;"
            },
            {
              "step": 16,
              "variableName": "token",
              "startLine": 2783,
              "startColumn": 12,
              "endLine": 2783,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\t\t   }\n\t\t }\n\t   }\n\t   return token;\n\t }\n\t token = oldToken;\n\t jj_kind = kind;"
            },
            {
              "step": 17,
              "variableName": "jj_consume_token(CODE_BLOCK)",
              "startLine": 1856,
              "startColumn": 9,
              "endLine": 1856,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "}\n\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}"
            },
            {
              "step": 18,
              "variableName": "t",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 19,
              "variableName": "t.image",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 20,
              "variableName": "String iriAndCode",
              "startLine": 640,
              "startColumn": 42,
              "endLine": 640,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        addNodeConstraint(numLength);\n    }\n\n    protected SemAct crackSemanticAction(String iriAndCode, int line, int column) {\n        // e.g. % <http://shex.io/extensions/Test/> { print(s) %}\n        // or   % ex:Test { print(s) %}\n        // or   %<http://shex.io/extensions/Test/>%"
            },
            {
              "step": 21,
              "variableName": "iriAndCode",
              "startLine": 675,
              "startColumn": 19,
              "endLine": 675,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "\n            code = codeDelimiter == -1\n                ? null\n                : iriAndCode.substring(codeDelimiter + 1, iriAndCode.length() - 2);\n        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));"
            },
            {
              "step": 22,
              "variableName": "iriAndCode.substring(codeDelimiter + 1, iriAndCode.length() - 2)",
              "startLine": 675,
              "startColumn": 19,
              "endLine": 675,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "\n            code = codeDelimiter == -1\n                ? null\n                : iriAndCode.substring(codeDelimiter + 1, iriAndCode.length() - 2);\n        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));"
            },
            {
              "step": 23,
              "variableName": "code",
              "startLine": 679,
              "startColumn": 37,
              "endLine": 679,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 24,
              "variableName": "stack(\"SemAct: %s %s\", iri, code)",
              "startLine": 679,
              "startColumn": 9,
              "endLine": 679,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 25,
              "variableName": "Object...args",
              "startLine": 825,
              "startColumn": 36,
              "endLine": 825,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n    }\n\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();"
            },
            {
              "step": 26,
              "variableName": "args",
              "startLine": 827,
              "startColumn": 42,
              "endLine": 827,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            },
            {
              "step": 27,
              "variableName": "String.format(fmt, args)",
              "startLine": 827,
              "startColumn": 23,
              "endLine": 827,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "curTokenImage",
              "startLine": 3957,
              "startColumn": 38,
              "endLine": 3957,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 1,
              "variableName": "String image",
              "startLine": 136,
              "startColumn": 44,
              "endLine": 136,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use sit in your lexical actions.\n   */\n  public static Token newToken(int ofKind, String image)\n  {\n    switch(ofKind)\n    {"
            },
            {
              "step": 2,
              "variableName": "image",
              "startLine": 140,
              "startColumn": 42,
              "endLine": 140,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 3,
              "variableName": "String image",
              "startLine": 109,
              "startColumn": 26,
              "endLine": 109,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  /**\n   * Constructs a new token for the specified Image and Kind.\n   */\n  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;"
            },
            {
              "step": 4,
              "variableName": "image",
              "startLine": 112,
              "startColumn": 18,
              "endLine": 112,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 5,
              "variableName": "this",
              "startLine": 112,
              "startColumn": 5,
              "endLine": 112,
              "endColumn": 9,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }\n\n  /**"
            },
            {
              "step": 6,
              "variableName": "new Token(ofKind, image)",
              "startLine": 140,
              "startColumn": 24,
              "endLine": 140,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/Token.java",
              "type": "Token [image] : String",
              "code": "  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }\n"
            },
            {
              "step": 7,
              "variableName": "Token.newToken(jjmatchedKind, curTokenImage)",
              "startLine": 3957,
              "startColumn": 8,
              "endLine": 3957,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   beginColumn = input_stream.getBeginColumn();\n   endLine = input_stream.getEndLine();\n   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;"
            },
            {
              "step": 8,
              "variableName": "t",
              "startLine": 3959,
              "startColumn": 4,
              "endLine": 3959,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   endColumn = input_stream.getEndColumn();\n   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;"
            },
            {
              "step": 9,
              "variableName": "t",
              "startLine": 3960,
              "startColumn": 4,
              "endLine": 3960,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t = Token.newToken(jjmatchedKind, curTokenImage);\n\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n"
            },
            {
              "step": 10,
              "variableName": "t",
              "startLine": 3961,
              "startColumn": 4,
              "endLine": 3961,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "\n   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;"
            },
            {
              "step": 11,
              "variableName": "t",
              "startLine": 3962,
              "startColumn": 4,
              "endLine": 3962,
              "endColumn": 5,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginLine = beginLine;\n   t.endLine = endLine;\n   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}"
            },
            {
              "step": 12,
              "variableName": "t",
              "startLine": 3964,
              "startColumn": 11,
              "endLine": 3964,
              "endColumn": 12,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   t.beginColumn = beginColumn;\n   t.endColumn = endColumn;\n\n   return t;\n}\nstatic final int[] jjnextStates = {\n   392, 393, 394, 402, 403, 408, 409, 392, 393, 394, 396, 401, 364, 390, 315, 341,"
            },
            {
              "step": 13,
              "variableName": "jjFillToken()",
              "startLine": 4552,
              "startColumn": 22,
              "endLine": 4552,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "   {\n      jjmatchedKind = 0;\n      jjmatchedPos = -1;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n"
            },
            {
              "step": 14,
              "variableName": "matchedToken",
              "startLine": 4553,
              "startColumn": 14,
              "endLine": 4553,
              "endColumn": 26,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavaccTokenManager.java",
              "type": "Token [image] : String",
              "code": "      jjmatchedKind = 0;\n      jjmatchedPos = -1;\n      matchedToken = jjFillToken();\n      return matchedToken;\n   }\n\n   switch(curLexState)"
            },
            {
              "step": 15,
              "variableName": "token_source.getNextToken()",
              "startLine": 2769,
              "startColumn": 29,
              "endLine": 2769,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "  private Token jj_consume_token(int kind) throws ParseException {\n\t Token oldToken;\n\t if ((oldToken = token).next != null) token = token.next;\n\t else token = token.next = token_source.getNextToken();\n\t jj_ntk = -1;\n\t if (token.kind == kind) {\n\t   jj_gen++;"
            },
            {
              "step": 16,
              "variableName": "token",
              "startLine": 2783,
              "startColumn": 12,
              "endLine": 2783,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\t\t   }\n\t\t }\n\t   }\n\t   return token;\n\t }\n\t token = oldToken;\n\t jj_kind = kind;"
            },
            {
              "step": 17,
              "variableName": "jj_consume_token(CODE_BLOCK)",
              "startLine": 1856,
              "startColumn": 9,
              "endLine": 1856,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "}\n\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}"
            },
            {
              "step": 18,
              "variableName": "t",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "Token [image] : String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 19,
              "variableName": "t.image",
              "startLine": 1857,
              "startColumn": 45,
              "endLine": 1857,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/javacc/ShExJavacc.java",
              "type": "String",
              "code": "\n  final public SemAct codeDecl() throws ParseException {Token t;\n    t = jj_consume_token(CODE_BLOCK);\n{if (\"\" != null) return crackSemanticAction(t.image, t.beginLine, t.beginColumn);}\n    throw new Error(\"Missing return statement in function\");\n}\n"
            },
            {
              "step": 20,
              "variableName": "String iriAndCode",
              "startLine": 640,
              "startColumn": 42,
              "endLine": 640,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        addNodeConstraint(numLength);\n    }\n\n    protected SemAct crackSemanticAction(String iriAndCode, int line, int column) {\n        // e.g. % <http://shex.io/extensions/Test/> { print(s) %}\n        // or   % ex:Test { print(s) %}\n        // or   %<http://shex.io/extensions/Test/>%"
            },
            {
              "step": 21,
              "variableName": "iriAndCode",
              "startLine": 670,
              "startColumn": 28,
              "endLine": 670,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "                : codeDelimiter - 1;\n            for (; whitespaces.indexOf(iriAndCode.charAt(endOfLocalName)) != -1; --endOfLocalName)\n                ;\n            String pname = iriAndCode.substring(startOfIri, endOfLocalName + 1);\n            iri = resolvePName(pname, line, column);\n\n            code = codeDelimiter == -1"
            },
            {
              "step": 22,
              "variableName": "iriAndCode.substring(startOfIri, endOfLocalName + 1)",
              "startLine": 670,
              "startColumn": 28,
              "endLine": 670,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "                : codeDelimiter - 1;\n            for (; whitespaces.indexOf(iriAndCode.charAt(endOfLocalName)) != -1; --endOfLocalName)\n                ;\n            String pname = iriAndCode.substring(startOfIri, endOfLocalName + 1);\n            iri = resolvePName(pname, line, column);\n\n            code = codeDelimiter == -1"
            },
            {
              "step": 23,
              "variableName": "pname",
              "startLine": 671,
              "startColumn": 32,
              "endLine": 671,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "            for (; whitespaces.indexOf(iriAndCode.charAt(endOfLocalName)) != -1; --endOfLocalName)\n                ;\n            String pname = iriAndCode.substring(startOfIri, endOfLocalName + 1);\n            iri = resolvePName(pname, line, column);\n\n            code = codeDelimiter == -1\n                ? null"
            },
            {
              "step": 24,
              "variableName": "String pname",
              "startLine": 111,
              "startColumn": 35,
              "endLine": 111,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n"
            },
            {
              "step": 25,
              "variableName": "()->super.resolvePName(pname, line, column)",
              "startLine": 112,
              "startColumn": 24,
              "endLine": 112,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n\n    private <T> void printStack(String string, Deque<T> stack) {"
            },
            {
              "step": 26,
              "variableName": "()->super.resolvePName(pname, line, column)",
              "startLine": 112,
              "startColumn": 24,
              "endLine": 112,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "new Supplier<String>(...) { ... } [pname] : String",
              "code": "\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n\n    private <T> void printStack(String string, Deque<T> stack) {"
            },
            {
              "step": 27,
              "variableName": "Supplier<String> action",
              "startLine": 100,
              "startColumn": 35,
              "endLine": 100,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "new Supplier<String>(...) { ... } [pname] : String",
              "code": "        return convert(()->LangParserLib.unescapeStr(lex, line, column), line, column);\n    }\n\n    private static String convert(Supplier<String> action, int line, int column) {\n        try { return action.get(); }\n        catch (RiotException ex) { throw new ShexParseException(ex.getMessage(), line, column); }\n    }"
            },
            {
              "step": 28,
              "variableName": "action",
              "startLine": 101,
              "startColumn": 22,
              "endLine": 101,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "new Supplier<String>(...) { ... } [pname] : String",
              "code": "    }\n\n    private static String convert(Supplier<String> action, int line, int column) {\n        try { return action.get(); }\n        catch (RiotException ex) { throw new ShexParseException(ex.getMessage(), line, column); }\n    }\n"
            },
            {
              "step": 29,
              "variableName": "()->super.resolvePName(pname, line, column)",
              "startLine": 112,
              "startColumn": 24,
              "endLine": 112,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "new Supplier<String>(...) { ... } [pname] : String",
              "code": "\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n\n    private <T> void printStack(String string, Deque<T> stack) {"
            },
            {
              "step": 30,
              "variableName": "pname",
              "startLine": 112,
              "startColumn": 47,
              "endLine": 112,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "new Supplier<String>(...) { ... } [pname] : String",
              "code": "\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n\n    private <T> void printStack(String string, Deque<T> stack) {"
            },
            {
              "step": 31,
              "variableName": "pname",
              "startLine": 112,
              "startColumn": 47,
              "endLine": 112,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n\n    private <T> void printStack(String string, Deque<T> stack) {"
            },
            {
              "step": 32,
              "variableName": "String pname",
              "startLine": 156,
              "startColumn": 35,
              "endLine": 156,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "        return Var.alloc(varName) ;\n    }\n\n    protected String resolvePName(String pname, int line, int column) {\n        int idx = pname.indexOf(':');\n        String prefix = pname.substring(0, idx);\n        String localPart = pname.substring(idx+1);"
            },
            {
              "step": 33,
              "variableName": "pname",
              "startLine": 159,
              "startColumn": 28,
              "endLine": 159,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "    protected String resolvePName(String pname, int line, int column) {\n        int idx = pname.indexOf(':');\n        String prefix = pname.substring(0, idx);\n        String localPart = pname.substring(idx+1);\n        localPart = LangParserLib.unescapePName(localPart, line, column);\n\n        if ( localPart.contains(\"\\\\\") )"
            },
            {
              "step": 34,
              "variableName": "pname.substring(idx+1)",
              "startLine": 159,
              "startColumn": 28,
              "endLine": 159,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "    protected String resolvePName(String pname, int line, int column) {\n        int idx = pname.indexOf(':');\n        String prefix = pname.substring(0, idx);\n        String localPart = pname.substring(idx+1);\n        localPart = LangParserLib.unescapePName(localPart, line, column);\n\n        if ( localPart.contains(\"\\\\\") )"
            },
            {
              "step": 35,
              "variableName": "localPart",
              "startLine": 160,
              "startColumn": 49,
              "endLine": 160,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "        int idx = pname.indexOf(':');\n        String prefix = pname.substring(0, idx);\n        String localPart = pname.substring(idx+1);\n        localPart = LangParserLib.unescapePName(localPart, line, column);\n\n        if ( localPart.contains(\"\\\\\") )\n            System.out.println(\"X\");"
            },
            {
              "step": 36,
              "variableName": "String s",
              "startLine": 62,
              "startColumn": 40,
              "endLine": 62,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserLib.java",
              "type": "String",
              "code": "    }\n\n    /** Unescape a prefix name (or part of). This applies the Turtle/SPARQL PLX rule */\n    public static String unescapePName(String s, int line, int column) {\n        char escape = '\\\\' ;\n        int idx = s.indexOf(escape) ;\n"
            },
            {
              "step": 37,
              "variableName": "s",
              "startLine": 67,
              "startColumn": 20,
              "endLine": 67,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserLib.java",
              "type": "String",
              "code": "        int idx = s.indexOf(escape) ;\n\n        if ( idx == -1 )\n            return s ;\n\n        int len = s.length() ;\n        StringBuilder sb = new StringBuilder() ;"
            },
            {
              "step": 38,
              "variableName": "LangParserLib.unescapePName(localPart, line, column)",
              "startLine": 160,
              "startColumn": 21,
              "endLine": 160,
              "endColumn": 73,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "        int idx = pname.indexOf(':');\n        String prefix = pname.substring(0, idx);\n        String localPart = pname.substring(idx+1);\n        localPart = LangParserLib.unescapePName(localPart, line, column);\n\n        if ( localPart.contains(\"\\\\\") )\n            System.out.println(\"X\");"
            },
            {
              "step": 39,
              "variableName": "localPart",
              "startLine": 165,
              "startColumn": 66,
              "endLine": 165,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "        if ( localPart.contains(\"\\\\\") )\n            System.out.println(\"X\");\n\n        String expansion = profile.getPrefixMap().expand(prefix, localPart);\n        if ( expansion == null ) {\n            if ( ARQ.isTrue(ARQ.fixupUndefinedPrefixes) )\n                return RiotLib.fixupPrefixIRI(prefix, localPart);"
            },
            {
              "step": 40,
              "variableName": "String localName",
              "startLine": 95,
              "startColumn": 41,
              "endLine": 95,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/PrefixMapAdapter.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public String expand(String prefix, String localName) {\n        String prefixUri = prefixMapping.getNsPrefixURI(prefix);\n        if ( prefixUri == null )\n            return null;"
            },
            {
              "step": 41,
              "variableName": "prefixUri+localName",
              "startLine": 99,
              "startColumn": 16,
              "endLine": 99,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/PrefixMapAdapter.java",
              "type": "String",
              "code": "        String prefixUri = prefixMapping.getNsPrefixURI(prefix);\n        if ( prefixUri == null )\n            return null;\n        return prefixUri+localName;\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "profile.getPrefixMap().expand(prefix, localPart)",
              "startLine": 165,
              "startColumn": 28,
              "endLine": 165,
              "endColumn": 76,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "        if ( localPart.contains(\"\\\\\") )\n            System.out.println(\"X\");\n\n        String expansion = profile.getPrefixMap().expand(prefix, localPart);\n        if ( expansion == null ) {\n            if ( ARQ.isTrue(ARQ.fixupUndefinedPrefixes) )\n                return RiotLib.fixupPrefixIRI(prefix, localPart);"
            },
            {
              "step": 43,
              "variableName": "expansion",
              "startLine": 171,
              "startColumn": 16,
              "endLine": 171,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/extra/LangParserBase.java",
              "type": "String",
              "code": "                return RiotLib.fixupPrefixIRI(prefix, localPart);\n            profile.getErrorHandler().fatal(\"Undefined prefix: \" + prefix, line, column);\n        }\n        return expansion;\n    }\n\n    protected String resolveQuotedIRI(String iriStr, int line, int column) {"
            },
            {
              "step": 44,
              "variableName": "super.resolvePName(pname, line, column)",
              "startLine": 112,
              "startColumn": 28,
              "endLine": 112,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n\n    private <T> void printStack(String string, Deque<T> stack) {"
            },
            {
              "step": 45,
              "variableName": "action.get()",
              "startLine": 101,
              "startColumn": 22,
              "endLine": 101,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "    }\n\n    private static String convert(Supplier<String> action, int line, int column) {\n        try { return action.get(); }\n        catch (RiotException ex) { throw new ShexParseException(ex.getMessage(), line, column); }\n    }\n"
            },
            {
              "step": 46,
              "variableName": "convert(()->super.resolvePName(pname, line, column), line, column)",
              "startLine": 112,
              "startColumn": 16,
              "endLine": 112,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "\n    @Override\n    protected String resolvePName(String pname, int line, int column) {\n        return convert(()->super.resolvePName(pname, line, column), line, column);\n    }\n\n    private <T> void printStack(String string, Deque<T> stack) {"
            },
            {
              "step": 47,
              "variableName": "resolvePName(pname, line, column)",
              "startLine": 671,
              "startColumn": 19,
              "endLine": 671,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "            for (; whitespaces.indexOf(iriAndCode.charAt(endOfLocalName)) != -1; --endOfLocalName)\n                ;\n            String pname = iriAndCode.substring(startOfIri, endOfLocalName + 1);\n            iri = resolvePName(pname, line, column);\n\n            code = codeDelimiter == -1\n                ? null"
            },
            {
              "step": 48,
              "variableName": "iri",
              "startLine": 679,
              "startColumn": 32,
              "endLine": 679,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 49,
              "variableName": "stack(\"SemAct: %s %s\", iri, code)",
              "startLine": 679,
              "startColumn": 9,
              "endLine": 679,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n\n        SemAct ret = new SemAct(iri, code == null ? null : EscapeStr.unescapeUnicode(code));\n        stack(\"SemAct: %s %s\", iri, code);\n        return ret;\n    }\n"
            },
            {
              "step": 50,
              "variableName": "Object...args",
              "startLine": 825,
              "startColumn": 36,
              "endLine": 825,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "        }\n    }\n\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();"
            },
            {
              "step": 51,
              "variableName": "args",
              "startLine": 827,
              "startColumn": 42,
              "endLine": 827,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "Object[] [[]] : String",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            },
            {
              "step": 52,
              "variableName": "String.format(fmt, args)",
              "startLine": 827,
              "startColumn": 23,
              "endLine": 827,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-shex/src/main/java/org/apache/jena/shex/parser/ParserShExC.java",
              "type": "",
              "code": "\n    private void stack(String fmt, Object...args) {\n        if ( DEBUG_PARSE ) {\n            out.print(String.format(fmt, args));\n            out.println();\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    }
  ],
  "532": [
    {
      "resultIndex": 1,
      "fileName": "AuthHttp.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "secret",
              "startLine": 42,
              "startColumn": 18,
              "endLine": 42,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/auth/AuthHttp.java",
              "type": "String",
              "code": "    }\n\n    public static String KD(String secret, String data) {\n        return H(secret+\":\"+data) ;\n    }\n\n    public static String H(String string) {"
            },
            {
              "step": 1,
              "variableName": "secret+\":\"+data",
              "startLine": 42,
              "startColumn": 18,
              "endLine": 42,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/auth/AuthHttp.java",
              "type": "",
              "code": "    }\n\n    public static String KD(String secret, String data) {\n        return H(secret+\":\"+data) ;\n    }\n\n    public static String H(String string) {"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 2,
      "fileName": "AuthHttp.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 63,
              "startColumn": 43,
              "endLine": 63,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/auth/AuthHttp.java",
              "type": "String",
              "code": "        Objects.requireNonNull(password) ;\n        Objects.requireNonNull(nonce) ;\n        Objects.requireNonNull(cnonce) ;\n        String s = username+\":\"+realm+\":\"+password ;\n        String x = H(s)+\":\"+nonce+\":\"+cnonce ;\n        return s ;\n    }"
            },
            {
              "step": 1,
              "variableName": "s",
              "startLine": 64,
              "startColumn": 22,
              "endLine": 64,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/http/auth/AuthHttp.java",
              "type": "",
              "code": "        Objects.requireNonNull(nonce) ;\n        Objects.requireNonNull(cnonce) ;\n        String s = username+\":\"+realm+\":\"+password ;\n        String x = H(s)+\":\"+nonce+\":\"+cnonce ;\n        return s ;\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 3,
      "fileName": "ErrorHandlerFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 106,
              "startColumn": 30,
              "endLine": 106,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 108,
              "startColumn": 38,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            },
            {
              "step": 23,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 24,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 25,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            },
            {
              "step": 23,
              "variableName": "String message",
              "startLine": 106,
              "startColumn": 30,
              "endLine": 106,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 24,
              "variableName": "message",
              "startLine": 108,
              "startColumn": 38,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            },
            {
              "step": 25,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 26,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 27,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            },
            {
              "step": 11,
              "variableName": "String message",
              "startLine": 106,
              "startColumn": 30,
              "endLine": 106,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 12,
              "variableName": "message",
              "startLine": 108,
              "startColumn": 38,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            },
            {
              "step": 13,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 15,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 106,
              "startColumn": 30,
              "endLine": 106,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 108,
              "startColumn": 38,
              "endLine": 108,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            },
            {
              "step": 23,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 24,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 25,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report an error */\n        public void logError(String message, long line, long col) {\n            if ( log != null )\n                log.error(fmtMessage(message, line, col)) ;\n        }\n\n        /** report a catastrophic error */"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 4,
      "fileName": "ErrorHandlerFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 112,
              "startColumn": 30,
              "endLine": 112,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 114,
              "startColumn": 26,
              "endLine": 114,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a catastrophic error */\n        public void logFatal(String message, long line, long col) {\n            if ( log != null )\n                logError(message, line, col) ;\n        }\n    }\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 5,
      "fileName": "ErrorHandlerFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 153,
              "startColumn": 27,
              "endLine": 153,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 154,
              "startColumn": 22,
              "endLine": 154,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 6,
      "fileName": "ErrorHandlerFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 194,
              "startColumn": 27,
              "endLine": 194,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 195,
              "startColumn": 22,
              "endLine": 195,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 194,
              "startColumn": 27,
              "endLine": 194,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 195,
              "startColumn": 22,
              "endLine": 195,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 194,
              "startColumn": 27,
              "endLine": 194,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 195,
              "startColumn": 22,
              "endLine": 195,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 194,
              "startColumn": 27,
              "endLine": 194,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "\n        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 195,
              "startColumn": 22,
              "endLine": 195,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "        /** report a fatal error - does not return */\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 7,
      "fileName": "ErrorHandlerFactory.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 221,
              "startColumn": 27,
              "endLine": 221,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 222,
              "startColumn": 22,
              "endLine": 222,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 221,
              "startColumn": 27,
              "endLine": 221,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 222,
              "startColumn": 22,
              "endLine": 222,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 221,
              "startColumn": 27,
              "endLine": 221,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 222,
              "startColumn": 22,
              "endLine": 222,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 221,
              "startColumn": 27,
              "endLine": 221,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "String",
              "code": "        }\n\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 222,
              "startColumn": 22,
              "endLine": 222,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ErrorHandlerFactory.java",
              "type": "",
              "code": "\n        @Override\n        public void fatal(String message, long line, long col) {\n            logFatal(message, line, col) ;\n            throw new RiotException(fmtMessage(message, line, col)) ;\n        }\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 8,
      "fileName": "PMapQuadTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 15,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 27,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 29,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 30,
              "variableName": "x3",
              "startLine": 138,
              "startColumn": 55,
              "endLine": 138,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 31,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 32,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 33,
              "variableName": "get(tupleMap.mapIdx(0), x1, x2, x3, x4)",
              "startLine": 138,
              "startColumn": 23,
              "endLine": 138,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 34,
              "variableName": "x1a",
              "startLine": 142,
              "startColumn": 24,
              "endLine": 142,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 35,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 52,
              "endLine": 100,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 36,
              "variableName": "first",
              "startLine": 101,
              "startColumn": 64,
              "endLine": 101,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    \n    @Override"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 70,
              "startColumn": 46,
              "endLine": 70,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        return qIter ;\n    }\n\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 75,
              "startColumn": 56,
              "endLine": 75,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )\n            iter1 = null;\n        Iterator<Quad> iter2 = findInAnyNamedGraphs(s, p, o);\n        if ( ! iter2.hasNext() )\n            iter2 = null;\n        // Copes with null in either or both positions."
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 442,
              "startColumn": 65,
              "endLine": 442,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 443,
              "startColumn": 49,
              "endLine": 443,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}\n"
            },
            {
              "step": 25,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 30,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 33,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 34,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 35,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 317,
              "startColumn": 58,
              "endLine": 317,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n"
            },
            {
              "step": 43,
              "variableName": "final Node p",
              "startLine": 325,
              "startColumn": 60,
              "endLine": 325,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     * Union graph is the merge of named graphs.\n     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 44,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 45,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 46,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 48,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 50,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 51,
              "variableName": "final Node p",
              "startLine": 62,
              "startColumn": 57,
              "endLine": 62,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "        find(ANY, ANY, ANY, ANY).forEach(this::delete);\n    }\n\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 29,
              "endLine": 64,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())\n                .map(Quad::asTriple)\n                .filter(seen::add)"
            },
            {
              "step": 53,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 54,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 56,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 57,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 58,
              "variableName": "x3",
              "startLine": 138,
              "startColumn": 55,
              "endLine": 138,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 59,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 60,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 61,
              "variableName": "get(tupleMap.mapIdx(0), x1, x2, x3, x4)",
              "startLine": 138,
              "startColumn": 23,
              "endLine": 138,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 62,
              "variableName": "x1a",
              "startLine": 142,
              "startColumn": 24,
              "endLine": 142,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 63,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 52,
              "endLine": 100,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 64,
              "variableName": "first",
              "startLine": 101,
              "startColumn": 64,
              "endLine": 101,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 39,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 42,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 47,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "final Node p",
              "startLine": 61,
              "startColumn": 58,
              "endLine": 61,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(final Node g, final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(g)) pattern.add(GRAPH);\n        if (isConcrete(s)) pattern.add(SUBJECT);"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 68,
              "startColumn": 52,
              "endLine": 68,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final QuadTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(g, s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 50,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 51,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 53,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 54,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 55,
              "variableName": "x3",
              "startLine": 138,
              "startColumn": 55,
              "endLine": 138,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 56,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 57,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 58,
              "variableName": "get(tupleMap.mapIdx(0), x1, x2, x3, x4)",
              "startLine": 138,
              "startColumn": 23,
              "endLine": 138,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 59,
              "variableName": "x1a",
              "startLine": 142,
              "startColumn": 24,
              "endLine": 142,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 60,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 52,
              "endLine": 100,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 61,
              "variableName": "first",
              "startLine": 101,
              "startColumn": 64,
              "endLine": 101,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 89,
              "startColumn": 63,
              "endLine": 89,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples."
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 82,
              "endLine": 90,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 19,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 31,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 32,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 33,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 34,
              "variableName": "x3",
              "startLine": 138,
              "startColumn": 55,
              "endLine": 138,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 35,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 36,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 37,
              "variableName": "get(tupleMap.mapIdx(0), x1, x2, x3, x4)",
              "startLine": 138,
              "startColumn": 23,
              "endLine": 138,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 38,
              "variableName": "x1a",
              "startLine": 142,
              "startColumn": 24,
              "endLine": 142,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 39,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 52,
              "endLine": 100,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 40,
              "variableName": "first",
              "startLine": 101,
              "startColumn": 64,
              "endLine": 101,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 9,
      "fileName": "PMapQuadTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 15,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 27,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 29,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 30,
              "variableName": "x3",
              "startLine": 139,
              "startColumn": 55,
              "endLine": 139,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 31,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 32,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 33,
              "variableName": "get(tupleMap.mapIdx(1), x1, x2, x3, x4)",
              "startLine": 139,
              "startColumn": 23,
              "endLine": 139,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 34,
              "variableName": "x2a",
              "startLine": 142,
              "startColumn": 29,
              "endLine": 142,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 35,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 59,
              "endLine": 100,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 36,
              "variableName": "second",
              "startLine": 101,
              "startColumn": 71,
              "endLine": 101,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    \n    @Override"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 70,
              "startColumn": 46,
              "endLine": 70,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        return qIter ;\n    }\n\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 75,
              "startColumn": 56,
              "endLine": 75,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )\n            iter1 = null;\n        Iterator<Quad> iter2 = findInAnyNamedGraphs(s, p, o);\n        if ( ! iter2.hasNext() )\n            iter2 = null;\n        // Copes with null in either or both positions."
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 442,
              "startColumn": 65,
              "endLine": 442,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 443,
              "startColumn": 49,
              "endLine": 443,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}\n"
            },
            {
              "step": 25,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 30,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 33,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 34,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 35,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 317,
              "startColumn": 58,
              "endLine": 317,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n"
            },
            {
              "step": 43,
              "variableName": "final Node p",
              "startLine": 325,
              "startColumn": 60,
              "endLine": 325,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     * Union graph is the merge of named graphs.\n     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 44,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 45,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 46,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 48,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 50,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 51,
              "variableName": "final Node p",
              "startLine": 62,
              "startColumn": 57,
              "endLine": 62,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "        find(ANY, ANY, ANY, ANY).forEach(this::delete);\n    }\n\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 29,
              "endLine": 64,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())\n                .map(Quad::asTriple)\n                .filter(seen::add)"
            },
            {
              "step": 53,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 54,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 56,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 57,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 58,
              "variableName": "x3",
              "startLine": 139,
              "startColumn": 55,
              "endLine": 139,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 59,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 60,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 61,
              "variableName": "get(tupleMap.mapIdx(1), x1, x2, x3, x4)",
              "startLine": 139,
              "startColumn": 23,
              "endLine": 139,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 62,
              "variableName": "x2a",
              "startLine": 142,
              "startColumn": 29,
              "endLine": 142,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 63,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 59,
              "endLine": 100,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 64,
              "variableName": "second",
              "startLine": 101,
              "startColumn": 71,
              "endLine": 101,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 39,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 42,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 47,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "final Node p",
              "startLine": 61,
              "startColumn": 58,
              "endLine": 61,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(final Node g, final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(g)) pattern.add(GRAPH);\n        if (isConcrete(s)) pattern.add(SUBJECT);"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 68,
              "startColumn": 52,
              "endLine": 68,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final QuadTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(g, s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 50,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 51,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 53,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 54,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 55,
              "variableName": "x3",
              "startLine": 139,
              "startColumn": 55,
              "endLine": 139,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 56,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 57,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 58,
              "variableName": "get(tupleMap.mapIdx(1), x1, x2, x3, x4)",
              "startLine": 139,
              "startColumn": 23,
              "endLine": 139,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 59,
              "variableName": "x2a",
              "startLine": 142,
              "startColumn": 29,
              "endLine": 142,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 60,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 59,
              "endLine": 100,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 61,
              "variableName": "second",
              "startLine": 101,
              "startColumn": 71,
              "endLine": 101,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 89,
              "startColumn": 63,
              "endLine": 89,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples."
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 82,
              "endLine": 90,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 19,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 31,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 32,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 33,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 34,
              "variableName": "x3",
              "startLine": 139,
              "startColumn": 55,
              "endLine": 139,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 35,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 36,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 37,
              "variableName": "get(tupleMap.mapIdx(1), x1, x2, x3, x4)",
              "startLine": 139,
              "startColumn": 23,
              "endLine": 139,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 38,
              "variableName": "x2a",
              "startLine": 142,
              "startColumn": 29,
              "endLine": 142,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 39,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 59,
              "endLine": 100,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 40,
              "variableName": "second",
              "startLine": 101,
              "startColumn": 71,
              "endLine": 101,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 10,
      "fileName": "PMapQuadTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 15,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 27,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 29,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 30,
              "variableName": "x3",
              "startLine": 140,
              "startColumn": 55,
              "endLine": 140,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 31,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 32,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 33,
              "variableName": "get(tupleMap.mapIdx(2), x1, x2, x3, x4)",
              "startLine": 140,
              "startColumn": 23,
              "endLine": 140,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 34,
              "variableName": "x3a",
              "startLine": 142,
              "startColumn": 34,
              "endLine": 142,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 35,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 67,
              "endLine": 100,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 36,
              "variableName": "third",
              "startLine": 101,
              "startColumn": 79,
              "endLine": 101,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    \n    @Override"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 70,
              "startColumn": 46,
              "endLine": 70,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        return qIter ;\n    }\n\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 75,
              "startColumn": 56,
              "endLine": 75,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )\n            iter1 = null;\n        Iterator<Quad> iter2 = findInAnyNamedGraphs(s, p, o);\n        if ( ! iter2.hasNext() )\n            iter2 = null;\n        // Copes with null in either or both positions."
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 442,
              "startColumn": 65,
              "endLine": 442,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 443,
              "startColumn": 49,
              "endLine": 443,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}\n"
            },
            {
              "step": 25,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 30,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 33,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 34,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 35,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 317,
              "startColumn": 58,
              "endLine": 317,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n"
            },
            {
              "step": 43,
              "variableName": "final Node p",
              "startLine": 325,
              "startColumn": 60,
              "endLine": 325,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     * Union graph is the merge of named graphs.\n     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 44,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 45,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 46,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 48,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 50,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 51,
              "variableName": "final Node p",
              "startLine": 62,
              "startColumn": 57,
              "endLine": 62,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "        find(ANY, ANY, ANY, ANY).forEach(this::delete);\n    }\n\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 29,
              "endLine": 64,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())\n                .map(Quad::asTriple)\n                .filter(seen::add)"
            },
            {
              "step": 53,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 54,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 56,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 57,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 58,
              "variableName": "x3",
              "startLine": 140,
              "startColumn": 55,
              "endLine": 140,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 59,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 60,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 61,
              "variableName": "get(tupleMap.mapIdx(2), x1, x2, x3, x4)",
              "startLine": 140,
              "startColumn": 23,
              "endLine": 140,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 62,
              "variableName": "x3a",
              "startLine": 142,
              "startColumn": 34,
              "endLine": 142,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 63,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 67,
              "endLine": 100,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 64,
              "variableName": "third",
              "startLine": 101,
              "startColumn": 79,
              "endLine": 101,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 39,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 42,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 47,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "final Node p",
              "startLine": 61,
              "startColumn": 58,
              "endLine": 61,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(final Node g, final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(g)) pattern.add(GRAPH);\n        if (isConcrete(s)) pattern.add(SUBJECT);"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 68,
              "startColumn": 52,
              "endLine": 68,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final QuadTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(g, s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 50,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 51,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 53,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 54,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 55,
              "variableName": "x3",
              "startLine": 140,
              "startColumn": 55,
              "endLine": 140,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 56,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 57,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 58,
              "variableName": "get(tupleMap.mapIdx(2), x1, x2, x3, x4)",
              "startLine": 140,
              "startColumn": 23,
              "endLine": 140,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 59,
              "variableName": "x3a",
              "startLine": 142,
              "startColumn": 34,
              "endLine": 142,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 60,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 67,
              "endLine": 100,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 61,
              "variableName": "third",
              "startLine": 101,
              "startColumn": 79,
              "endLine": 101,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 89,
              "startColumn": 63,
              "endLine": 89,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples."
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 82,
              "endLine": 90,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 19,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 31,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 32,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 33,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 34,
              "variableName": "x3",
              "startLine": 140,
              "startColumn": 55,
              "endLine": 140,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 35,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 36,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 37,
              "variableName": "get(tupleMap.mapIdx(2), x1, x2, x3, x4)",
              "startLine": 140,
              "startColumn": 23,
              "endLine": 140,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }"
            },
            {
              "step": 38,
              "variableName": "x3a",
              "startLine": 142,
              "startColumn": 34,
              "endLine": 142,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 39,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 67,
              "endLine": 100,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 40,
              "variableName": "third",
              "startLine": 101,
              "startColumn": 79,
              "endLine": 101,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 11,
      "fileName": "PMapQuadTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 15,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 17,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 19,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 27,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 29,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 30,
              "variableName": "x3",
              "startLine": 141,
              "startColumn": 55,
              "endLine": 141,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 31,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 32,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 33,
              "variableName": "get(tupleMap.mapIdx(3), x1, x2, x3, x4)",
              "startLine": 141,
              "startColumn": 23,
              "endLine": 141,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "x4a",
              "startLine": 142,
              "startColumn": 39,
              "endLine": 142,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 35,
              "variableName": "fourth",
              "startLine": 100,
              "startColumn": 74,
              "endLine": 100,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 36,
              "variableName": "fourth",
              "startLine": 101,
              "startColumn": 86,
              "endLine": 101,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    \n    @Override"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 70,
              "startColumn": 46,
              "endLine": 70,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        return qIter ;\n    }\n\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 75,
              "startColumn": 56,
              "endLine": 75,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )\n            iter1 = null;\n        Iterator<Quad> iter2 = findInAnyNamedGraphs(s, p, o);\n        if ( ! iter2.hasNext() )\n            iter2 = null;\n        // Copes with null in either or both positions."
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 442,
              "startColumn": 65,
              "endLine": 442,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 443,
              "startColumn": 49,
              "endLine": 443,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}\n"
            },
            {
              "step": 25,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 29,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 30,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 32,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 33,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 34,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 35,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 317,
              "startColumn": 58,
              "endLine": 317,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n"
            },
            {
              "step": 43,
              "variableName": "final Node p",
              "startLine": 325,
              "startColumn": 60,
              "endLine": 325,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     * Union graph is the merge of named graphs.\n     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 44,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 45,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 46,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 48,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 50,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 51,
              "variableName": "final Node p",
              "startLine": 62,
              "startColumn": 57,
              "endLine": 62,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "        find(ANY, ANY, ANY, ANY).forEach(this::delete);\n    }\n\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 29,
              "endLine": 64,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())\n                .map(Quad::asTriple)\n                .filter(seen::add)"
            },
            {
              "step": 53,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 54,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 56,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 57,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 58,
              "variableName": "x3",
              "startLine": 141,
              "startColumn": 55,
              "endLine": 141,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 60,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 61,
              "variableName": "get(tupleMap.mapIdx(3), x1, x2, x3, x4)",
              "startLine": 141,
              "startColumn": 23,
              "endLine": 141,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "x4a",
              "startLine": 142,
              "startColumn": 39,
              "endLine": 142,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 63,
              "variableName": "fourth",
              "startLine": 100,
              "startColumn": 74,
              "endLine": 100,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 64,
              "variableName": "fourth",
              "startLine": 101,
              "startColumn": 86,
              "endLine": 101,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 39,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 42,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 47,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 48,
              "variableName": "final Node p",
              "startLine": 61,
              "startColumn": 58,
              "endLine": 61,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(final Node g, final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(g)) pattern.add(GRAPH);\n        if (isConcrete(s)) pattern.add(SUBJECT);"
            },
            {
              "step": 49,
              "variableName": "p",
              "startLine": 68,
              "startColumn": 52,
              "endLine": 68,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/HexTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final QuadTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(g, s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 50,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 51,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 53,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 54,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 55,
              "variableName": "x3",
              "startLine": 141,
              "startColumn": 55,
              "endLine": 141,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 56,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 57,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 58,
              "variableName": "get(tupleMap.mapIdx(3), x1, x2, x3, x4)",
              "startLine": 141,
              "startColumn": 23,
              "endLine": 141,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 59,
              "variableName": "x4a",
              "startLine": 142,
              "startColumn": 39,
              "endLine": 142,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 60,
              "variableName": "fourth",
              "startLine": 100,
              "startColumn": 74,
              "endLine": 100,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 61,
              "variableName": "fourth",
              "startLine": 101,
              "startColumn": 86,
              "endLine": 101,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 89,
              "startColumn": 63,
              "endLine": 89,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples."
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 82,
              "endLine": 90,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 19,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 29,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 31,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 32,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 33,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 34,
              "variableName": "x3",
              "startLine": 141,
              "startColumn": 55,
              "endLine": 141,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 35,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 36,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 37,
              "variableName": "get(tupleMap.mapIdx(3), x1, x2, x3, x4)",
              "startLine": 141,
              "startColumn": 23,
              "endLine": 141,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n"
            },
            {
              "step": 38,
              "variableName": "x4a",
              "startLine": 142,
              "startColumn": 39,
              "endLine": 142,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 39,
              "variableName": "fourth",
              "startLine": 100,
              "startColumn": 74,
              "endLine": 100,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 40,
              "variableName": "fourth",
              "startLine": 101,
              "startColumn": 86,
              "endLine": 101,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 12,
      "fileName": "PMapTripleTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 14,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 27,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 28,
              "variableName": "x2",
              "startLine": 147,
              "startColumn": 51,
              "endLine": 147,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 29,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 30,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 31,
              "variableName": "get(ordering.mapIdx(0), x1, x2, x3)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 32,
              "variableName": "x1a",
              "startLine": 150,
              "startColumn": 24,
              "endLine": 150,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 33,
              "variableName": "first",
              "startLine": 99,
              "startColumn": 54,
              "endLine": 99,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 34,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 62,
              "endLine": 100,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 61,
              "startColumn": 39,
              "endLine": 61,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 24,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 31,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 32,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 33,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Node p",
              "startLine": 73,
              "startColumn": 46,
              "endLine": 73,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(s)) pattern.add(SUBJECT);\n        if (isConcrete(p)) pattern.add(PREDICATE);"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 79,
              "startColumn": 49,
              "endLine": 79,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final TripleTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 43,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 44,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 46,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 47,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 48,
              "variableName": "x2",
              "startLine": 147,
              "startColumn": 51,
              "endLine": 147,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 49,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 50,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 51,
              "variableName": "get(ordering.mapIdx(0), x1, x2, x3)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 52,
              "variableName": "x1a",
              "startLine": 150,
              "startColumn": 24,
              "endLine": 150,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 53,
              "variableName": "first",
              "startLine": 99,
              "startColumn": 54,
              "endLine": 99,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 54,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 62,
              "endLine": 100,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 323,
              "startColumn": 59,
              "endLine": 323,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        readOperation();\n        return findQuads(Node.ANY, s, p, o);\n    }"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 325,
              "startColumn": 39,
              "endLine": 325,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        readOperation();\n        return findQuads(Node.ANY, s, p, o);\n    }\n\n    private Iterator<Quad> findQuads(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 328,
              "startColumn": 54,
              "endLine": 328,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "        return findQuads(Node.ANY, s, p, o);\n    }\n\n    private Iterator<Quad> findQuads(Node g, Node s, Node p, Node o) {\n        DatasetGraph base = get();\n        Iterator<Quad> extra = findInAddedQuads(g, s, p, o);\n        Iter<Quad> iter ="
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 332,
              "startColumn": 39,
              "endLine": 332,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "        DatasetGraph base = get();\n        Iterator<Quad> extra = findInAddedQuads(g, s, p, o);\n        Iter<Quad> iter =\n            Iter.iter(base.find(g, s, p, o))\n                .filter(q->! deletedQuads.contains(q))\n                .append(extra);\n        if ( ! UNIQUE )"
            },
            {
              "step": 42,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 43,
              "variableName": "p",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    \n    @Override"
            },
            {
              "step": 44,
              "variableName": "Node p",
              "startLine": 70,
              "startColumn": 46,
              "endLine": 70,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        return qIter ;\n    }\n\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 72,
              "startColumn": 50,
              "endLine": 72,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )\n            iter1 = null;\n        Iterator<Quad> iter2 = findInAnyNamedGraphs(s, p, o);"
            },
            {
              "step": 46,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 47,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 48,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 49,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 51,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 53,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 54,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 57,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 58,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 59,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 60,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 61,
              "variableName": "x2",
              "startLine": 147,
              "startColumn": 51,
              "endLine": 147,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 62,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 63,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 64,
              "variableName": "get(ordering.mapIdx(0), x1, x2, x3)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 65,
              "variableName": "x1a",
              "startLine": 150,
              "startColumn": 24,
              "endLine": 150,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 66,
              "variableName": "first",
              "startLine": 99,
              "startColumn": 54,
              "endLine": 99,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 67,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 62,
              "endLine": 100,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 204,
              "startColumn": 48,
              "endLine": 204,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphWrapper.java",
              "type": "Node_URI",
              "code": "    { return getR().find(quad); }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    { return getR().find(g, s, p, o); }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 205,
              "startColumn": 32,
              "endLine": 205,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    { return getR().find(g, s, p, o); }\n\n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 17,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 18,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 29,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 31,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 32,
              "variableName": "x2",
              "startLine": 147,
              "startColumn": 51,
              "endLine": 147,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 33,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 34,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 35,
              "variableName": "get(ordering.mapIdx(0), x1, x2, x3)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 36,
              "variableName": "x1a",
              "startLine": 150,
              "startColumn": 24,
              "endLine": 150,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 37,
              "variableName": "first",
              "startLine": 99,
              "startColumn": 54,
              "endLine": 99,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 38,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 62,
              "endLine": 100,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 13,
      "fileName": "PMapTripleTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 14,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 27,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 28,
              "variableName": "x2",
              "startLine": 148,
              "startColumn": 51,
              "endLine": 148,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 29,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 30,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 31,
              "variableName": "get(ordering.mapIdx(1), x1, x2, x3)",
              "startLine": 148,
              "startColumn": 23,
              "endLine": 148,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 32,
              "variableName": "x2a",
              "startLine": 150,
              "startColumn": 29,
              "endLine": 150,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 33,
              "variableName": "second",
              "startLine": 99,
              "startColumn": 61,
              "endLine": 99,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 34,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 69,
              "endLine": 100,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 61,
              "startColumn": 39,
              "endLine": 61,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 24,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 31,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 32,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 33,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Node p",
              "startLine": 73,
              "startColumn": 46,
              "endLine": 73,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(s)) pattern.add(SUBJECT);\n        if (isConcrete(p)) pattern.add(PREDICATE);"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 79,
              "startColumn": 49,
              "endLine": 79,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final TripleTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 43,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 44,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 46,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 47,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 48,
              "variableName": "x2",
              "startLine": 148,
              "startColumn": 51,
              "endLine": 148,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 49,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 50,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 51,
              "variableName": "get(ordering.mapIdx(1), x1, x2, x3)",
              "startLine": 148,
              "startColumn": 23,
              "endLine": 148,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 52,
              "variableName": "x2a",
              "startLine": 150,
              "startColumn": 29,
              "endLine": 150,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 53,
              "variableName": "second",
              "startLine": 99,
              "startColumn": 61,
              "endLine": 99,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 54,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 69,
              "endLine": 100,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 323,
              "startColumn": 59,
              "endLine": 323,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        readOperation();\n        return findQuads(Node.ANY, s, p, o);\n    }"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 325,
              "startColumn": 39,
              "endLine": 325,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        readOperation();\n        return findQuads(Node.ANY, s, p, o);\n    }\n\n    private Iterator<Quad> findQuads(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 328,
              "startColumn": 54,
              "endLine": 328,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "        return findQuads(Node.ANY, s, p, o);\n    }\n\n    private Iterator<Quad> findQuads(Node g, Node s, Node p, Node o) {\n        DatasetGraph base = get();\n        Iterator<Quad> extra = findInAddedQuads(g, s, p, o);\n        Iter<Quad> iter ="
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 332,
              "startColumn": 39,
              "endLine": 332,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "        DatasetGraph base = get();\n        Iterator<Quad> extra = findInAddedQuads(g, s, p, o);\n        Iter<Quad> iter =\n            Iter.iter(base.find(g, s, p, o))\n                .filter(q->! deletedQuads.contains(q))\n                .append(extra);\n        if ( ! UNIQUE )"
            },
            {
              "step": 42,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 43,
              "variableName": "p",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    \n    @Override"
            },
            {
              "step": 44,
              "variableName": "Node p",
              "startLine": 70,
              "startColumn": 46,
              "endLine": 70,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        return qIter ;\n    }\n\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 72,
              "startColumn": 50,
              "endLine": 72,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )\n            iter1 = null;\n        Iterator<Quad> iter2 = findInAnyNamedGraphs(s, p, o);"
            },
            {
              "step": 46,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 47,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 48,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 49,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 51,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 53,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 54,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 57,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 58,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 59,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 60,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 61,
              "variableName": "x2",
              "startLine": 148,
              "startColumn": 51,
              "endLine": 148,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 62,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 63,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 64,
              "variableName": "get(ordering.mapIdx(1), x1, x2, x3)",
              "startLine": 148,
              "startColumn": 23,
              "endLine": 148,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 65,
              "variableName": "x2a",
              "startLine": 150,
              "startColumn": 29,
              "endLine": 150,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 66,
              "variableName": "second",
              "startLine": 99,
              "startColumn": 61,
              "endLine": 99,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 67,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 69,
              "endLine": 100,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 204,
              "startColumn": 48,
              "endLine": 204,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphWrapper.java",
              "type": "Node_URI",
              "code": "    { return getR().find(quad); }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    { return getR().find(g, s, p, o); }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 205,
              "startColumn": 32,
              "endLine": 205,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    { return getR().find(g, s, p, o); }\n\n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 17,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 18,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 29,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 31,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 32,
              "variableName": "x2",
              "startLine": 148,
              "startColumn": 51,
              "endLine": 148,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 33,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 34,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 35,
              "variableName": "get(ordering.mapIdx(1), x1, x2, x3)",
              "startLine": 148,
              "startColumn": 23,
              "endLine": 148,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 36,
              "variableName": "x2a",
              "startLine": 150,
              "startColumn": 29,
              "endLine": 150,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 37,
              "variableName": "second",
              "startLine": 99,
              "startColumn": 61,
              "endLine": 99,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 38,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 69,
              "endLine": 100,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 14,
      "fileName": "PMapTripleTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 14,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 27,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 28,
              "variableName": "x2",
              "startLine": 149,
              "startColumn": 51,
              "endLine": 149,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 29,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 30,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 31,
              "variableName": "get(ordering.mapIdx(2), x1, x2, x3)",
              "startLine": 149,
              "startColumn": 23,
              "endLine": 149,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 32,
              "variableName": "x3a",
              "startLine": 150,
              "startColumn": 34,
              "endLine": 150,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 33,
              "variableName": "third",
              "startLine": 99,
              "startColumn": 69,
              "endLine": 99,
              "endColumn": 74,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 34,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 77,
              "endLine": 100,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 61,
              "startColumn": 39,
              "endLine": 61,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 24,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 30,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 31,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 32,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 33,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 36,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 38,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 41,
              "variableName": "final Node p",
              "startLine": 73,
              "startColumn": 46,
              "endLine": 73,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(s)) pattern.add(SUBJECT);\n        if (isConcrete(p)) pattern.add(PREDICATE);"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 79,
              "startColumn": 49,
              "endLine": 79,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final TripleTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 43,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 44,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 46,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 47,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 48,
              "variableName": "x2",
              "startLine": 149,
              "startColumn": 51,
              "endLine": 149,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 49,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 50,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 51,
              "variableName": "get(ordering.mapIdx(2), x1, x2, x3)",
              "startLine": 149,
              "startColumn": 23,
              "endLine": 149,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 52,
              "variableName": "x3a",
              "startLine": 150,
              "startColumn": 34,
              "endLine": 150,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 53,
              "variableName": "third",
              "startLine": 99,
              "startColumn": 69,
              "endLine": 99,
              "endColumn": 74,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 54,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 77,
              "endLine": 100,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 323,
              "startColumn": 59,
              "endLine": 323,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        readOperation();\n        return findQuads(Node.ANY, s, p, o);\n    }"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 325,
              "startColumn": 39,
              "endLine": 325,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        readOperation();\n        return findQuads(Node.ANY, s, p, o);\n    }\n\n    private Iterator<Quad> findQuads(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 328,
              "startColumn": 54,
              "endLine": 328,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "        return findQuads(Node.ANY, s, p, o);\n    }\n\n    private Iterator<Quad> findQuads(Node g, Node s, Node p, Node o) {\n        DatasetGraph base = get();\n        Iterator<Quad> extra = findInAddedQuads(g, s, p, o);\n        Iter<Quad> iter ="
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 332,
              "startColumn": 39,
              "endLine": 332,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingDatasetGraph.java",
              "type": "Node_URI",
              "code": "        DatasetGraph base = get();\n        Iterator<Quad> extra = findInAddedQuads(g, s, p, o);\n        Iter<Quad> iter =\n            Iter.iter(base.find(g, s, p, o))\n                .filter(q->! deletedQuads.contains(q))\n                .append(extra);\n        if ( ! UNIQUE )"
            },
            {
              "step": 42,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 43,
              "variableName": "p",
              "startLine": 50,
              "startColumn": 27,
              "endLine": 50,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    \n    @Override"
            },
            {
              "step": 44,
              "variableName": "Node p",
              "startLine": 70,
              "startColumn": 46,
              "endLine": 70,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        return qIter ;\n    }\n\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 72,
              "startColumn": 50,
              "endLine": 72,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "\n    protected Iterator<Quad> findAny(Node s, Node p, Node o) {\n        // Default graph\n        Iterator<Quad> iter1 = findInDftGraph(s, p, o);\n        if ( ! iter1.hasNext() )\n            iter1 = null;\n        Iterator<Quad> iter2 = findInAnyNamedGraphs(s, p, o);"
            },
            {
              "step": 46,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 47,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 48,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 49,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 50,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 51,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 52,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 53,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 54,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 57,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 58,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 59,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 60,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 61,
              "variableName": "x2",
              "startLine": 149,
              "startColumn": 51,
              "endLine": 149,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 62,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 63,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 64,
              "variableName": "get(ordering.mapIdx(2), x1, x2, x3)",
              "startLine": 149,
              "startColumn": 23,
              "endLine": 149,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 65,
              "variableName": "x3a",
              "startLine": 150,
              "startColumn": 34,
              "endLine": 150,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 66,
              "variableName": "third",
              "startLine": 99,
              "startColumn": 69,
              "endLine": 99,
              "endColumn": 74,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 67,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 77,
              "endLine": 100,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 204,
              "startColumn": 48,
              "endLine": 204,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphWrapper.java",
              "type": "Node_URI",
              "code": "    { return getR().find(quad); }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    { return getR().find(g, s, p, o); }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 205,
              "startColumn": 32,
              "endLine": 205,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    { return getR().find(g, s, p, o); }\n\n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 17,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 18,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 21,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 29,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 31,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 32,
              "variableName": "x2",
              "startLine": 149,
              "startColumn": 51,
              "endLine": 149,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 33,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 34,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 35,
              "variableName": "get(ordering.mapIdx(2), x1, x2, x3)",
              "startLine": 149,
              "startColumn": 23,
              "endLine": 149,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}"
            },
            {
              "step": 36,
              "variableName": "x3a",
              "startLine": 150,
              "startColumn": 34,
              "endLine": 150,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 37,
              "variableName": "third",
              "startLine": 99,
              "startColumn": 69,
              "endLine": 99,
              "endColumn": 74,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 38,
              "variableName": "third",
              "startLine": 100,
              "startColumn": 77,
              "endLine": 100,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            }
          ]
        }
      ]
    },
    {
      "resultIndex": 15,
      "fileName": "PMapTupleTable.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 14,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 16,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 17,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 25,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 27,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 28,
              "variableName": "x2",
              "startLine": 147,
              "startColumn": 51,
              "endLine": 147,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 29,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 30,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 31,
              "variableName": "get(ordering.mapIdx(0), x1, x2, x3)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);"
            },
            {
              "step": 32,
              "variableName": "x1a",
              "startLine": 150,
              "startColumn": 24,
              "endLine": 150,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 33,
              "variableName": "first",
              "startLine": 99,
              "startColumn": 54,
              "endLine": 99,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 34,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 62,
              "endLine": 100,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 35,
              "variableName": "debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third)",
              "startLine": 100,
              "startColumn": 9,
              "endLine": 100,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 36,
              "variableName": "final Object... values",
              "startLine": 83,
              "startColumn": 44,
              "endLine": 83,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "    /**\n     * Logs to DEBUG prepending the table name in order to distinguish amongst different indexes\n     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }"
            },
            {
              "step": 37,
              "variableName": "values",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "",
              "code": "     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 23,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 24,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 26,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 27,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 28,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 32,
              "variableName": "p",
              "startLine": 318,
              "startColumn": 40,
              "endLine": 318,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 34,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 35,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 36,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 37,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 38,
              "variableName": "x3",
              "startLine": 138,
              "startColumn": 55,
              "endLine": 138,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 39,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 40,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 41,
              "variableName": "get(tupleMap.mapIdx(0), x1, x2, x3, x4)",
              "startLine": 138,
              "startColumn": 23,
              "endLine": 138,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);"
            },
            {
              "step": 42,
              "variableName": "x1a",
              "startLine": 142,
              "startColumn": 24,
              "endLine": 142,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 43,
              "variableName": "first",
              "startLine": 100,
              "startColumn": 52,
              "endLine": 100,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 44,
              "variableName": "first",
              "startLine": 101,
              "startColumn": 64,
              "endLine": 101,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 45,
              "variableName": "debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth)",
              "startLine": 101,
              "startColumn": 9,
              "endLine": 101,
              "endColumn": 93,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 46,
              "variableName": "final Object... values",
              "startLine": 83,
              "startColumn": 44,
              "endLine": 83,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "    /**\n     * Logs to DEBUG prepending the table name in order to distinguish amongst different indexes\n     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }"
            },
            {
              "step": 47,
              "variableName": "values",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "",
              "code": "     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 38,
              "variableName": "final Node p",
              "startLine": 442,
              "startColumn": 65,
              "endLine": 442,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 443,
              "startColumn": 49,
              "endLine": 443,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(final Node s, final Node p, final Node o) {\n        return findInSpecificNamedGraph(ANY, s, p, o);\n    }\n}\n"
            },
            {
              "step": 40,
              "variableName": "final Node p",
              "startLine": 437,
              "startColumn": 83,
              "endLine": 437,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n"
            },
            {
              "step": 41,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 43,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 44,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 45,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 46,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 47,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 48,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 49,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 50,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 51,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 52,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 53,
              "variableName": "() -> quadsFinder(g, s, p, o)",
              "startLine": 438,
              "startColumn": 23,
              "endLine": 438,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 54,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 55,
              "variableName": "p",
              "startLine": 438,
              "startColumn": 47,
              "endLine": 438,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(final Node g, final Node s, final Node p, final Node o) {\n        return access(() -> quadsFinder(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 56,
              "variableName": "final Node p",
              "startLine": 316,
              "startColumn": 68,
              "endLine": 316,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().listGraphNodes().iterator());\n    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }"
            },
            {
              "step": 57,
              "variableName": "p",
              "startLine": 317,
              "startColumn": 58,
              "endLine": 317,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> quadsFinder(final Node g, final Node s, final Node p, final Node o) {\n        if (isUnionGraph(g)) return findInUnionGraph$(s, p, o);\n        return quadsIndex().find(g, s, p, o).iterator();\n    }\n"
            },
            {
              "step": 58,
              "variableName": "final Node p",
              "startLine": 325,
              "startColumn": 60,
              "endLine": 325,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     * Union graph is the merge of named graphs.\n     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 59,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 60,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 61,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 62,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 36,
              "endLine": 308,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 63,
              "variableName": "() -> quadsIndex().findInUnionGraph(s, p, o).iterator()",
              "startLine": 326,
              "startColumn": 23,
              "endLine": 326,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 64,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 65,
              "variableName": "p",
              "startLine": 326,
              "startColumn": 62,
              "endLine": 326,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "     */\n    // Temp - Should this be replaced by DatasetGraphBaseFind code?\n    private Iterator<Quad> findInUnionGraph$(final Node s, final Node p, final Node o) {\n        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {"
            },
            {
              "step": 66,
              "variableName": "final Node p",
              "startLine": 62,
              "startColumn": 57,
              "endLine": 62,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "        find(ANY, ANY, ANY, ANY).forEach(this::delete);\n    }\n\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())"
            },
            {
              "step": 67,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 29,
              "endLine": 64,
              "endColumn": 30,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    default Stream<Quad> findInUnionGraph(final Node s, final Node p, final Node o) {\n        final Set<Triple> seen = new HashSet<>();\n        return find(ANY, s, p, o).sequential()\n                .filter(q -> !q.isDefaultGraph())\n                .map(Quad::asTriple)\n                .filter(seen::add)"
            },
            {
              "step": 68,
              "variableName": "Node p",
              "startLine": 91,
              "startColumn": 46,
              "endLine": 91,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    "
            },
            {
              "step": 69,
              "variableName": "p",
              "startLine": 92,
              "startColumn": 38,
              "endLine": 92,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public Stream<Quad> find(Node g, Node s, Node p, Node o) {\n        return map(find).apply(g, s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 70,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 23,
              "endLine": 81,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 71,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 51,
              "endLine": 81,
              "endColumn": 52,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <X> TFunction4<Node, X> map(final TFunction4<Node, X> f) {\n        return (g, s, p, o) -> apply(order, g, s, p, o, f);\n    }\n\n    protected Quad unmap(final Node x1, final Node x2, final Node x3, final Node x4) {"
            },
            {
              "step": 72,
              "variableName": "final X x3",
              "startLine": 136,
              "startColumn": 84,
              "endLine": 136,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);"
            },
            {
              "step": 73,
              "variableName": "x3",
              "startLine": 139,
              "startColumn": 55,
              "endLine": 139,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 74,
              "variableName": "final X x3",
              "startLine": 121,
              "startColumn": 67,
              "endLine": 121,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        }\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3, final X x4) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 75,
              "variableName": "x3",
              "startLine": 128,
              "startColumn": 20,
              "endLine": 128,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 1:\n            return x2;\n        case 2:\n            return x3;\n        case 3:\n            return x4;\n        default:"
            },
            {
              "step": 76,
              "variableName": "get(tupleMap.mapIdx(1), x1, x2, x3, x4)",
              "startLine": 139,
              "startColumn": 23,
              "endLine": 139,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap tupleMap, final X x1, final X x2, final X x3, final X x4,\n            final TFunction4<X, Z> f) {\n        final X x1a = get(tupleMap.mapIdx(0), x1, x2, x3, x4);\n        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);"
            },
            {
              "step": 77,
              "variableName": "x2a",
              "startLine": 142,
              "startColumn": 29,
              "endLine": 142,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x2a = get(tupleMap.mapIdx(1), x1, x2, x3, x4);\n        final X x3a = get(tupleMap.mapIdx(2), x1, x2, x3, x4);\n        final X x4a = get(tupleMap.mapIdx(3), x1, x2, x3, x4);\n        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,"
            },
            {
              "step": 78,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 59,
              "endLine": 100,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 79,
              "variableName": "second",
              "startLine": 101,
              "startColumn": 71,
              "endLine": 101,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 80,
              "variableName": "debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth)",
              "startLine": 101,
              "startColumn": 9,
              "endLine": 101,
              "endColumn": 93,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapQuadTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Quad>) -- but why is that needed?\n    private TFunction4<Node, Stream<Quad>> find = (first, second, third, fourth) -> {\n        debug(\"Querying on four-tuple pattern: {} {} {} {} .\", first, second, third, fourth);\n        final FourTupleMap fourTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 81,
              "variableName": "final Object... values",
              "startLine": 83,
              "startColumn": 44,
              "endLine": 83,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "    /**\n     * Logs to DEBUG prepending the table name in order to distinguish amongst different indexes\n     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }"
            },
            {
              "step": 82,
              "variableName": "values",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "",
              "code": "     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 89,
              "startColumn": 63,
              "endLine": 89,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples."
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 82,
              "endLine": 90,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 61,
              "startColumn": 39,
              "endLine": 61,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;"
            },
            {
              "step": 19,
              "variableName": "final Node p",
              "startLine": 432,
              "startColumn": 59,
              "endLine": 432,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 22,
              "variableName": "final Supplier<T> source",
              "startLine": 307,
              "startColumn": 26,
              "endLine": 307,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "        }\n    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n"
            },
            {
              "step": 23,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": ":... : new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "Supplier<X> r",
              "startLine": 119,
              "startColumn": 71,
              "endLine": 119,
              "endColumn": 84,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n"
            },
            {
              "step": 26,
              "variableName": "r",
              "startLine": 120,
              "startColumn": 40,
              "endLine": 120,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "\n    /** Execute and return a value in a read transaction */\n    public static <T extends Transactional, X> X calculateRead(T txn, Supplier<X> r) {\n        return calc(txn, TxnType.READ, r);\n    }\n\n    /** Execute the Runnable in a write transaction */"
            },
            {
              "step": 27,
              "variableName": "Supplier<X> r",
              "startLine": 91,
              "startColumn": 79,
              "endLine": 91,
              "endColumn": 92,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    /** Execute and return a value in a transaction with the given {@link TxnType transaction type}. */\n    public static <T extends Transactional, X> X calc(T txn, TxnType txnType, Supplier<X> r) {\n        boolean b = txn.isInTransaction();\n        if ( b )\n            TxnOp.compatibleWithPromote(txnType, txn);"
            },
            {
              "step": 28,
              "variableName": "r",
              "startLine": 98,
              "startColumn": 19,
              "endLine": 98,
              "endColumn": 20,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/Txn.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "        else\n            txn.begin(txnType);\n        X x;\n        try { x = r.get(); }\n        catch (Throwable th) {\n            onThrowable(th, txn);\n            throw th;"
            },
            {
              "step": 29,
              "variableName": "source::get",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 30,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<T>(...) { ... } [source, p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 31,
              "variableName": "source",
              "startLine": 308,
              "startColumn": 75,
              "endLine": 308,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "    }\n\n    private <T> T access(final Supplier<T> source) {\n        return isInTransaction() ? source.get() : Txn.calculateRead(this, source::get);\n    }\n\n    @Override"
            },
            {
              "step": 32,
              "variableName": "() -> triplesFinder(s, p, o)",
              "startLine": 433,
              "startColumn": 23,
              "endLine": 433,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 33,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "new Supplier<Iterator<Quad>>(...) { ... } [p] : Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 34,
              "variableName": "p",
              "startLine": 433,
              "startColumn": 46,
              "endLine": 433,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(final Node s, final Node p, final Node o) {\n        return access(() -> triplesFinder(s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "final Node p",
              "startLine": 329,
              "startColumn": 56,
              "endLine": 329,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "        return access(() -> quadsIndex().findInUnionGraph(s, p, o).iterator());\n    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n"
            },
            {
              "step": 36,
              "variableName": "p",
              "startLine": 330,
              "startColumn": 63,
              "endLine": 330,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/DatasetGraphInMemory.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> triplesFinder(final Node s, final Node p, final Node o) {\n        return G.triples2quadsDftGraph(defaultGraph().find(s, p, o).iterator());\n    }\n\n    @Override"
            },
            {
              "step": 37,
              "variableName": "final Node p",
              "startLine": 73,
              "startColumn": 46,
              "endLine": 73,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        final Set<TupleSlot> pattern = noneOf(TupleSlot.class);\n        if (isConcrete(s)) pattern.add(SUBJECT);\n        if (isConcrete(p)) pattern.add(PREDICATE);"
            },
            {
              "step": 38,
              "variableName": "p",
              "startLine": 79,
              "startColumn": 49,
              "endLine": 79,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/TriTable.java",
              "type": "Node_URI",
              "code": "        if (isConcrete(p)) pattern.add(PREDICATE);\n        if (isConcrete(o)) pattern.add(OBJECT);\n        final TripleTableForm choice = chooseFrom(pattern);\n        return indexBlock().get(choice).find(s, p, o);\n    }\n\n    private static boolean isConcrete(final Node n) {"
            },
            {
              "step": 39,
              "variableName": "final Node p",
              "startLine": 90,
              "startColumn": 46,
              "endLine": 90,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    "
            },
            {
              "step": 40,
              "variableName": "p",
              "startLine": 91,
              "startColumn": 35,
              "endLine": 91,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "    \n    @Override\n    public Stream<Triple> find(final Node s, final Node p, final Node o) {\n        return map(find).apply(s, p, o);\n    }\n    \n    /**"
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 20,
              "endLine": 101,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 42,
              "variableName": "p",
              "startLine": 101,
              "startColumn": 63,
              "endLine": 101,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    protected <T, X> TFunction3<T, X> map(final TFunction3<T, X> f) {\n        return (s, p, o) -> OrderedTupleTable.apply(order, s, p, o, f);\n    }\n\n    protected Triple unmap(final Node x1, final Node x2, final Node x3) {"
            },
            {
              "step": 43,
              "variableName": "final X x2",
              "startLine": 145,
              "startColumn": 72,
              "endLine": 145,
              "endColumn": 82,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return f.apply(x1a, x2a, x3a, x4a);\n    }\n\n    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);"
            },
            {
              "step": 44,
              "variableName": "x2",
              "startLine": 148,
              "startColumn": 51,
              "endLine": 148,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 45,
              "variableName": "final X x2",
              "startLine": 108,
              "startColumn": 55,
              "endLine": 108,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        return apply(reverse, x1, x2, x3, Triple::create);\n    }\n\n    private static <X> X get(final int i, final X x1, final X x2, final X x3) {\n        switch (i) {\n        case 0:\n            return x1;"
            },
            {
              "step": 46,
              "variableName": "x2",
              "startLine": 113,
              "startColumn": 20,
              "endLine": 113,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        case 0:\n            return x1;\n        case 1:\n            return x2;\n        case 2:\n            return x3;\n        default:"
            },
            {
              "step": 47,
              "variableName": "get(ordering.mapIdx(1), x1, x2, x3)",
              "startLine": 148,
              "startColumn": 23,
              "endLine": 148,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "    private static <X, Z> Z apply(final TupleMap ordering, final X x1, final X x2, final X x3,\n            final TFunction3<X, Z> f) {\n        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }"
            },
            {
              "step": 48,
              "variableName": "x2a",
              "startLine": 150,
              "startColumn": 29,
              "endLine": 150,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/OrderedTupleTable.java",
              "type": "Node_URI",
              "code": "        final X x1a = get(ordering.mapIdx(0), x1, x2, x3);\n        final X x2a = get(ordering.mapIdx(1), x1, x2, x3);\n        final X x3a = get(ordering.mapIdx(2), x1, x2, x3);\n        return f.apply(x1a, x2a, x3a);\n    }\n}\n"
            },
            {
              "step": 49,
              "variableName": "second",
              "startLine": 99,
              "startColumn": 61,
              "endLine": 99,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     * {@link Stream} of full tuples which is our result. Use {@link Node#ANY} or <code>null</code> for a wildcard.\n     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {"
            },
            {
              "step": 50,
              "variableName": "second",
              "startLine": 100,
              "startColumn": 69,
              "endLine": 100,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 51,
              "variableName": "debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third)",
              "startLine": 100,
              "startColumn": 9,
              "endLine": 100,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTripleTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "     */\n    @SuppressWarnings(\"unchecked\") // Because of (Stream<Triple>) -- but why is that needed?\n    private TFunction3<Node, Stream<Triple>> find = (first, second, third) -> {\n        debug(\"Querying on three-tuple pattern: {} {} {} .\", first, second, third);\n        final ThreeTupleMap threeTuples = local().get();\n        if (isConcrete(first)) {\n            debug(\"Using a specific first slot value.\");"
            },
            {
              "step": 52,
              "variableName": "final Object... values",
              "startLine": 83,
              "startColumn": 44,
              "endLine": 83,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "Object[] [[]] : Node_URI",
              "code": "    /**\n     * Logs to DEBUG prepending the table name in order to distinguish amongst different indexes\n     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }"
            },
            {
              "step": 53,
              "variableName": "values",
              "startLine": 85,
              "startColumn": 49,
              "endLine": 85,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/mem/PMapTupleTable.java",
              "type": "",
              "code": "     */\n    protected void debug(final String msg, final Object... values) {\n        if ( log().isDebugEnabled() )\n            log().debug(tableName + \": \" + msg, values);\n    }\n\n    /**"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 16,
      "fileName": "FmtLog.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 98,
              "startColumn": 92,
              "endLine": 98,
              "endColumn": 100,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 1,
              "variableName": "FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal())",
              "startLine": 98,
              "startColumn": 21,
              "endLine": 98,
              "endColumn": 123,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object[] [[]] : Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 2,
              "variableName": "Object...args",
              "startLine": 95,
              "startColumn": 55,
              "endLine": 95,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "    }\n\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 96,
              "startColumn": 29,
              "endLine": 96,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n\n    /* Log at 'info' level */"
            },
            {
              "step": 4,
              "variableName": "Object...args",
              "startLine": 83,
              "startColumn": 53,
              "endLine": 83,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "    }\n\n    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }\n\n    /* Log at 'info' level */"
            },
            {
              "step": 6,
              "variableName": "Object[] args",
              "startLine": 149,
              "startColumn": 46,
              "endLine": 149,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "    }\n\n\n    private static String format(String fmt, Object[] args) {\n        try {\n            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {"
            },
            {
              "step": 7,
              "variableName": "fmt+\" \"+args",
              "startLine": 154,
              "startColumn": 20,
              "endLine": 154,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "String",
              "code": "            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {\n            // return something, however grotty.\n            return fmt+\" \"+args ;\n        }\n    }\n"
            },
            {
              "step": 8,
              "variableName": "format(fmt, args)",
              "startLine": 85,
              "startColumn": 22,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "",
              "code": "    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }\n\n    /* Log at 'info' level */"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 98,
              "startColumn": 92,
              "endLine": 98,
              "endColumn": 100,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 1,
              "variableName": "FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal())",
              "startLine": 98,
              "startColumn": 21,
              "endLine": 98,
              "endColumn": 123,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object[] [[]] : Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 2,
              "variableName": "Object...args",
              "startLine": 95,
              "startColumn": 55,
              "endLine": 95,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "    }\n\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 96,
              "startColumn": 29,
              "endLine": 96,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n\n    /* Log at 'info' level */"
            },
            {
              "step": 4,
              "variableName": "Object...args",
              "startLine": 83,
              "startColumn": 53,
              "endLine": 83,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "    }\n\n    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }\n\n    /* Log at 'info' level */"
            },
            {
              "step": 6,
              "variableName": "Object[] args",
              "startLine": 149,
              "startColumn": 46,
              "endLine": 149,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "    }\n\n\n    private static String format(String fmt, Object[] args) {\n        try {\n            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {"
            },
            {
              "step": 7,
              "variableName": "args",
              "startLine": 151,
              "startColumn": 39,
              "endLine": 151,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "\n    private static String format(String fmt, Object[] args) {\n        try {\n            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {\n            // return something, however grotty.\n            return fmt+\" \"+args ;"
            },
            {
              "step": 8,
              "variableName": "String.format(fmt, args)",
              "startLine": 151,
              "startColumn": 20,
              "endLine": 151,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "String",
              "code": "\n    private static String format(String fmt, Object[] args) {\n        try {\n            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {\n            // return something, however grotty.\n            return fmt+\" \"+args ;"
            },
            {
              "step": 9,
              "variableName": "format(fmt, args)",
              "startLine": 85,
              "startColumn": 22,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "",
              "code": "    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }\n\n    /* Log at 'info' level */"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 98,
              "startColumn": 92,
              "endLine": 98,
              "endColumn": 100,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 1,
              "variableName": "FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal())",
              "startLine": 98,
              "startColumn": 21,
              "endLine": 98,
              "endColumn": 123,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object[] [[]] : Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 2,
              "variableName": "Object...args",
              "startLine": 95,
              "startColumn": 55,
              "endLine": 95,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "    }\n\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 96,
              "startColumn": 29,
              "endLine": 96,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n\n    /* Log at 'info' level */"
            },
            {
              "step": 4,
              "variableName": "Object...args",
              "startLine": 83,
              "startColumn": 53,
              "endLine": 83,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "    }\n\n    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 85,
              "startColumn": 34,
              "endLine": 85,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }\n\n    /* Log at 'info' level */"
            },
            {
              "step": 6,
              "variableName": "Object[] args",
              "startLine": 149,
              "startColumn": 46,
              "endLine": 149,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "    }\n\n\n    private static String format(String fmt, Object[] args) {\n        try {\n            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {"
            },
            {
              "step": 7,
              "variableName": "args",
              "startLine": 151,
              "startColumn": 39,
              "endLine": 151,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[]",
              "code": "\n    private static String format(String fmt, Object[] args) {\n        try {\n            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {\n            // return something, however grotty.\n            return fmt+\" \"+args ;"
            },
            {
              "step": 8,
              "variableName": "String.format(fmt, args)",
              "startLine": 151,
              "startColumn": 20,
              "endLine": 151,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "String",
              "code": "\n    private static String format(String fmt, Object[] args) {\n        try {\n            return String.format(fmt, args) ;\n        } catch (IllegalFormatException ex) {\n            // return something, however grotty.\n            return fmt+\" \"+args ;"
            },
            {
              "step": 9,
              "variableName": "format(fmt, args)",
              "startLine": 85,
              "startColumn": 22,
              "endLine": 85,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "",
              "code": "    /* Log at 'info' level */\n    public static void info(Logger log, String fmt, Object...args) {\n        if ( log.isInfoEnabled() )\n            log.info(format(fmt, args)) ;\n    }\n\n    /* Log at 'info' level */"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 17,
      "fileName": "FmtLog.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "password",
              "startLine": 98,
              "startColumn": 92,
              "endLine": 98,
              "endColumn": 100,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 1,
              "variableName": "FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal())",
              "startLine": 98,
              "startColumn": 21,
              "endLine": 98,
              "endColumn": 123,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/JettySecurityLib.java",
              "type": "Object[] [[]] : Object",
              "code": "                @Override\n                public UserIdentity login(String username, Object password, Request request, Response response) {\n                    UserIdentity u =  super.login(username, password, request, response);\n                    FmtLog.info(JettySecurityLib.class, \"login(%s, %s) -> [%s]\", username, password, u.getUserPrincipal());\n                    return u ;\n                }\n"
            },
            {
              "step": 2,
              "variableName": "Object...args",
              "startLine": 95,
              "startColumn": 55,
              "endLine": 95,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "Object[] [[]] : Object",
              "code": "    }\n\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 96,
              "startColumn": 29,
              "endLine": 96,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/FmtLog.java",
              "type": "",
              "code": "\n    /* Log at 'info' level */\n    public static void info(Class<?> cls, String fmt, Object...args) {\n        info(log(cls), fmt, args) ;\n    }\n\n    /* Log at 'info' level */"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 18,
      "fileName": "Log.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 80,
              "startColumn": 53,
              "endLine": 80,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    public TripleTable getTripleTable()     { return tripleTable ; }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 63,
              "endLine": 81,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 72,
              "startColumn": 42,
              "endLine": 72,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 74,
              "startColumn": 63,
              "endLine": 74,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 17,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 74,
              "startColumn": 40,
              "endLine": 74,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 18,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 19,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 20,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 21,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 22,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 23,
              "variableName": "Node node",
              "startLine": 51,
              "startColumn": 42,
              "endLine": 51,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node) {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null )\n            return nid;"
            },
            {
              "step": 24,
              "variableName": "node",
              "startLine": 52,
              "startColumn": 36,
              "endLine": 52,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public final NodeId getNodeIdForNode(Node node) {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null )\n            return nid;\n        return super.getNodeIdForNode(node);"
            },
            {
              "step": 25,
              "variableName": "Node node",
              "startLine": 152,
              "startColumn": 33,
              "endLine": 152,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/NodeId.java",
              "type": "Node_URI",
              "code": "    public static final int SPECIAL            = 0xFF ;\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 26,
              "variableName": "\"Null node: \" + node",
              "startLine": 154,
              "startColumn": 36,
              "endLine": 154,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/NodeId.java",
              "type": "String",
              "code": "    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;\n        }\n"
            },
            {
              "step": 27,
              "variableName": "String msg",
              "startLine": 53,
              "startColumn": 44,
              "endLine": 53,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "String",
              "code": "        log(object).debug(msg, th) ;\n    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n"
            },
            {
              "step": 28,
              "variableName": "msg",
              "startLine": 54,
              "startColumn": 26,
              "endLine": 54,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "",
              "code": "    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n\n    public static void warn(Object object, String msg, Throwable th) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 110,
              "startColumn": 63,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = Quad.unionGraph;\n        Iterator<Quad> iterQuads = getDSG().find(g, s, p, o);\n        Iterator<Triple> iter = G.quads2triples(iterQuads);"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 112,
              "startColumn": 56,
              "endLine": 112,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = Quad.unionGraph;\n        Iterator<Quad> iterQuads = getDSG().find(g, s, p, o);\n        Iterator<Triple> iter = G.quads2triples(iterQuads);\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 130,
              "startColumn": 53,
              "endLine": 130,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 131,
              "startColumn": 40,
              "endLine": 131,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 121,
              "startColumn": 50,
              "endLine": 121,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return Iter.iterator(iterator);\n    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 155,
              "startColumn": 42,
              "endLine": 155,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 158,
              "startColumn": 41,
              "endLine": 158,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);\n    }\n\n//    @Override"
            },
            {
              "step": 27,
              "variableName": "Node p",
              "startLine": 63,
              "startColumn": 42,
              "endLine": 63,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 63,
              "endLine": 64,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 29,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 64,
              "startColumn": 40,
              "endLine": 64,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 30,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 31,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 32,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 33,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 34,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 36,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 37,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 38,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 39,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 40,
              "variableName": "\"Null node: \" + node",
              "startLine": 118,
              "startColumn": 36,
              "endLine": 118,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "String",
              "code": "    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;\n        }\n"
            },
            {
              "step": 41,
              "variableName": "String msg",
              "startLine": 53,
              "startColumn": 44,
              "endLine": 53,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "String",
              "code": "        log(object).debug(msg, th) ;\n    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n"
            },
            {
              "step": 42,
              "variableName": "msg",
              "startLine": 54,
              "startColumn": 26,
              "endLine": 54,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "",
              "code": "    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n\n    public static void warn(Object object, String msg, Throwable th) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 59,
              "endLine": 88,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    { return getQuadTable().find(g, s, p, o) ; }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)\n    { return getQuadTable().find(Node.ANY, s, p, o) ; }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 89,
              "startColumn": 47,
              "endLine": 89,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)\n    { return getQuadTable().find(Node.ANY, s, p, o) ; }\n\n    @Override\n    protected void addToDftGraph(Node s, Node p, Node o)"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 83,
              "startColumn": 48,
              "endLine": 83,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 85,
              "startColumn": 66,
              "endLine": 85,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 42,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 85,
              "startColumn": 40,
              "endLine": 85,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 43,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 44,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 45,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 46,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 47,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 48,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 49,
              "variableName": "node",
              "startLine": 57,
              "startColumn": 49,
              "endLine": 57,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }"
            },
            {
              "step": 50,
              "variableName": "Node node",
              "startLine": 51,
              "startColumn": 42,
              "endLine": 51,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node) {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null )\n            return nid;"
            },
            {
              "step": 51,
              "variableName": "node",
              "startLine": 52,
              "startColumn": 36,
              "endLine": 52,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public final NodeId getNodeIdForNode(Node node) {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null )\n            return nid;\n        return super.getNodeIdForNode(node);"
            },
            {
              "step": 52,
              "variableName": "Node node",
              "startLine": 152,
              "startColumn": 33,
              "endLine": 152,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/NodeId.java",
              "type": "Node_URI",
              "code": "    public static final int SPECIAL            = 0xFF ;\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 53,
              "variableName": "\"Failed to process \"+node",
              "startLine": 166,
              "startColumn": 36,
              "endLine": 166,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/NodeId.java",
              "type": "String",
              "code": "            return null;\n        try { return inline$(node) ; }\n        catch (Throwable th) {\n            Log.warn(NodeId.class, \"Failed to process \"+node) ;\n            return null ;\n        }\n    }"
            },
            {
              "step": 54,
              "variableName": "String msg",
              "startLine": 53,
              "startColumn": 44,
              "endLine": 53,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "String",
              "code": "        log(object).debug(msg, th) ;\n    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n"
            },
            {
              "step": 55,
              "variableName": "msg",
              "startLine": 54,
              "startColumn": 26,
              "endLine": 54,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "",
              "code": "    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n\n    public static void warn(Object object, String msg, Throwable th) {"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 135,
              "startColumn": 71,
              "endLine": 135,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o) {\n        return findStorage(g, s, p, o);\n    }\n"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 136,
              "startColumn": 34,
              "endLine": 136,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o) {\n        return findStorage(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 125,
              "startColumn": 56,
              "endLine": 125,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 126,
              "startColumn": 43,
              "endLine": 126,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 148,
              "startColumn": 48,
              "endLine": 148,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 151,
              "startColumn": 42,
              "endLine": 151,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 66,
              "endLine": 80,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 27,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 80,
              "startColumn": 40,
              "endLine": 80,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 28,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 29,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 30,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 31,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 32,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 33,
              "variableName": "Node node",
              "startLine": 46,
              "startColumn": 36,
              "endLine": 46,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node);\n    }\n"
            },
            {
              "step": 34,
              "variableName": "node",
              "startLine": 47,
              "startColumn": 43,
              "endLine": 47,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 36,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 37,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 38,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 39,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 40,
              "variableName": "\"Failed to process \"+node",
              "startLine": 133,
              "startColumn": 36,
              "endLine": 133,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "String",
              "code": "\n        try { return inline$(node); }\n        catch (Throwable th) {\n            Log.warn(NodeId.class, \"Failed to process \"+node);\n            return null;\n        }\n    }"
            },
            {
              "step": 41,
              "variableName": "String msg",
              "startLine": 53,
              "startColumn": 44,
              "endLine": 53,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "String",
              "code": "        log(object).debug(msg, th) ;\n    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n"
            },
            {
              "step": 42,
              "variableName": "msg",
              "startLine": 54,
              "startColumn": 26,
              "endLine": 54,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-base/src/main/java/org/apache/jena/atlas/logging/Log.java",
              "type": "",
              "code": "    }\n\n    public static void warn(Object object, String msg) {\n        log(object).warn(msg) ;\n    }\n\n    public static void warn(Object object, String msg, Throwable th) {"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 19,
      "fileName": "ErrorHandlerCLI.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 20,
      "fileName": "ErrorHandlerCLI.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 104,
              "startColumn": 34,
              "endLine": 104,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            },
            {
              "step": 23,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 24,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 25,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 104,
              "startColumn": 23,
              "endLine": 104,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            },
            {
              "step": 23,
              "variableName": "String message",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 24,
              "variableName": "message",
              "startLine": 104,
              "startColumn": 34,
              "endLine": 104,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            },
            {
              "step": 25,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 26,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 27,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 104,
              "startColumn": 23,
              "endLine": 104,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            },
            {
              "step": 11,
              "variableName": "String message",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 12,
              "variableName": "message",
              "startLine": 104,
              "startColumn": 34,
              "endLine": 104,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            },
            {
              "step": 13,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 15,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 104,
              "startColumn": 23,
              "endLine": 104,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 102,
              "startColumn": 27,
              "endLine": 102,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 104,
              "startColumn": 34,
              "endLine": 104,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            },
            {
              "step": 23,
              "variableName": "String message",
              "startLine": 66,
              "startColumn": 37,
              "endLine": 66,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "        return SysRIOT.strictMode ;\n    }\n\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )"
            },
            {
              "step": 24,
              "variableName": "message",
              "startLine": 68,
              "startColumn": 20,
              "endLine": 68,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/SysRIOT.java",
              "type": "String",
              "code": "\n    public static String fmtMessage(String message, long line, long col) {\n        if ( col == -1 && line == -1 )\n            return message;\n        if ( col == -1 && line != -1 )\n            return String.format(\"[line: %d] %s\", line, message);\n        if ( col != -1 && line == -1 )"
            },
            {
              "step": 25,
              "variableName": "fmtMessage(message, line, col)",
              "startLine": 104,
              "startColumn": 23,
              "endLine": 104,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report an error */\n    private void logError(String message, long line, long col) {\n        if ( log != null )\n            log.error(fmtMessage(message, line, col)) ;\n    }\n\n    /** report a catastrophic error */"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 21,
      "fileName": "ErrorHandlerCLI.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 68,
              "startColumn": 88,
              "endLine": 68,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken)",
              "startLine": 68,
              "startColumn": 13,
              "endLine": 68,
              "endColumn": 95,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        Token xToken = nextToken();    // Maybe DOT\n        if ( xToken.getType() == TokenType.EOF )\n            exception(xToken, \"Premature end of file: Quad not terminated by DOT: %s\", xToken);\n\n        // Process graph node first, before S,P,O\n        // to set bnode label scope (if not global)"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 76,
              "startColumn": 29,
              "endLine": 76,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 143,
              "startColumn": 42,
              "endLine": 143,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "        return NodeFactory.createTripleTerm(t);\n    }\n\n    protected final void checkIRIOrBNode(Token token) {\n        if ( token.hasType(TokenType.IRI) )\n            return;\n        if ( token.hasType(TokenType.BNODE) )"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 148,
              "startColumn": 60,
              "endLine": 148,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 3,
              "variableName": "exception(token, \"Expected BNode or IRI: Got: %s\", token)",
              "startLine": 148,
              "startColumn": 9,
              "endLine": 148,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNTuple.java",
              "type": "Object[] [[]] : Token",
              "code": "            return;\n        if ( token.hasType(TokenType.BNODE) )\n            return;\n        exception(token, \"Expected BNode or IRI: Got: %s\", token);\n    }\n\n    protected final void checkIRI(Token token) {"
            },
            {
              "step": 4,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 5,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 6,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 9,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 10,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 11,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 12,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 13,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 14,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 15,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 17,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 18,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 21,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 22,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 77,
              "startColumn": 29,
              "endLine": 77,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "        if ( xToken.getType() != TokenType.DOT ) {\n            // Allow bNodes for graph names.\n            checkIRIOrBNode(xToken);\n            c = tokenAsNode(xToken);\n            xToken = nextToken();\n            currentGraph = c;\n        } else {"
            },
            {
              "step": 1,
              "variableName": "Token token",
              "startLine": 93,
              "startColumn": 38,
              "endLine": 93,
              "endColumn": 49,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}"
            },
            {
              "step": 2,
              "variableName": "token",
              "startLine": 94,
              "startColumn": 45,
              "endLine": 94,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n    @Override\n    protected final Node tokenAsNode(Token token) {\n        return profile.create(currentGraph, token);\n    }\n}\n"
            },
            {
              "step": 3,
              "variableName": "Token token",
              "startLine": 285,
              "startColumn": 49,
              "endLine": 285,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "    }\n\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n"
            },
            {
              "step": 4,
              "variableName": "token",
              "startLine": 286,
              "startColumn": 43,
              "endLine": 286,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "\n    @Override\n    public final Node create(Node currentGraph, Token token) {\n        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {"
            },
            {
              "step": 5,
              "variableName": "Token token",
              "startLine": 289,
              "startColumn": 80,
              "endLine": 289,
              "endColumn": 91,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "Token",
              "code": "        return create(this, currentGraph, token);\n    }\n\n    private final static Node create(ParserProfile profile, Node currentGraph, Token token) {\n        // Dispatches to the underlying ParserFactory operation via a create* method.\n        long line = token.getLine();\n        long col = token.getColumn();"
            },
            {
              "step": 6,
              "variableName": "\"Not a valid token for an RDF term: \" + token",
              "startLine": 352,
              "startColumn": 49,
              "endLine": 352,
              "endColumn": 94,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/system/ParserProfileStd.java",
              "type": "String",
              "code": "                Node x = profile.createNodeFromToken(currentGraph, token, line, col);\n                if ( x != null )\n                    return x;\n                profile.getErrorHandler().fatal(\"Not a valid token for an RDF term: \" + token, line, col);\n                return null;\n            }\n        }"
            },
            {
              "step": 7,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 8,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 9,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 10,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "xToken",
              "startLine": 87,
              "startColumn": 65,
              "endLine": 87,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 1,
              "variableName": "exception(xToken, \"Quad not terminated by DOT: %s\", xToken)",
              "startLine": 87,
              "startColumn": 13,
              "endLine": 87,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangNQuads.java",
              "type": "Object[] [[]] : Token",
              "code": "\n        // Check end of quad\n        if ( xToken.getType() != TokenType.DOT )\n            exception(xToken, \"Quad not terminated by DOT: %s\", xToken);\n\n        return profile.createQuad(c, s, p, o, token.getLine(), token.getColumn());\n    }"
            },
            {
              "step": 2,
              "variableName": "Object... args",
              "startLine": 145,
              "startColumn": 61,
              "endLine": 145,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "        nextToken();\n    }\n\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else"
            },
            {
              "step": 3,
              "variableName": "args",
              "startLine": 147,
              "startColumn": 42,
              "endLine": 147,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "Object[] [[]] : Token",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 4,
              "variableName": "String.format(msg, args)",
              "startLine": 147,
              "startColumn": 23,
              "endLine": 147,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void exception(Token token, String msg, Object... args) {\n        if ( token != null )\n            exception(String.format(msg, args), token.getLine(), token.getColumn());\n        else\n            exception(String.format(msg, args), -1, -1);\n    }"
            },
            {
              "step": 5,
              "variableName": "String msg",
              "startLine": 152,
              "startColumn": 36,
              "endLine": 152,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "            exception(String.format(msg, args), -1, -1);\n    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n"
            },
            {
              "step": 6,
              "variableName": "msg",
              "startLine": 153,
              "startColumn": 47,
              "endLine": 153,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 7,
              "variableName": "String msg",
              "startLine": 27,
              "startColumn": 31,
              "endLine": 27,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    final private long column ;\n    final private String message ;\n\n    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; "
            },
            {
              "step": 8,
              "variableName": "msg",
              "startLine": 30,
              "startColumn": 24,
              "endLine": 30,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 9,
              "variableName": "this",
              "startLine": 30,
              "startColumn": 9,
              "endLine": 30,
              "endColumn": 13,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "    public RiotParseException(String msg, long line, long column)\n    {\n        super(SysRIOT.fmtMessage(msg,line,column)); \n        this.message = msg ; \n        this.line = line ;\n        this.column = column ;\n    }"
            },
            {
              "step": 10,
              "variableName": "new RiotParseException(msg, line, col)",
              "startLine": 153,
              "startColumn": 24,
              "endLine": 153,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "    }\n\n    protected final void exception(String msg, long line, long col) {\n        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    /** @deprecated use {@link #exception(String, long, long)}*/"
            },
            {
              "step": 11,
              "variableName": "RiotParseException ex",
              "startLine": 162,
              "startColumn": 41,
              "endLine": 162,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "        raiseException(new RiotParseException(msg, line, col));\n    }\n\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;"
            },
            {
              "step": 12,
              "variableName": "ex",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 13,
              "variableName": "getOriginalMessage",
              "startLine": 37,
              "startColumn": 19,
              "endLine": 37,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 14,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "RiotParseException [message] : String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 15,
              "variableName": "message",
              "startLine": 37,
              "startColumn": 52,
              "endLine": 37,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/RiotParseException.java",
              "type": "String",
              "code": "\n    public long getLine()   { return line ; }\n    public long getCol()    { return column ; }\n    public String getOriginalMessage()    { return message ; }\n}\n"
            },
            {
              "step": 16,
              "variableName": "ex.getOriginalMessage()",
              "startLine": 164,
              "startColumn": 32,
              "endLine": 164,
              "endColumn": 55,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/riot/lang/LangEngine.java",
              "type": "String",
              "code": "\n    protected final void raiseException(RiotParseException ex) {\n        if ( errorHandler != null )\n            errorHandler.fatal(ex.getOriginalMessage(), ex.getLine(), ex.getCol());\n        throw ex;\n    }\n}"
            },
            {
              "step": 17,
              "variableName": "String message",
              "startLine": 69,
              "startColumn": 23,
              "endLine": 69,
              "endColumn": 37,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;"
            },
            {
              "step": 18,
              "variableName": "message",
              "startLine": 70,
              "startColumn": 18,
              "endLine": 70,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "\n    @Override\n    public void fatal(String message, long line, long col) {\n        logFatal(message, line, col) ;\n        this.errorCount++;\n        throw new RiotException(fmtMessage(message, line, col)) ;\n    }"
            },
            {
              "step": 19,
              "variableName": "String message",
              "startLine": 108,
              "startColumn": 27,
              "endLine": 108,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "String",
              "code": "    }\n\n    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }"
            },
            {
              "step": 20,
              "variableName": "message",
              "startLine": 110,
              "startColumn": 22,
              "endLine": 110,
              "endColumn": 29,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/riotcmd/ErrorHandlerCLI.java",
              "type": "",
              "code": "    /** report a catastrophic error */\n    private void logFatal(String message, long line, long col) {\n        if ( log != null )\n            logError(message, line, col) ;\n    }\n}\n"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 22,
      "fileName": "CrossOriginFilter.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "allowedCredentialsConfig",
              "startLine": 266,
              "startColumn": 51,
              "endLine": 266,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/servlets/CrossOriginFilter.java",
              "type": "String",
              "code": "                ALLOWED_METHODS_PARAM + \" = \" + allowedMethodsConfig + \", \" +\n                ALLOWED_HEADERS_PARAM + \" = \" + allowedHeadersConfig + \", \" +\n                PREFLIGHT_MAX_AGE_PARAM + \" = \" + preflightMaxAgeConfig + \", \" +\n                ALLOW_CREDENTIALS_PARAM + \" = \" + allowedCredentialsConfig + \",\" +\n                EXPOSED_HEADERS_PARAM + \" = \" + exposedHeadersConfig + \",\" +\n                CHAIN_PREFLIGHT_PARAM + \" = \" + chainPreflightConfig\n            );"
            },
            {
              "step": 1,
              "variableName": "\"Cross-origin filter configuration: \" +",
              "startLine": 260,
              "startColumn": 23,
              "endLine": 268,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/servlets/CrossOriginFilter.java",
              "type": "",
              "code": "\n        if (LOG.isDebugEnabled())\n        {\n            LOG.debug(\"Cross-origin filter configuration: \" +\n                ALLOWED_ORIGINS_PARAM + \" = \" + allowedOriginsConfig + \", \" +\n                ALLOWED_TIMING_ORIGINS_PARAM + \" = \" + allowedTimingOriginsConfig + \", \" +\n                ALLOWED_METHODS_PARAM + \" = \" + allowedMethodsConfig + \", \" +"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "ALLOW_CREDENTIALS_PARAM",
              "startLine": 266,
              "startColumn": 17,
              "endLine": 266,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/servlets/CrossOriginFilter.java",
              "type": "String",
              "code": "                ALLOWED_METHODS_PARAM + \" = \" + allowedMethodsConfig + \", \" +\n                ALLOWED_HEADERS_PARAM + \" = \" + allowedHeadersConfig + \", \" +\n                PREFLIGHT_MAX_AGE_PARAM + \" = \" + preflightMaxAgeConfig + \", \" +\n                ALLOW_CREDENTIALS_PARAM + \" = \" + allowedCredentialsConfig + \",\" +\n                EXPOSED_HEADERS_PARAM + \" = \" + exposedHeadersConfig + \",\" +\n                CHAIN_PREFLIGHT_PARAM + \" = \" + chainPreflightConfig\n            );"
            },
            {
              "step": 1,
              "variableName": "\"Cross-origin filter configuration: \" +",
              "startLine": 260,
              "startColumn": 23,
              "endLine": 268,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-core/src/main/java/org/apache/jena/fuseki/servlets/CrossOriginFilter.java",
              "type": "",
              "code": "\n        if (LOG.isDebugEnabled())\n        {\n            LOG.debug(\"Cross-origin filter configuration: \" +\n                ALLOWED_ORIGINS_PARAM + \" = \" + allowedOriginsConfig + \", \" +\n                ALLOWED_TIMING_ORIGINS_PARAM + \" = \" + allowedTimingOriginsConfig + \", \" +\n                ALLOWED_METHODS_PARAM + \" = \" + allowedMethodsConfig + \", \" +"
            }
          ],
          "label": "No"
        }
      ]
    },
    {
      "resultIndex": 24,
      "fileName": "NodeTableLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 80,
              "startColumn": 53,
              "endLine": 80,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    public TripleTable getTripleTable()     { return tripleTable ; }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 63,
              "endLine": 81,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 72,
              "startColumn": 42,
              "endLine": 72,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 74,
              "startColumn": 63,
              "endLine": 74,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 17,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 74,
              "startColumn": 40,
              "endLine": 74,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 18,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 19,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 20,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 21,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 22,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 23,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 24,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 59,
              "endLine": 88,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    { return getQuadTable().find(g, s, p, o) ; }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)\n    { return getQuadTable().find(Node.ANY, s, p, o) ; }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 89,
              "startColumn": 47,
              "endLine": 89,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)\n    { return getQuadTable().find(Node.ANY, s, p, o) ; }\n\n    @Override\n    protected void addToDftGraph(Node s, Node p, Node o)"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 83,
              "startColumn": 48,
              "endLine": 83,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 85,
              "startColumn": 66,
              "endLine": 85,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 27,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 85,
              "startColumn": 40,
              "endLine": 85,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 28,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 29,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 30,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 31,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 32,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 33,
              "variableName": "Node node",
              "startLine": 43,
              "startColumn": 36,
              "endLine": 43,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n"
            },
            {
              "step": 34,
              "variableName": "node",
              "startLine": 44,
              "startColumn": 43,
              "endLine": 44,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 36,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 84,
              "startColumn": 71,
              "endLine": 84,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)\n    { return getQuadTable().find(g, s, p, o) ; }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 85,
              "startColumn": 40,
              "endLine": 85,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)\n    { return getQuadTable().find(g, s, p, o) ; }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 83,
              "startColumn": 48,
              "endLine": 83,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 85,
              "startColumn": 66,
              "endLine": 85,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 42,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 85,
              "startColumn": 40,
              "endLine": 85,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 43,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 44,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 45,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 46,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 47,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 48,
              "variableName": "Node node",
              "startLine": 90,
              "startColumn": 36,
              "endLine": 90,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "\n    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node)  { return _idForNode(node, false) ; }\n\n    /** Find the NodeId for a node, allocating a new NodeId if the Node does not yet have a NodeId */\n    @Override"
            },
            {
              "step": 49,
              "variableName": "node",
              "startLine": 90,
              "startColumn": 68,
              "endLine": 90,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "\n    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node)  { return _idForNode(node, false) ; }\n\n    /** Find the NodeId for a node, allocating a new NodeId if the Node does not yet have a NodeId */\n    @Override"
            },
            {
              "step": 50,
              "variableName": "Node node",
              "startLine": 138,
              "startColumn": 31,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Node ==> NodeId\n    private NodeId _idForNode(Node node, boolean allocate)\n    {\n        if ( node == Node.ANY )\n            return NodeId.NodeIdAny ;"
            },
            {
              "step": 51,
              "variableName": "node",
              "startLine": 157,
              "startColumn": 53,
              "endLine": 157,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "            if ( allocate )\n                nodeId = baseTable.getAllocateNodeId(node) ;\n            else\n                nodeId = baseTable.getNodeIdForNode(node) ;\n            // Ensure caches have it.  Includes recording \"no such node\"\n            cacheUpdate(node, nodeId) ;\n            return nodeId ;"
            },
            {
              "step": 52,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 53,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 89,
              "startColumn": 63,
              "endLine": 89,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples."
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 82,
              "endLine": 90,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 80,
              "startColumn": 53,
              "endLine": 80,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    public TripleTable getTripleTable()     { return tripleTable ; }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 63,
              "endLine": 81,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 72,
              "startColumn": 42,
              "endLine": 72,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 74,
              "startColumn": 63,
              "endLine": 74,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 21,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 74,
              "startColumn": 40,
              "endLine": 74,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 22,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 23,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 24,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 25,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 26,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 27,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 28,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 25,
      "fileName": "NodeTableLogger.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 80,
              "startColumn": 53,
              "endLine": 80,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    public TripleTable getTripleTable()     { return tripleTable ; }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 63,
              "endLine": 81,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 72,
              "startColumn": 42,
              "endLine": 72,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 74,
              "startColumn": 63,
              "endLine": 74,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 17,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 74,
              "startColumn": 40,
              "endLine": 74,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 18,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 19,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 20,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 21,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 22,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 23,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 24,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            },
            {
              "step": 25,
              "variableName": "String string",
              "startLine": 125,
              "startColumn": 23,
              "endLine": 125,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "        nodeTable.close() ;\n    }\n\n    private void info(String string)\n    {\n        if ( label != null )\n            string = label+\": \"+string ;"
            },
            {
              "step": 26,
              "variableName": "string",
              "startLine": 129,
              "startColumn": 18,
              "endLine": 129,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        if ( label != null )\n            string = label+\": \"+string ;\n        log.info(string) ; \n    }\n\n    @Override"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 59,
              "endLine": 88,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    { return getQuadTable().find(g, s, p, o) ; }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)\n    { return getQuadTable().find(Node.ANY, s, p, o) ; }\n\n    @Override"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 89,
              "startColumn": 47,
              "endLine": 89,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)\n    { return getQuadTable().find(Node.ANY, s, p, o) ; }\n\n    @Override\n    protected void addToDftGraph(Node s, Node p, Node o)"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 83,
              "startColumn": 48,
              "endLine": 83,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 85,
              "startColumn": 66,
              "endLine": 85,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 27,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 85,
              "startColumn": 40,
              "endLine": 85,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 28,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 29,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 30,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 31,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 32,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 33,
              "variableName": "Node node",
              "startLine": 43,
              "startColumn": 36,
              "endLine": 43,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n"
            },
            {
              "step": 34,
              "variableName": "node",
              "startLine": 44,
              "startColumn": 43,
              "endLine": 44,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    @Override"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 36,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            },
            {
              "step": 37,
              "variableName": "String string",
              "startLine": 125,
              "startColumn": 23,
              "endLine": 125,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "        nodeTable.close() ;\n    }\n\n    private void info(String string)\n    {\n        if ( label != null )\n            string = label+\": \"+string ;"
            },
            {
              "step": 38,
              "variableName": "string",
              "startLine": 129,
              "startColumn": 18,
              "endLine": 129,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        if ( label != null )\n            string = label+\": \"+string ;\n        log.info(string) ; \n    }\n\n    @Override"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 84,
              "startColumn": 71,
              "endLine": 84,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)\n    { return getQuadTable().find(g, s, p, o) ; }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 85,
              "startColumn": 40,
              "endLine": 85,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)\n    { return getQuadTable().find(g, s, p, o) ; }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o)"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 83,
              "startColumn": 48,
              "endLine": 83,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 85,
              "startColumn": 66,
              "endLine": 85,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 42,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 85,
              "startColumn": 40,
              "endLine": 85,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter) ;"
            },
            {
              "step": 43,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 44,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 45,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 46,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 47,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 48,
              "variableName": "Node node",
              "startLine": 90,
              "startColumn": 36,
              "endLine": 90,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "\n    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node)  { return _idForNode(node, false) ; }\n\n    /** Find the NodeId for a node, allocating a new NodeId if the Node does not yet have a NodeId */\n    @Override"
            },
            {
              "step": 49,
              "variableName": "node",
              "startLine": 90,
              "startColumn": 68,
              "endLine": 90,
              "endColumn": 72,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "\n    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node)  { return _idForNode(node, false) ; }\n\n    /** Find the NodeId for a node, allocating a new NodeId if the Node does not yet have a NodeId */\n    @Override"
            },
            {
              "step": 50,
              "variableName": "Node node",
              "startLine": 138,
              "startColumn": 31,
              "endLine": 138,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Node ==> NodeId\n    private NodeId _idForNode(Node node, boolean allocate)\n    {\n        if ( node == Node.ANY )\n            return NodeId.NodeIdAny ;"
            },
            {
              "step": 51,
              "variableName": "node",
              "startLine": 157,
              "startColumn": 53,
              "endLine": 157,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "            if ( allocate )\n                nodeId = baseTable.getAllocateNodeId(node) ;\n            else\n                nodeId = baseTable.getNodeIdForNode(node) ;\n            // Ensure caches have it.  Includes recording \"no such node\"\n            cacheUpdate(node, nodeId) ;\n            return nodeId ;"
            },
            {
              "step": 52,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 53,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            },
            {
              "step": 54,
              "variableName": "String string",
              "startLine": 125,
              "startColumn": 23,
              "endLine": 125,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "        nodeTable.close() ;\n    }\n\n    private void info(String string)\n    {\n        if ( label != null )\n            string = label+\": \"+string ;"
            },
            {
              "step": 55,
              "variableName": "string",
              "startLine": 129,
              "startColumn": 18,
              "endLine": 129,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        if ( label != null )\n            string = label+\": \"+string ;\n        log.info(string) ; \n    }\n\n    @Override"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 89,
              "startColumn": 63,
              "endLine": 89,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples."
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 82,
              "endLine": 90,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Iterator<Quad> iterQuads = getDatasetGraphTDB().find(Quad.unionGraph, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 80,
              "startColumn": 53,
              "endLine": 80,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "    public TripleTable getTripleTable()     { return tripleTable ; }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 81,
              "startColumn": 63,
              "endLine": 81,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/DatasetGraphTDB.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o)\n    { return G.triples2quadsDftGraph(getTripleTable().find(s, p, o)) ; }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o)"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 72,
              "startColumn": 42,
              "endLine": 72,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 74,
              "startColumn": 63,
              "endLine": 74,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 21,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 74,
              "startColumn": 40,
              "endLine": 74,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o)\n    {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o) ;\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter) ;"
            },
            {
              "step": 22,
              "variableName": "Node... nodes",
              "startLine": 142,
              "startColumn": 50,
              "endLine": 142,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length] ;\n        try {"
            },
            {
              "step": 23,
              "variableName": "nodes",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 24,
              "variableName": "nodes[i]",
              "startLine": 149,
              "startColumn": 39,
              "endLine": 149,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead() ;\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]) ;\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator() ;\n                n[i] = id ;"
            },
            {
              "step": 25,
              "variableName": "Node node",
              "startLine": 190,
              "startColumn": 38,
              "endLine": 190,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node)\n    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;"
            },
            {
              "step": 26,
              "variableName": "node",
              "startLine": 194,
              "startColumn": 43,
              "endLine": 194,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "    {\n        if (node == null || node == Node.ANY) return NodeId.NodeIdAny ;\n        if (node.isVariable()) throw new TDB1Exception(\"Can't pass variables to NodeTupleTable.find*\") ;\n        return nodeTable.getNodeIdForNode(node) ;\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 27,
              "variableName": "Node node",
              "startLine": 54,
              "startColumn": 36,
              "endLine": 54,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node)\n    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;"
            },
            {
              "step": 28,
              "variableName": "\"getNodeIdForNode(\"+node+\") => \"+nId",
              "startLine": 58,
              "startColumn": 14,
              "endLine": 58,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "    {\n        //info(\"getNodeIdForNode(\"+node+\") =>\") ;\n        NodeId nId = nodeTable.getNodeIdForNode(node) ;\n        info(\"getNodeIdForNode(\"+node+\") => \"+nId) ;\n        return nId ;\n    }\n"
            },
            {
              "step": 29,
              "variableName": "String string",
              "startLine": 125,
              "startColumn": 23,
              "endLine": 125,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "String",
              "code": "        nodeTable.close() ;\n    }\n\n    private void info(String string)\n    {\n        if ( label != null )\n            string = label+\": \"+string ;"
            },
            {
              "step": 30,
              "variableName": "string",
              "startLine": 129,
              "startColumn": 18,
              "endLine": 129,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-tdb1/src/main/java/org/apache/jena/tdb1/store/nodetable/NodeTableLogger.java",
              "type": "",
              "code": "    {\n        if ( label != null )\n            string = label+\": \"+string ;\n        log.info(string) ; \n    }\n\n    @Override"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 26,
      "fileName": "NodeIdInline.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 130,
              "startColumn": 53,
              "endLine": 130,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 131,
              "startColumn": 40,
              "endLine": 131,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 121,
              "startColumn": 50,
              "endLine": 121,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return Iter.iterator(iterator);\n    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 155,
              "startColumn": 42,
              "endLine": 155,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 158,
              "startColumn": 41,
              "endLine": 158,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);\n    }\n\n//    @Override"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 63,
              "startColumn": 42,
              "endLine": 63,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 63,
              "endLine": 64,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 21,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 64,
              "startColumn": 40,
              "endLine": 64,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 22,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 23,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 24,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 25,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 26,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 27,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 28,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 29,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 30,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 31,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 32,
              "variableName": "\"Null node: \" + node",
              "startLine": 118,
              "startColumn": 36,
              "endLine": 118,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;\n        }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 140,
              "startColumn": 59,
              "endLine": 140,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        // Implementations may wish to do better.\n        return findStorage(Node.ANY, s, p, o);\n    }"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 142,
              "startColumn": 41,
              "endLine": 142,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        // Implementations may wish to do better.\n        return findStorage(Node.ANY, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 125,
              "startColumn": 56,
              "endLine": 125,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 126,
              "startColumn": 43,
              "endLine": 126,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "Node p",
              "startLine": 148,
              "startColumn": 48,
              "endLine": 148,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 151,
              "startColumn": 42,
              "endLine": 151,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 66,
              "endLine": 80,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 31,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 80,
              "startColumn": 40,
              "endLine": 80,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 32,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 33,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 34,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 36,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 37,
              "variableName": "Node node",
              "startLine": 46,
              "startColumn": 36,
              "endLine": 46,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node);\n    }\n"
            },
            {
              "step": 38,
              "variableName": "node",
              "startLine": 47,
              "startColumn": 43,
              "endLine": 47,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 40,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 41,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 42,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 43,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 44,
              "variableName": "\"Null node: \" + node",
              "startLine": 118,
              "startColumn": 36,
              "endLine": 118,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;\n        }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 135,
              "startColumn": 71,
              "endLine": 135,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o) {\n        return findStorage(g, s, p, o);\n    }\n"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 136,
              "startColumn": 34,
              "endLine": 136,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o) {\n        return findStorage(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 125,
              "startColumn": 56,
              "endLine": 125,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n"
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 126,
              "startColumn": 43,
              "endLine": 126,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "Node p",
              "startLine": 148,
              "startColumn": 48,
              "endLine": 148,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);"
            },
            {
              "step": 43,
              "variableName": "p",
              "startLine": 151,
              "startColumn": 42,
              "endLine": 151,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 66,
              "endLine": 80,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 46,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 80,
              "startColumn": 40,
              "endLine": 80,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 47,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 48,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 49,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 50,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 51,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 52,
              "variableName": "Node node",
              "startLine": 142,
              "startColumn": 36,
              "endLine": 142,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "\n    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return _idForNode(node, false);\n    }\n"
            },
            {
              "step": 53,
              "variableName": "node",
              "startLine": 143,
              "startColumn": 27,
              "endLine": 143,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return _idForNode(node, false);\n    }\n\n    /**"
            },
            {
              "step": 54,
              "variableName": "Node node",
              "startLine": 219,
              "startColumn": 31,
              "endLine": 219,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Node ==> NodeId\n    private NodeId _idForNode(Node node, boolean allocate) {\n        if ( node == Node.ANY )\n            return NodeId.NodeIdAny;\n        // Try once outside the synchronized"
            },
            {
              "step": 55,
              "variableName": "node",
              "startLine": 241,
              "startColumn": 57,
              "endLine": 241,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "                    // Known not be in the baseTable.\n                    return NodeId.NodeDoesNotExist;\n                else\n                    nodeId = baseTable.getNodeIdForNode(node);\n            }\n            // Ensure caches have it. Includes recording \"no such node\"\n            cacheUpdate(node, nodeId);"
            },
            {
              "step": 56,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 57,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 58,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 59,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 60,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 61,
              "variableName": "\"Null node: \" + node",
              "startLine": 118,
              "startColumn": 36,
              "endLine": 118,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;\n        }\n"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 110,
              "startColumn": 63,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = Quad.unionGraph;\n        Iterator<Quad> iterQuads = getDSG().find(g, s, p, o);\n        Iterator<Triple> iter = G.quads2triples(iterQuads);"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 112,
              "startColumn": 56,
              "endLine": 112,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = Quad.unionGraph;\n        Iterator<Quad> iterQuads = getDSG().find(g, s, p, o);\n        Iterator<Triple> iter = G.quads2triples(iterQuads);\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 130,
              "startColumn": 53,
              "endLine": 130,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 131,
              "startColumn": 40,
              "endLine": 131,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 121,
              "startColumn": 50,
              "endLine": 121,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return Iter.iterator(iterator);\n    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 155,
              "startColumn": 42,
              "endLine": 155,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 158,
              "startColumn": 41,
              "endLine": 158,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);\n    }\n\n//    @Override"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 63,
              "startColumn": 42,
              "endLine": 63,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 63,
              "endLine": 64,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 25,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 64,
              "startColumn": 40,
              "endLine": 64,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 26,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 27,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 28,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 29,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 30,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 31,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 32,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 33,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 34,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 36,
              "variableName": "\"Null node: \" + node",
              "startLine": 118,
              "startColumn": 36,
              "endLine": 118,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;\n        }\n"
            }
          ],
          "label": "Yes"
        }
      ]
    },
    {
      "resultIndex": 27,
      "fileName": "NodeIdInline.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 119,
              "startColumn": 64,
              "endLine": 119,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;\n    }\n"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 130,
              "startColumn": 53,
              "endLine": 130,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 131,
              "startColumn": 40,
              "endLine": 131,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n\n    @Override"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 121,
              "startColumn": 50,
              "endLine": 121,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return Iter.iterator(iterator);\n    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 155,
              "startColumn": 42,
              "endLine": 155,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 158,
              "startColumn": 41,
              "endLine": 158,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);\n    }\n\n//    @Override"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 63,
              "startColumn": 42,
              "endLine": 63,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 63,
              "endLine": 64,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 21,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 64,
              "startColumn": 40,
              "endLine": 64,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 22,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 23,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 24,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 25,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 26,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 27,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 28,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 29,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 30,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 31,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 32,
              "variableName": "\"Failed to process \"+node",
              "startLine": 133,
              "startColumn": 36,
              "endLine": 133,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "\n        try { return inline$(node); }\n        catch (Throwable th) {\n            Log.warn(NodeId.class, \"Failed to process \"+node);\n            return null;\n        }\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 178,
              "startColumn": 50,
              "endLine": 178,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 180,
              "startColumn": 42,
              "endLine": 180,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphTxn.java",
              "type": "Node_URI",
              "code": "    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        if ( ISOLATE )\n            return isolate(get().find(s, p, o));\n        return new IteratorTxn<Triple>(this, get().find(s, p, o));\n    }\n"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 88,
              "startColumn": 62,
              "endLine": 88,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    public void sync() { }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 90,
              "startColumn": 39,
              "endLine": 90,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphViewSwitchable.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        // This breaks the cycle because super.find will call here again.\n        return getBaseGraph().find(s, p, o);\n    }\n\n    private DatasetGraphTDB getDSG() {"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 127,
              "startColumn": 63,
              "endLine": 127,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        return ( gn == null ) ? Quad.defaultGraphNodeGenerated : gn ;\n    }\n\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = graphNode(graphName) ;\n        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 132,
              "startColumn": 60,
              "endLine": 132,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "        // Implementations may wish to do better so this is separated out.\n        // For example, Iter.distinctAdjacent is a lot cheaper than Iter.distinct\n        // but assumes things come back in a particular order\n        Iterator<Quad> iterQuads = getDataset().find(g, s, p, o) ;\n        Iterator<Triple> iter = G.quads2triples(iterQuads) ;\n        // Suppress duplicates after projecting to triples.\n        iter = Iter.distinct(iter) ;"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 49,
              "startColumn": 33,
              "endLine": 49,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;\n    }\n    "
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 59,
              "startColumn": 45,
              "endLine": 59,
              "endColumn": 46,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;\n        else if ( isWildcard(g) )\n            qIter = findInAnyNamedGraphs(s, p, o) ;\n        else if ( Quad.isDefaultGraph(g) )\n            qIter = findInDftGraph(s, p, o) ;\n        else"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 140,
              "startColumn": 59,
              "endLine": 140,
              "endColumn": 65,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        // Implementations may wish to do better.\n        return findStorage(Node.ANY, s, p, o);\n    }"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 142,
              "startColumn": 41,
              "endLine": 142,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected Iterator<Quad> findInAnyNamedGraphs(Node s, Node p, Node o) {\n        // Implementations may wish to do better.\n        return findStorage(Node.ANY, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 25,
              "variableName": "Node p",
              "startLine": 125,
              "startColumn": 56,
              "endLine": 125,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n"
            },
            {
              "step": 26,
              "variableName": "p",
              "startLine": 126,
              "startColumn": 43,
              "endLine": 126,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 27,
              "variableName": "Node p",
              "startLine": 148,
              "startColumn": 48,
              "endLine": 148,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);"
            },
            {
              "step": 28,
              "variableName": "p",
              "startLine": 151,
              "startColumn": 42,
              "endLine": 151,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 29,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 30,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 66,
              "endLine": 80,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 31,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 80,
              "startColumn": 40,
              "endLine": 80,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 32,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 33,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 34,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 36,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 37,
              "variableName": "Node node",
              "startLine": 46,
              "startColumn": 36,
              "endLine": 46,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node);\n    }\n"
            },
            {
              "step": 38,
              "variableName": "node",
              "startLine": 47,
              "startColumn": 43,
              "endLine": 47,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    @Override"
            },
            {
              "step": 39,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 40,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 41,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 42,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 43,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 44,
              "variableName": "\"Failed to process \"+node",
              "startLine": 133,
              "startColumn": 36,
              "endLine": 133,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "\n        try { return inline$(node); }\n        catch (Throwable th) {\n            Log.warn(NodeId.class, \"Failed to process \"+node);\n            return null;\n        }\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 50,
              "endLine": 79,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n"
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 30,
              "endLine": 80,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphWrapper.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        return get().find(s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 231,
              "startColumn": 63,
              "endLine": 231,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 232,
              "startColumn": 47,
              "endLine": 232,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 190,
              "startColumn": 47,
              "endLine": 190,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 191,
              "startColumn": 60,
              "endLine": 191,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 15,
              "variableName": "Node n",
              "startLine": 109,
              "startColumn": 36,
              "endLine": 109,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    private static Node anyToNull( Node n )\n    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)"
            },
            {
              "step": 16,
              "variableName": "n == null ? Node.ANY : n",
              "startLine": 110,
              "startColumn": 14,
              "endLine": 110,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "... : Node_URI",
              "code": "    { return Node.ANY.equals( n ) ? null : n; }\n\n    private static Node nullToAny( Node n )\n    { return n == null ? Node.ANY : n; }\n\n    private static boolean isAny(Node n)\n    { return n == null || Node.ANY.equals(n); }"
            },
            {
              "step": 17,
              "variableName": "nullToAny( p )",
              "startLine": 191,
              "startColumn": 49,
              "endLine": 191,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 18,
              "variableName": "Node p",
              "startLine": 184,
              "startColumn": 41,
              "endLine": 184,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static int hashCode( Node s, Node p, Node o )\n    { return (s.hashCode() >> 1) ^ p.hashCode() ^ (o.hashCode() << 1); }\n\n    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);"
            },
            {
              "step": 19,
              "variableName": "p",
              "startLine": 187,
              "startColumn": 30,
              "endLine": 187,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 20,
              "variableName": "Node p",
              "startLine": 39,
              "startColumn": 28,
              "endLine": 39,
              "endColumn": 34,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "{\n\tprivate final Node subj, pred, obj;\n\n\tprotected Triple( Node s, Node p, Node o ) {\n\t    if (s == null) throw new UnsupportedOperationException( \"subject cannot be null\" );\n\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );"
            },
            {
              "step": 21,
              "variableName": "p",
              "startLine": 44,
              "startColumn": 13,
              "endLine": 44,
              "endColumn": 14,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 22,
              "variableName": "pred",
              "startLine": 44,
              "startColumn": 6,
              "endLine": 44,
              "endColumn": 10,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t    if (p == null) throw new UnsupportedOperationException( \"predicate cannot be null\" );\n\t    if (o == null) throw new UnsupportedOperationException( \"object cannot be null\" );\n\t    subj = s;\n\t    pred = p;\n\t    obj = o;\n\t}\n"
            },
            {
              "step": 23,
              "variableName": "new Triple(s, p, o)",
              "startLine": 187,
              "startColumn": 16,
              "endLine": 187,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public static Triple create(Node s, Node p, Node o) {\n        if ( isAny(s) && isAny(p) && isAny(o) )\n            return Triple.ANY;\n        return new Triple(s, p, o);\n    }\n\n    public static Triple createMatch( Node s, Node p, Node o )"
            },
            {
              "step": 24,
              "variableName": "Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) )",
              "startLine": 191,
              "startColumn": 18,
              "endLine": 191,
              "endColumn": 81,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    public static Triple createMatch( Node s, Node p, Node o )\n        { return Triple.create( nullToAny( s ), nullToAny( p ), nullToAny( o ) ); }\n\n    /**\n        A Triple that has {@link Node#ANY} in all fields."
            },
            {
              "step": 25,
              "variableName": "Triple.createMatch( s, p, o )",
              "startLine": 232,
              "startColumn": 24,
              "endLine": 232,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }\n\n    /**\n\t\tAnswer <code>true</code> iff <code>t</code> is in the graph as revealed by"
            },
            {
              "step": 26,
              "variableName": "Triple m",
              "startLine": 215,
              "startColumn": 48,
              "endLine": 215,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "\t}\n\n    @Override\n    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;"
            },
            {
              "step": 27,
              "variableName": "m",
              "startLine": 218,
              "startColumn": 30,
              "endLine": 218,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    public final ExtendedIterator<Triple> find(Triple m)\n    {\n        checkOpen() ;\n        return graphBaseFind(m) ;\n    }\n\n    protected abstract ExtendedIterator<Triple> graphBaseFind( Triple triplePattern );"
            },
            {
              "step": 28,
              "variableName": "Triple m",
              "startLine": 98,
              "startColumn": 54,
              "endLine": 98,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Triple m) {\n        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct."
            },
            {
              "step": 29,
              "variableName": "m",
              "startLine": 102,
              "startColumn": 61,
              "endLine": 102,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        if ( graphs == null ) {\n            // This produces unique quads with the same graph node,\n            // hence the triples are distinct.\n            return quadsToTriples(dataset, Quad.unionGraph, m);\n        }\n        if ( graphs.isEmpty() )\n            return NullIterator.instance();"
            },
            {
              "step": 30,
              "variableName": "Triple m",
              "startLine": 119,
              "startColumn": 94,
              "endLine": 119,
              "endColumn": 102,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "        return WrappedIterator.createNoRemove(Iter.distinct(iter));\n    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);"
            },
            {
              "step": 31,
              "variableName": "m",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 32,
              "variableName": "getPredicate",
              "startLine": 85,
              "startColumn": 23,
              "endLine": 85,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "    /**\n     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Triple [pred] : Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 34,
              "variableName": "pred",
              "startLine": 86,
              "startColumn": 11,
              "endLine": 86,
              "endColumn": 15,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/Triple.java",
              "type": "Node_URI",
              "code": "     * @return the predicate of the triple\n     */\n    public final Node getPredicate()\n\t{ return pred; }\n\n    /**\n     * @return the object of the triple"
            },
            {
              "step": 35,
              "variableName": "m.getPredicate()",
              "startLine": 120,
              "startColumn": 70,
              "endLine": 120,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/graph/GraphUnionRead.java",
              "type": "Node_URI",
              "code": "    }\n\n    private static ExtendedIterator<Triple> quadsToTriples(DatasetGraph dsg, Node graphName, Triple m) {\n        Iterator<Quad> qIter = dsg.findNG(graphName, m.getSubject(), m.getPredicate(), m.getObject());\n        Iterator<Triple> tIter = Iter.map(qIter, quad->quad.asTriple());\n        return WrappedIterator.createNoRemove(tIter);\n    }"
            },
            {
              "step": 36,
              "variableName": "Node p",
              "startLine": 54,
              "startColumn": 50,
              "endLine": 54,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    }\n    \n    @Override\n    public Iterator<Quad> findNG(Node g, Node s, Node p , Node o) {\n        Iterator<Quad> qIter ;\n        if ( Quad.isUnionGraph(g))\n            qIter = findQuadsInUnionGraph(s, p, o) ;"
            },
            {
              "step": 37,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 52,
              "endLine": 64,
              "endColumn": 53,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "            qIter = findInDftGraph(s, p, o) ;\n        else\n            // Not wildcard, not union graph, not default graph.\n            qIter = findInSpecificNamedGraph(g, s, p, o) ;\n        if ( qIter == null )\n            return Iter.nullIterator() ;\n        return qIter ;"
            },
            {
              "step": 38,
              "variableName": "Node p",
              "startLine": 135,
              "startColumn": 71,
              "endLine": 135,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o) {\n        return findStorage(g, s, p, o);\n    }\n"
            },
            {
              "step": 39,
              "variableName": "p",
              "startLine": 136,
              "startColumn": 34,
              "endLine": 136,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInSpecificNamedGraph(Node g, Node s, Node p, Node o) {\n        return findStorage(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 40,
              "variableName": "Node p",
              "startLine": 125,
              "startColumn": 56,
              "endLine": 125,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n"
            },
            {
              "step": 41,
              "variableName": "p",
              "startLine": 126,
              "startColumn": 43,
              "endLine": 126,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {\n        return isolate(storage.find(g, s, p, o));\n    }\n\n    @Override"
            },
            {
              "step": 42,
              "variableName": "Node p",
              "startLine": 148,
              "startColumn": 48,
              "endLine": 148,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);"
            },
            {
              "step": 43,
              "variableName": "p",
              "startLine": 151,
              "startColumn": 42,
              "endLine": 151,
              "endColumn": 43,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getQuadTable().find(g, s, p, o);\n    }\n\n    @Override"
            },
            {
              "step": 44,
              "variableName": "Node p",
              "startLine": 79,
              "startColumn": 48,
              "endLine": 79,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 45,
              "variableName": "p",
              "startLine": 80,
              "startColumn": 66,
              "endLine": 80,
              "endColumn": 67,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 46,
              "variableName": "table.findAsNodeIds(g, s, p, o)",
              "startLine": 80,
              "startColumn": 40,
              "endLine": 80,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/QuadTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching quads */\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(g, s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Quad> iter2 = TupleLib.convertToQuads(table.getNodeTable(), iter);"
            },
            {
              "step": 47,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 48,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 49,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 50,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 51,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 52,
              "variableName": "Node node",
              "startLine": 142,
              "startColumn": 36,
              "endLine": 142,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "\n    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return _idForNode(node, false);\n    }\n"
            },
            {
              "step": 53,
              "variableName": "node",
              "startLine": 143,
              "startColumn": 27,
              "endLine": 143,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "    /** Find the NodeId for a node, or return NodeId.NodeDoesNotExist */\n    @Override\n    public NodeId getNodeIdForNode(Node node) {\n        return _idForNode(node, false);\n    }\n\n    /**"
            },
            {
              "step": 54,
              "variableName": "Node node",
              "startLine": 219,
              "startColumn": 31,
              "endLine": 219,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Node ==> NodeId\n    private NodeId _idForNode(Node node, boolean allocate) {\n        if ( node == Node.ANY )\n            return NodeId.NodeIdAny;\n        // Try once outside the synchronized"
            },
            {
              "step": 55,
              "variableName": "node",
              "startLine": 241,
              "startColumn": 57,
              "endLine": 241,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableCache.java",
              "type": "Node_URI",
              "code": "                    // Known not be in the baseTable.\n                    return NodeId.NodeDoesNotExist;\n                else\n                    nodeId = baseTable.getNodeIdForNode(node);\n            }\n            // Ensure caches have it. Includes recording \"no such node\"\n            cacheUpdate(node, nodeId);"
            },
            {
              "step": 56,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 57,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 58,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 59,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 60,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 61,
              "variableName": "\"Failed to process \"+node",
              "startLine": 133,
              "startColumn": 36,
              "endLine": 133,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "\n        try { return inline$(node); }\n        catch (Throwable th) {\n            Log.warn(NodeId.class, \"Failed to process \"+node);\n            return null;\n        }\n    }"
            }
          ],
          "label": "Yes"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "FusekiVocabG.pPasswordFile",
              "startLine": 966,
              "startColumn": 61,
              "endLine": 966,
              "endColumn": 87,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        private void processConfAuthentication(Graph config, Node server) {\n            String passwdFile = getAsString(config, server, FusekiVocabG.pPasswordFile);\n            if ( passwdFile != null )\n                passwordFile(passwdFile);\n            String realmStr = getAsString(config, server, FusekiVocabG.pRealm);"
            },
            {
              "step": 1,
              "variableName": "Node property",
              "startLine": 1011,
              "startColumn": 70,
              "endLine": 1011,
              "endColumn": 83,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "        }\n\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;"
            },
            {
              "step": 2,
              "variableName": "property",
              "startLine": 1012,
              "startColumn": 55,
              "endLine": 1012,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-fuseki2/jena-fuseki-main/src/main/java/org/apache/jena/fuseki/main/FusekiServer.java",
              "type": "Node_URI",
              "code": "\n        /** URI or xsd:string as java string. **/\n        private static String getAsString(Graph config, Node server, Node property) {\n            Node n = G.getZeroOrOneSP(config, server, property);\n            if ( n == null )\n                return null;\n            if ( n.isURI() )"
            },
            {
              "step": 3,
              "variableName": "Node predicate",
              "startLine": 248,
              "startColumn": 66,
              "endLine": 248,
              "endColumn": 80,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     * Get object for subject-predicate. Return null for none, object for one, and\n     * exception {@linkplain RDFDataException} if more than one.\n     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }"
            },
            {
              "step": 4,
              "variableName": "predicate",
              "startLine": 250,
              "startColumn": 57,
              "endLine": 250,
              "endColumn": 66,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "     */\n    public static Node getZeroOrOneSP(Graph graph, Node subject, Node predicate) {\n        Objects.requireNonNull(graph, \"graph\");\n        return object(findZeroOneTriple(graph, subject, predicate, Node.ANY));\n    }\n\n    /**"
            },
            {
              "step": 5,
              "variableName": "Node predicate",
              "startLine": 732,
              "startColumn": 72,
              "endLine": 732,
              "endColumn": 86,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )"
            },
            {
              "step": 6,
              "variableName": "predicate",
              "startLine": 733,
              "startColumn": 61,
              "endLine": 733,
              "endColumn": 70,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/G.java",
              "type": "Node_URI",
              "code": "\n    /** Find one triple matching subject-predicate-object. Return null for zero, triple for one or throw {@link RDFDataException} for many. */\n    private static Triple findZeroOneTriple(Graph graph, Node subject, Node predicate, Node object) {\n        ExtendedIterator<Triple> iter = graph.find(subject, predicate, object);\n        try {\n            if ( ! iter.hasNext() )\n                return null;"
            },
            {
              "step": 7,
              "variableName": "Node p",
              "startLine": 167,
              "startColumn": 50,
              "endLine": 167,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public ExtendedIterator<Triple> find(Node s, Node p, Node o) {\n        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter ="
            },
            {
              "step": 8,
              "variableName": "p",
              "startLine": 171,
              "startColumn": 37,
              "endLine": 171,
              "endColumn": 38,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/system/buffering/BufferingGraph.java",
              "type": "Node_URI",
              "code": "        readOperation();\n        Iterator<Triple> extra = findInAdded(s, p, o);\n        Iter<Triple> iter =\n            Iter.iter(get().find(s, p, o))\n                .filter(t->! deletedTriples.contains(t))\n                .append(extra);\n        if ( ! CHECK )"
            },
            {
              "step": 9,
              "variableName": "Node p",
              "startLine": 227,
              "startColumn": 57,
              "endLine": 227,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "        { return graphBaseFind( t ); }\n\n    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n"
            },
            {
              "step": 10,
              "variableName": "p",
              "startLine": 229,
              "startColumn": 34,
              "endLine": 229,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/graph/impl/GraphBase.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final ExtendedIterator<Triple> find( Node s, Node p, Node o )\n        { checkOpen();\n        return graphBaseFind( s, p, o ); }\n\n    protected ExtendedIterator<Triple> graphBaseFind( Node s, Node p, Node o )\n        { return find( Triple.createMatch( s, p, o ) ); }"
            },
            {
              "step": 11,
              "variableName": "Node p",
              "startLine": 115,
              "startColumn": 62,
              "endLine": 115,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;"
            },
            {
              "step": 12,
              "variableName": "p",
              "startLine": 117,
              "startColumn": 38,
              "endLine": 117,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/GraphView.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphBaseFind(Node s, Node p, Node o) {\n        if ( Quad.isUnionGraph(graphName) )\n            return graphUnionFind(s, p, o) ;\n        Node g = graphNode(graphName) ;\n        Iterator<Triple> iter = G.quads2triples(dsg.find(g, s, p, o)) ;\n        return WrappedIterator.createNoRemove(iter) ;"
            },
            {
              "step": 13,
              "variableName": "Node p",
              "startLine": 110,
              "startColumn": 63,
              "endLine": 110,
              "endColumn": 69,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = Quad.unionGraph;\n        Iterator<Quad> iterQuads = getDSG().find(g, s, p, o);\n        Iterator<Triple> iter = G.quads2triples(iterQuads);"
            },
            {
              "step": 14,
              "variableName": "p",
              "startLine": 112,
              "startColumn": 56,
              "endLine": 112,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/GraphTDB.java",
              "type": "Node_URI",
              "code": "    @Override\n    protected ExtendedIterator<Triple> graphUnionFind(Node s, Node p, Node o) {\n        Node g = Quad.unionGraph;\n        Iterator<Quad> iterQuads = getDSG().find(g, s, p, o);\n        Iterator<Triple> iter = G.quads2triples(iterQuads);\n        // Suppress duplicates after projecting to triples.\n        // TDB guarantees that duplicates are adjacent."
            },
            {
              "step": 15,
              "variableName": "Node p",
              "startLine": 45,
              "startColumn": 48,
              "endLine": 45,
              "endColumn": 54,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    \n    /** Implementation of find based on splitting into triples (default graph) and quads (named graph) */\n    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )"
            },
            {
              "step": 16,
              "variableName": "p",
              "startLine": 47,
              "startColumn": 38,
              "endLine": 47,
              "endColumn": 39,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/core/DatasetGraphBaseFind.java",
              "type": "Node_URI",
              "code": "    @Override\n    public Iterator<Quad> find(Node g, Node s, Node p, Node o) {\n        if ( Quad.isDefaultGraph(g))\n            return findInDftGraph(s, p, o) ;\n        if ( ! isWildcard(g) )\n            return findNG(g, s, p, o) ;\n        return findAny(s, p, o) ;"
            },
            {
              "step": 17,
              "variableName": "Node p",
              "startLine": 130,
              "startColumn": 53,
              "endLine": 130,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n"
            },
            {
              "step": 18,
              "variableName": "p",
              "startLine": 131,
              "startColumn": 40,
              "endLine": 131,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "\n    @Override\n    protected Iterator<Quad> findInDftGraph(Node s, Node p, Node o) {\n        return Iter.map(findStorage(s, p, o), t -> Quad.create(Quad.defaultGraphIRI, t));\n    }\n\n    @Override"
            },
            {
              "step": 19,
              "variableName": "Node p",
              "startLine": 121,
              "startColumn": 50,
              "endLine": 121,
              "endColumn": 56,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "        return Iter.iterator(iterator);\n    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n"
            },
            {
              "step": 20,
              "variableName": "p",
              "startLine": 122,
              "startColumn": 40,
              "endLine": 122,
              "endColumn": 41,
              "uri": "jena-jena-5.4.0/jena-db/jena-dboe-storage/src/main/java/org/apache/jena/dboe/storage/system/DatasetGraphStorage.java",
              "type": "Node_URI",
              "code": "    }\n\n    private Iterator<Triple> findStorage(Node s, Node p, Node o) {\n        return isolate(storage.find(s, p, o));\n    }\n\n    private Iterator<Quad> findStorage(Node g, Node s, Node p, Node o) {"
            },
            {
              "step": 21,
              "variableName": "Node p",
              "startLine": 155,
              "startColumn": 42,
              "endLine": 155,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);"
            },
            {
              "step": 22,
              "variableName": "p",
              "startLine": 158,
              "startColumn": 41,
              "endLine": 158,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/StorageTDB.java",
              "type": "Node_URI",
              "code": "    public Iterator<Triple> find(Node s, Node p, Node o) {\n        checkActive();\n        requireTxn();\n        return getTripleTable().find(s, p, o);\n    }\n\n//    @Override"
            },
            {
              "step": 23,
              "variableName": "Node p",
              "startLine": 63,
              "startColumn": 42,
              "endLine": 63,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();"
            },
            {
              "step": 24,
              "variableName": "p",
              "startLine": 64,
              "startColumn": 63,
              "endLine": 64,
              "endColumn": 64,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 25,
              "variableName": "table.findAsNodeIds(s, p, o)",
              "startLine": 64,
              "startColumn": 40,
              "endLine": 64,
              "endColumn": 68,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/TripleTable.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "\n    /** Find matching triples */\n    public Iterator<Triple> find(Node s, Node p, Node o) {\n        Iterator<Tuple<NodeId>> iter = table.findAsNodeIds(s, p, o);\n        if ( iter == null )\n            return Iter.nullIterator();\n        Iterator<Triple> iter2 = TupleLib.convertToTriples(table.getNodeTable(), iter);"
            },
            {
              "step": 26,
              "variableName": "Node... nodes",
              "startLine": 134,
              "startColumn": 50,
              "endLine": 134,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "     * no tuples are found (unknown unknown).\n     */\n    @Override\n    public Iterator<Tuple<NodeId>> findAsNodeIds(Node... nodes)\n    {\n        NodeId n[] = new NodeId[nodes.length];\n        try {"
            },
            {
              "step": 27,
              "variableName": "nodes",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node[] [[]] : Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 28,
              "variableName": "nodes[i]",
              "startLine": 141,
              "startColumn": 39,
              "endLine": 141,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            startRead();\n            for (int i = 0; i < nodes.length; i++)\n            {\n                NodeId id = idForNode(nodes[i]);\n                if (NodeId.isDoesNotExist(id))\n                    return Iter.nullIterator();\n                n[i] = id;"
            },
            {
              "step": 29,
              "variableName": "Node node",
              "startLine": 183,
              "startColumn": 38,
              "endLine": 183,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "\n    // ==== Node\n\n    protected final NodeId idForNode(Node node) {\n        if ( node == null || node == Node.ANY )\n            return NodeId.NodeIdAny;\n        if ( node.isVariable() )"
            },
            {
              "step": 30,
              "variableName": "node",
              "startLine": 188,
              "startColumn": 43,
              "endLine": 188,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetupletable/NodeTupleTableConcrete.java",
              "type": "Node_URI",
              "code": "            return NodeId.NodeIdAny;\n        if ( node.isVariable() )\n            throw new TDBException(\"Can't pass variables to NodeTupleTable.find*\");\n        return nodeTable.getNodeIdForNode(node);\n    }\n\n    // ==== Accessors"
            },
            {
              "step": 31,
              "variableName": "Node node",
              "startLine": 53,
              "startColumn": 42,
              "endLine": 53,
              "endColumn": 51,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;"
            },
            {
              "step": 32,
              "variableName": "node",
              "startLine": 55,
              "startColumn": 36,
              "endLine": 55,
              "endColumn": 40,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/nodetable/NodeTableInline.java",
              "type": "Node_URI",
              "code": "    @Override\n    public final NodeId getNodeIdForNode(Node node)\n    {\n        NodeId nid = NodeId.inline(node);\n        if ( nid != null ) return nid;\n        return super.getNodeIdForNode(node);\n    }"
            },
            {
              "step": 33,
              "variableName": "Node node",
              "startLine": 128,
              "startColumn": 33,
              "endLine": 128,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 34,
              "variableName": "node",
              "startLine": 128,
              "startColumn": 73,
              "endLine": 128,
              "endColumn": 77,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeId.java",
              "type": "Node_URI",
              "code": "    }\n\n    // Migration\n    public static NodeId inline(Node node) { return NodeIdInline.inline(node); }\n    public static boolean hasInlineDatatype(Node node) { return NodeIdInline.hasInlineDatatype(node); }\n    public static Node extract(NodeId nodeId) { return NodeIdInline.extract(nodeId); }\n"
            },
            {
              "step": 35,
              "variableName": "Node node",
              "startLine": 116,
              "startColumn": 33,
              "endLine": 116,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "Node_URI",
              "code": "    }\n\n    /** Encode a node as an inline literal.  Return null if it can't be done */\n    public static NodeId inline(Node node) {\n        if ( node == null ) {\n            Log.warn(NodeId.class, \"Null node: \" + node);\n            return null;"
            },
            {
              "step": 36,
              "variableName": "\"Failed to process \"+node",
              "startLine": 133,
              "startColumn": 36,
              "endLine": 133,
              "endColumn": 61,
              "uri": "jena-jena-5.4.0/jena-tdb2/src/main/java/org/apache/jena/tdb2/store/NodeIdInline.java",
              "type": "",
              "code": "\n        try { return inline$(node); }\n        catch (Throwable th) {\n            Log.warn(NodeId.class, \"Failed to process \"+node);\n            return null;\n        }\n    }"
            }
          ],
          "label": "Yes"
        }
      ]
    }
  ],
  "537": [
    {
      "resultIndex": 0,
      "fileName": "schemagen.java",
      "flows": [
        {
          "codeFlowIndex": 0,
          "flow": [
            {
              "step": 0,
              "variableName": "insert",
              "startLine": 1985,
              "startColumn": 44,
              "endLine": 1985,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "                    for (RDFNode item : row) {\n                        replacement.append(\"(\");\n                        String insert = stringForNode(item.asNode(), context);\n                        replacement.append(insert);\n                        replacement.append(\") \");\n                    }\n                }"
            },
            {
              "step": 1,
              "variableName": "replacement",
              "startLine": 1985,
              "startColumn": 25,
              "endLine": 1985,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "                    for (RDFNode item : row) {\n                        replacement.append(\"(\");\n                        String insert = stringForNode(item.asNode(), context);\n                        replacement.append(insert);\n                        replacement.append(\") \");\n                    }\n                }"
            },
            {
              "step": 2,
              "variableName": "replacement",
              "startLine": 2006,
              "startColumn": 20,
              "endLine": 2006,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "                replacement.deleteCharAt(replacement.length() - 1);\n            }\n\n            return replacement.toString();\n        }\n\n        /**"
            },
            {
              "step": 3,
              "variableName": "replacement.toString()",
              "startLine": 2006,
              "startColumn": 20,
              "endLine": 2006,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "                replacement.deleteCharAt(replacement.length() - 1);\n            }\n\n            return replacement.toString();\n        }\n\n        /**"
            },
            {
              "step": 4,
              "variableName": "buildReplacement(targetVars.length, context)",
              "startLine": 1971,
              "startColumn": 34,
              "endLine": 1971,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            validateValuesSafeToInject(command, targetVars);\n\n            String target = createTarget();\n            String replacement = buildReplacement(targetVars.length, context);\n\n            return command.replaceAll(target, replacement);\n        }"
            },
            {
              "step": 5,
              "variableName": "replacement",
              "startLine": 1973,
              "startColumn": 47,
              "endLine": 1973,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            String target = createTarget();\n            String replacement = buildReplacement(targetVars.length, context);\n\n            return command.replaceAll(target, replacement);\n        }\n\n        private String buildReplacement(int targetVarCount, SerializationContext context) {"
            },
            {
              "step": 6,
              "variableName": "command.replaceAll(target, replacement)",
              "startLine": 1973,
              "startColumn": 20,
              "endLine": 1973,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            String target = createTarget();\n            String replacement = buildReplacement(targetVars.length, context);\n\n            return command.replaceAll(target, replacement);\n        }\n\n        private String buildReplacement(int targetVarCount, SerializationContext context) {"
            },
            {
              "step": 7,
              "variableName": "valueReplacement.apply(command, context)",
              "startLine": 1911,
              "startColumn": 23,
              "endLine": 1911,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "    private String applyValues(String command, SerializationContext context) {\n\n        for (ValueReplacement valueReplacement : valuesReplacements.values()) {\n            command = valueReplacement.apply(command, context);\n        }\n        return command;\n    }"
            },
            {
              "step": 8,
              "variableName": "command",
              "startLine": 1913,
              "startColumn": 16,
              "endLine": 1913,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        for (ValueReplacement valueReplacement : valuesReplacements.values()) {\n            command = valueReplacement.apply(command, context);\n        }\n        return command;\n    }\n\n    private static final String VALUES_KEYWORD = \"values\";"
            },
            {
              "step": 9,
              "variableName": "applyValues(command, context)",
              "startLine": 1410,
              "startColumn": 19,
              "endLine": 1410,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        }\n\n        // Inject Values Parameters\n        command = applyValues(command, context);\n\n        // Then inject Positional Parameters\n        // To do this we need to find the ? we will replace"
            },
            {
              "step": 10,
              "variableName": "command",
              "startLine": 1456,
              "startColumn": 25,
              "endLine": 1456,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            finalCmd.append('\\n');\n        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n"
            },
            {
              "step": 11,
              "variableName": "finalCmd",
              "startLine": 1456,
              "startColumn": 9,
              "endLine": 1456,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "            finalCmd.append('\\n');\n        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n"
            },
            {
              "step": 12,
              "variableName": "finalCmd",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "finalCmd.toString()",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 23,
              "endLine": 287,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 15,
              "variableName": "(ok) ? itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 16,
              "endLine": 288,
              "endColumn": 90,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "... : String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 16,
              "variableName": "n.toString()",
              "startLine": 2026,
              "startColumn": 91,
              "endLine": 2026,
              "endColumn": 103,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 17,
              "variableName": "(n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() )",
              "startLine": 2026,
              "startColumn": 20,
              "endLine": 2026,
              "endColumn": 105,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "... : String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 18,
              "variableName": "getOpt( option ).getStringValue( m_cmdLineArgs, m_root )",
              "startLine": 1773,
              "startColumn": 20,
              "endLine": 1773,
              "endColumn": 76,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        /** Answer the String value of the option or null */\n        protected String getStringValue( OPT option ) {\n            return getOpt( option ).getStringValue( m_cmdLineArgs, m_root );\n        }\n\n        /** Answer true if the given option has a resource value */"
            },
            {
              "step": 19,
              "variableName": "getStringValue( OPT.CLASSNAME_SUFFIX )",
              "startLine": 1947,
              "startColumn": 59,
              "endLine": 1947,
              "endColumn": 97,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        @Override\n        public boolean hasClassnameSuffixOption() { return hasValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public String getClassnameSuffixOption() { return getStringValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public boolean hasNoheaderOption() { return isTrue( OPT.NOHEADER ); }\n        @Override"
            },
            {
              "step": 20,
              "variableName": "m_options.getClassnameSuffixOption()",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        // optionally add name suffix\n        if (m_options.hasClassnameSuffixOption()) {\n            name = name + m_options.getClassnameSuffixOption();\n        }\n\n        // now we make the name into a legal Java identifier"
            },
            {
              "step": 21,
              "variableName": "name",
              "startLine": 555,
              "startColumn": 31,
              "endLine": 555,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        }\n\n        // now we make the name into a legal Java identifier\n        return asLegalJavaID( name, true );\n    }\n\n    /** Answer true if we are using ontology terms in this vocabulary */"
            },
            {
              "step": 22,
              "variableName": "String s",
              "startLine": 574,
              "startColumn": 37,
              "endLine": 574,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "    }\n\n    /** Converts to a legal Java identifier; capitalise first char if cap is true */\n    protected String asLegalJavaID( String s, boolean cap ) {\n        StringBuilder buf = new StringBuilder();\n        int i = 0;\n"
            },
            {
              "step": 23,
              "variableName": "\"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\"",
              "startLine": 583,
              "startColumn": 33,
              "endLine": 583,
              "endColumn": 125,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "",
              "code": "            for (; !Character.isJavaIdentifierStart( s.charAt( i )); i++) { /**/ }\n        }\n        catch (StringIndexOutOfBoundsException e) {\n            System.err.println( \"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\" );\n            return \"__\";\n        }\n        buf.append( cap ? Character.toUpperCase( s.charAt( i ) ) : s.charAt( i ) );"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 1,
          "flow": [
            {
              "step": 0,
              "variableName": "insert",
              "startLine": 1994,
              "startColumn": 44,
              "endLine": 1994,
              "endColumn": 50,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "                    replacement.append(\"(\");\n                    for (RDFNode item : row) {\n                        String insert = stringForNode(item.asNode(), context);\n                        replacement.append(insert);\n                        replacement.append(\" \");\n                    }\n                    replacement.deleteCharAt(replacement.length() - 1);"
            },
            {
              "step": 1,
              "variableName": "replacement",
              "startLine": 1994,
              "startColumn": 25,
              "endLine": 1994,
              "endColumn": 36,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "                    replacement.append(\"(\");\n                    for (RDFNode item : row) {\n                        String insert = stringForNode(item.asNode(), context);\n                        replacement.append(insert);\n                        replacement.append(\" \");\n                    }\n                    replacement.deleteCharAt(replacement.length() - 1);"
            },
            {
              "step": 2,
              "variableName": "replacement",
              "startLine": 2006,
              "startColumn": 20,
              "endLine": 2006,
              "endColumn": 31,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "                replacement.deleteCharAt(replacement.length() - 1);\n            }\n\n            return replacement.toString();\n        }\n\n        /**"
            },
            {
              "step": 3,
              "variableName": "replacement.toString()",
              "startLine": 2006,
              "startColumn": 20,
              "endLine": 2006,
              "endColumn": 42,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "                replacement.deleteCharAt(replacement.length() - 1);\n            }\n\n            return replacement.toString();\n        }\n\n        /**"
            },
            {
              "step": 4,
              "variableName": "buildReplacement(targetVars.length, context)",
              "startLine": 1971,
              "startColumn": 34,
              "endLine": 1971,
              "endColumn": 78,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            validateValuesSafeToInject(command, targetVars);\n\n            String target = createTarget();\n            String replacement = buildReplacement(targetVars.length, context);\n\n            return command.replaceAll(target, replacement);\n        }"
            },
            {
              "step": 5,
              "variableName": "replacement",
              "startLine": 1973,
              "startColumn": 47,
              "endLine": 1973,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            String target = createTarget();\n            String replacement = buildReplacement(targetVars.length, context);\n\n            return command.replaceAll(target, replacement);\n        }\n\n        private String buildReplacement(int targetVarCount, SerializationContext context) {"
            },
            {
              "step": 6,
              "variableName": "command.replaceAll(target, replacement)",
              "startLine": 1973,
              "startColumn": 20,
              "endLine": 1973,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            String target = createTarget();\n            String replacement = buildReplacement(targetVars.length, context);\n\n            return command.replaceAll(target, replacement);\n        }\n\n        private String buildReplacement(int targetVarCount, SerializationContext context) {"
            },
            {
              "step": 7,
              "variableName": "valueReplacement.apply(command, context)",
              "startLine": 1911,
              "startColumn": 23,
              "endLine": 1911,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "    private String applyValues(String command, SerializationContext context) {\n\n        for (ValueReplacement valueReplacement : valuesReplacements.values()) {\n            command = valueReplacement.apply(command, context);\n        }\n        return command;\n    }"
            },
            {
              "step": 8,
              "variableName": "command",
              "startLine": 1913,
              "startColumn": 16,
              "endLine": 1913,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        for (ValueReplacement valueReplacement : valuesReplacements.values()) {\n            command = valueReplacement.apply(command, context);\n        }\n        return command;\n    }\n\n    private static final String VALUES_KEYWORD = \"values\";"
            },
            {
              "step": 9,
              "variableName": "applyValues(command, context)",
              "startLine": 1410,
              "startColumn": 19,
              "endLine": 1410,
              "endColumn": 48,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        }\n\n        // Inject Values Parameters\n        command = applyValues(command, context);\n\n        // Then inject Positional Parameters\n        // To do this we need to find the ? we will replace"
            },
            {
              "step": 10,
              "variableName": "command",
              "startLine": 1456,
              "startColumn": 25,
              "endLine": 1456,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "            finalCmd.append('\\n');\n        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n"
            },
            {
              "step": 11,
              "variableName": "finalCmd",
              "startLine": 1456,
              "startColumn": 9,
              "endLine": 1456,
              "endColumn": 17,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "            finalCmd.append('\\n');\n        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n"
            },
            {
              "step": 12,
              "variableName": "finalCmd",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 13,
              "variableName": "finalCmd.toString()",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 14,
              "variableName": "itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 23,
              "endLine": 287,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 15,
              "variableName": "(ok) ? itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 16,
              "endLine": 288,
              "endColumn": 90,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "... : String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 16,
              "variableName": "n.toString()",
              "startLine": 2026,
              "startColumn": 91,
              "endLine": 2026,
              "endColumn": 103,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 17,
              "variableName": "(n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() )",
              "startLine": 2026,
              "startColumn": 20,
              "endLine": 2026,
              "endColumn": 105,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "... : String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 18,
              "variableName": "getOpt( option ).getStringValue( m_cmdLineArgs, m_root )",
              "startLine": 1773,
              "startColumn": 20,
              "endLine": 1773,
              "endColumn": 76,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        /** Answer the String value of the option or null */\n        protected String getStringValue( OPT option ) {\n            return getOpt( option ).getStringValue( m_cmdLineArgs, m_root );\n        }\n\n        /** Answer true if the given option has a resource value */"
            },
            {
              "step": 19,
              "variableName": "getStringValue( OPT.CLASSNAME_SUFFIX )",
              "startLine": 1947,
              "startColumn": 59,
              "endLine": 1947,
              "endColumn": 97,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        @Override\n        public boolean hasClassnameSuffixOption() { return hasValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public String getClassnameSuffixOption() { return getStringValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public boolean hasNoheaderOption() { return isTrue( OPT.NOHEADER ); }\n        @Override"
            },
            {
              "step": 20,
              "variableName": "m_options.getClassnameSuffixOption()",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        // optionally add name suffix\n        if (m_options.hasClassnameSuffixOption()) {\n            name = name + m_options.getClassnameSuffixOption();\n        }\n\n        // now we make the name into a legal Java identifier"
            },
            {
              "step": 21,
              "variableName": "name",
              "startLine": 555,
              "startColumn": 31,
              "endLine": 555,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        }\n\n        // now we make the name into a legal Java identifier\n        return asLegalJavaID( name, true );\n    }\n\n    /** Answer true if we are using ontology terms in this vocabulary */"
            },
            {
              "step": 22,
              "variableName": "String s",
              "startLine": 574,
              "startColumn": 37,
              "endLine": 574,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "    }\n\n    /** Converts to a legal Java identifier; capitalise first char if cap is true */\n    protected String asLegalJavaID( String s, boolean cap ) {\n        StringBuilder buf = new StringBuilder();\n        int i = 0;\n"
            },
            {
              "step": 23,
              "variableName": "\"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\"",
              "startLine": 583,
              "startColumn": 33,
              "endLine": 583,
              "endColumn": 125,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "",
              "code": "            for (; !Character.isJavaIdentifierStart( s.charAt( i )); i++) { /**/ }\n        }\n        catch (StringIndexOutOfBoundsException e) {\n            System.err.println( \"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\" );\n            return \"__\";\n        }\n        buf.append( cap ? Character.toUpperCase( s.charAt( i ) ) : s.charAt( i ) );"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 2,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 433,
              "startColumn": 28,
              "endLine": 433,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "\n    @Override\n    public String query() {\n        if ( hasQuery() && query == null )\n            query = part(iriStr, query0, query1);\n        return query;\n    }"
            },
            {
              "step": 1,
              "variableName": "query",
              "startLine": 435,
              "startColumn": 16,
              "endLine": 435,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    public String query() {\n        if ( hasQuery() && query == null )\n            query = part(iriStr, query0, query1);\n        return query;\n    }\n\n    @Override"
            },
            {
              "step": 2,
              "variableName": "query()",
              "startLine": 763,
              "startColumn": 55,
              "endLine": 763,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "\n    /** RFC 3986 : 5.3. Component Recomposition */\n    public String rebuild() {\n        return rebuild(scheme(), authority(), path(), query(), fragment());\n    }\n\n    // 5.3. Component Recomposition"
            },
            {
              "step": 3,
              "variableName": "String query",
              "startLine": 767,
              "startColumn": 81,
              "endLine": 767,
              "endColumn": 93,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    }\n\n    // 5.3. Component Recomposition\n    private static String rebuild(String scheme, String authority, String path, String query, String fragment) {\n        StringBuilder result = new StringBuilder();\n        if ( scheme != null ) {\n            result.append(scheme);"
            },
            {
              "step": 4,
              "variableName": "query",
              "startLine": 784,
              "startColumn": 27,
              "endLine": 784,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "\n        if ( query != null ) {\n            result.append(\"?\");\n            result.append(query);\n        }\n\n        if ( fragment != null ) {"
            },
            {
              "step": 5,
              "variableName": "result",
              "startLine": 784,
              "startColumn": 13,
              "endLine": 784,
              "endColumn": 19,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "StringBuilder",
              "code": "\n        if ( query != null ) {\n            result.append(\"?\");\n            result.append(query);\n        }\n\n        if ( fragment != null ) {"
            },
            {
              "step": 6,
              "variableName": "result",
              "startLine": 791,
              "startColumn": 16,
              "endLine": 791,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "StringBuilder",
              "code": "            result.append(\"#\");\n            result.append(fragment);\n        }\n        return result.toString();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "result.toString()",
              "startLine": 791,
              "startColumn": 16,
              "endLine": 791,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "            result.append(\"#\");\n            result.append(fragment);\n        }\n        return result.toString();\n    }\n\n    @Override"
            },
            {
              "step": 8,
              "variableName": "rebuild(scheme(), authority(), path(), query(), fragment())",
              "startLine": 763,
              "startColumn": 16,
              "endLine": 763,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "\n    /** RFC 3986 : 5.3. Component Recomposition */\n    public String rebuild() {\n        return rebuild(scheme(), authority(), path(), query(), fragment());\n    }\n\n    // 5.3. Component Recomposition"
            },
            {
              "step": 9,
              "variableName": "rebuild()",
              "startLine": 270,
              "startColumn": 16,
              "endLine": 270,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    public final String str() {\n        if ( iriStr != null )\n            return iriStr;\n        return rebuild();\n    }\n\n    /**"
            },
            {
              "step": 10,
              "variableName": "str()",
              "startLine": 339,
              "startColumn": 16,
              "endLine": 339,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    @Override\n    public String toString() {\n        // Human readable form - may be overridden.\n        return str();\n    }\n\n    @Override"
            },
            {
              "step": 11,
              "variableName": "iri.toString()",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "String",
              "code": "    public static class IRIx3986 extends IRIx {\n        private final IRI3986 iri;\n        private IRIx3986(String iriStr, IRI3986 iri) {\n            super(iri.toString());\n            this.iri = iri;\n        }\n"
            },
            {
              "step": 12,
              "variableName": "super(iri.toString());",
              "startLine": 42,
              "startColumn": 13,
              "endLine": 42,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "    public static class IRIx3986 extends IRIx {\n        private final IRI3986 iri;\n        private IRIx3986(String iriStr, IRI3986 iri) {\n            super(iri.toString());\n            this.iri = iri;\n        }\n"
            },
            {
              "step": 13,
              "variableName": "new IRIProvider3986.IRIx3986(iriStr, iri)",
              "startLine": 161,
              "startColumn": 16,
              "endLine": 161,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "\n    /** Create a new IRIx from an {@link IRI3986}. */\n    private static IRIx newIRIx(String iriStr, IRI3986 iri) {\n        return new IRIProvider3986.IRIx3986(iriStr, iri);\n    }\n\n    @Override"
            },
            {
              "step": 14,
              "variableName": "newIRIx(iri.toString(), iri)",
              "startLine": 156,
              "startColumn": 16,
              "endLine": 156,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "\n    /** Create a new IRIx from an {@link IRI3986}. */\n    private static IRIx newIRIx(IRI3986 iri) {\n        return newIRIx(iri.toString(), iri);\n    }\n\n    /** Create a new IRIx from an {@link IRI3986}. */"
            },
            {
              "step": 15,
              "variableName": "newIRIx(iri2)",
              "startLine": 104,
              "startColumn": 46,
              "endLine": 104,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "            IRIx3986 iriOther = (IRIx3986)other;\n            IRI3986 iri2 = this.iri.relativize(iriOther.iri);\n            //violations(iri2);\n            return ( iri2 == null ) ? null : newIRIx(iri2);\n        }\n\n        @Override"
            },
            {
              "step": 16,
              "variableName": "( iri2 == null ) ? null : newIRIx(iri2)",
              "startLine": 104,
              "startColumn": 20,
              "endLine": 104,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "... : IRIx3986 [iriString] : String",
              "code": "            IRIx3986 iriOther = (IRIx3986)other;\n            IRI3986 iri2 = this.iri.relativize(iriOther.iri);\n            //violations(iri2);\n            return ( iri2 == null ) ? null : newIRIx(iri2);\n        }\n\n        @Override"
            },
            {
              "step": 17,
              "variableName": "baseIRI.relativize(relInput)",
              "startLine": 440,
              "startColumn": 32,
              "endLine": 440,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "            if ( baseIRI == null )\n                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;"
            },
            {
              "step": 18,
              "variableName": "relativized",
              "startLine": 441,
              "startColumn": 49,
              "endLine": 441,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;\n        }"
            },
            {
              "step": 19,
              "variableName": "toString",
              "startLine": 245,
              "startColumn": 19,
              "endLine": 245,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "     * Use {@link #str()} to get a string form that represents the IRI in the RFC grammar.\n     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}"
            },
            {
              "step": 20,
              "variableName": "iriString",
              "startLine": 246,
              "startColumn": 16,
              "endLine": 246,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}\n"
            },
            {
              "step": 21,
              "variableName": "iriString",
              "startLine": 246,
              "startColumn": 16,
              "endLine": 246,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "String",
              "code": "     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}\n"
            },
            {
              "step": 22,
              "variableName": "relativized.toString()",
              "startLine": 441,
              "startColumn": 49,
              "endLine": 441,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;\n        }"
            },
            {
              "step": 23,
              "variableName": "(relativized==null) ? null : relativized.toString()",
              "startLine": 441,
              "startColumn": 20,
              "endLine": 441,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "... : String",
              "code": "                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;\n        }"
            },
            {
              "step": 24,
              "variableName": "abbrevByBase(uri, base)",
              "startLine": 423,
              "startColumn": 24,
              "endLine": 423,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "\n        }\n        if ( base != null ) {\n            String x = abbrevByBase(uri, base);\n            if ( x != null ) {\n                result.append(\"<\");\n                result.append(x);"
            },
            {
              "step": 25,
              "variableName": "x",
              "startLine": 426,
              "startColumn": 31,
              "endLine": 426,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "            String x = abbrevByBase(uri, base);\n            if ( x != null ) {\n                result.append(\"<\");\n                result.append(x);\n                result.append(\">\");\n                return;\n            }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 426,
              "startColumn": 17,
              "endLine": 426,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "StringBuilder",
              "code": "            String x = abbrevByBase(uri, base);\n            if ( x != null ) {\n                result.append(\"<\");\n                result.append(x);\n                result.append(\">\");\n                return;\n            }"
            },
            {
              "step": 27,
              "variableName": "result",
              "startLine": 409,
              "startColumn": 22,
              "endLine": 409,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "StringBuilder",
              "code": "\n    public static String stringForURI(String uri, String base, PrefixMapping mapping) {\n        StringBuilder result = new StringBuilder();\n        stringForURI(result, uri, base, mapping);\n        return result.toString();\n    }\n"
            },
            {
              "step": 28,
              "variableName": "result",
              "startLine": 410,
              "startColumn": 16,
              "endLine": 410,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "StringBuilder",
              "code": "    public static String stringForURI(String uri, String base, PrefixMapping mapping) {\n        StringBuilder result = new StringBuilder();\n        stringForURI(result, uri, base, mapping);\n        return result.toString();\n    }\n\n    public static void stringForURI(StringBuilder result, String uri, String base, PrefixMapping mapping) {"
            },
            {
              "step": 29,
              "variableName": "result.toString()",
              "startLine": 410,
              "startColumn": 16,
              "endLine": 410,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "    public static String stringForURI(String uri, String base, PrefixMapping mapping) {\n        StringBuilder result = new StringBuilder();\n        stringForURI(result, uri, base, mapping);\n        return result.toString();\n    }\n\n    public static void stringForURI(StringBuilder result, String uri, String base, PrefixMapping mapping) {"
            },
            {
              "step": 30,
              "variableName": "FmtUtils.stringForURI(this.baseUri, null, null)",
              "startLine": 1442,
              "startColumn": 29,
              "endLine": 1442,
              "endColumn": 76,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        // Add BASE declaration\n        if (this.baseUri != null) {\n            finalCmd.append(\"BASE \");\n            finalCmd.append(FmtUtils.stringForURI(this.baseUri, null, null));\n            finalCmd.append('\\n');\n        }\n"
            },
            {
              "step": 31,
              "variableName": "finalCmd",
              "startLine": 1442,
              "startColumn": 13,
              "endLine": 1442,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "        // Add BASE declaration\n        if (this.baseUri != null) {\n            finalCmd.append(\"BASE \");\n            finalCmd.append(FmtUtils.stringForURI(this.baseUri, null, null));\n            finalCmd.append('\\n');\n        }\n"
            },
            {
              "step": 32,
              "variableName": "finalCmd",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "finalCmd.toString()",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 34,
              "variableName": "itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 23,
              "endLine": 287,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 35,
              "variableName": "(ok) ? itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 16,
              "endLine": 288,
              "endColumn": 90,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "... : String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 36,
              "variableName": "n.toString()",
              "startLine": 2026,
              "startColumn": 91,
              "endLine": 2026,
              "endColumn": 103,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 37,
              "variableName": "(n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() )",
              "startLine": 2026,
              "startColumn": 20,
              "endLine": 2026,
              "endColumn": 105,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "... : String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 38,
              "variableName": "getOpt( option ).getStringValue( m_cmdLineArgs, m_root )",
              "startLine": 1773,
              "startColumn": 20,
              "endLine": 1773,
              "endColumn": 76,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        /** Answer the String value of the option or null */\n        protected String getStringValue( OPT option ) {\n            return getOpt( option ).getStringValue( m_cmdLineArgs, m_root );\n        }\n\n        /** Answer true if the given option has a resource value */"
            },
            {
              "step": 39,
              "variableName": "getStringValue( OPT.CLASSNAME_SUFFIX )",
              "startLine": 1947,
              "startColumn": 59,
              "endLine": 1947,
              "endColumn": 97,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        @Override\n        public boolean hasClassnameSuffixOption() { return hasValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public String getClassnameSuffixOption() { return getStringValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public boolean hasNoheaderOption() { return isTrue( OPT.NOHEADER ); }\n        @Override"
            },
            {
              "step": 40,
              "variableName": "m_options.getClassnameSuffixOption()",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        // optionally add name suffix\n        if (m_options.hasClassnameSuffixOption()) {\n            name = name + m_options.getClassnameSuffixOption();\n        }\n\n        // now we make the name into a legal Java identifier"
            },
            {
              "step": 41,
              "variableName": "name",
              "startLine": 555,
              "startColumn": 31,
              "endLine": 555,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        }\n\n        // now we make the name into a legal Java identifier\n        return asLegalJavaID( name, true );\n    }\n\n    /** Answer true if we are using ontology terms in this vocabulary */"
            },
            {
              "step": 42,
              "variableName": "String s",
              "startLine": 574,
              "startColumn": 37,
              "endLine": 574,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "    }\n\n    /** Converts to a legal Java identifier; capitalise first char if cap is true */\n    protected String asLegalJavaID( String s, boolean cap ) {\n        StringBuilder buf = new StringBuilder();\n        int i = 0;\n"
            },
            {
              "step": 43,
              "variableName": "\"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\"",
              "startLine": 583,
              "startColumn": 33,
              "endLine": 583,
              "endColumn": 125,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "",
              "code": "            for (; !Character.isJavaIdentifierStart( s.charAt( i )); i++) { /**/ }\n        }\n        catch (StringIndexOutOfBoundsException e) {\n            System.err.println( \"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\" );\n            return \"__\";\n        }\n        buf.append( cap ? Character.toUpperCase( s.charAt( i ) ) : s.charAt( i ) );"
            }
          ],
          "label": "No"
        },
        {
          "codeFlowIndex": 3,
          "flow": [
            {
              "step": 0,
              "variableName": "query",
              "startLine": 435,
              "startColumn": 16,
              "endLine": 435,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    public String query() {\n        if ( hasQuery() && query == null )\n            query = part(iriStr, query0, query1);\n        return query;\n    }\n\n    @Override"
            },
            {
              "step": 1,
              "variableName": "query()",
              "startLine": 763,
              "startColumn": 55,
              "endLine": 763,
              "endColumn": 62,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "\n    /** RFC 3986 : 5.3. Component Recomposition */\n    public String rebuild() {\n        return rebuild(scheme(), authority(), path(), query(), fragment());\n    }\n\n    // 5.3. Component Recomposition"
            },
            {
              "step": 2,
              "variableName": "String query",
              "startLine": 767,
              "startColumn": 81,
              "endLine": 767,
              "endColumn": 93,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    }\n\n    // 5.3. Component Recomposition\n    private static String rebuild(String scheme, String authority, String path, String query, String fragment) {\n        StringBuilder result = new StringBuilder();\n        if ( scheme != null ) {\n            result.append(scheme);"
            },
            {
              "step": 3,
              "variableName": "query",
              "startLine": 784,
              "startColumn": 27,
              "endLine": 784,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "\n        if ( query != null ) {\n            result.append(\"?\");\n            result.append(query);\n        }\n\n        if ( fragment != null ) {"
            },
            {
              "step": 4,
              "variableName": "result",
              "startLine": 784,
              "startColumn": 13,
              "endLine": 784,
              "endColumn": 19,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "StringBuilder",
              "code": "\n        if ( query != null ) {\n            result.append(\"?\");\n            result.append(query);\n        }\n\n        if ( fragment != null ) {"
            },
            {
              "step": 5,
              "variableName": "result",
              "startLine": 791,
              "startColumn": 16,
              "endLine": 791,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "StringBuilder",
              "code": "            result.append(\"#\");\n            result.append(fragment);\n        }\n        return result.toString();\n    }\n\n    @Override"
            },
            {
              "step": 6,
              "variableName": "result.toString()",
              "startLine": 791,
              "startColumn": 16,
              "endLine": 791,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "            result.append(\"#\");\n            result.append(fragment);\n        }\n        return result.toString();\n    }\n\n    @Override"
            },
            {
              "step": 7,
              "variableName": "rebuild(scheme(), authority(), path(), query(), fragment())",
              "startLine": 763,
              "startColumn": 16,
              "endLine": 763,
              "endColumn": 75,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "\n    /** RFC 3986 : 5.3. Component Recomposition */\n    public String rebuild() {\n        return rebuild(scheme(), authority(), path(), query(), fragment());\n    }\n\n    // 5.3. Component Recomposition"
            },
            {
              "step": 8,
              "variableName": "rebuild()",
              "startLine": 270,
              "startColumn": 16,
              "endLine": 270,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    public final String str() {\n        if ( iriStr != null )\n            return iriStr;\n        return rebuild();\n    }\n\n    /**"
            },
            {
              "step": 9,
              "variableName": "str()",
              "startLine": 339,
              "startColumn": 16,
              "endLine": 339,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-iri3986/src/main/java/org/apache/jena/rfc3986/IRI3986.java",
              "type": "String",
              "code": "    @Override\n    public String toString() {\n        // Human readable form - may be overridden.\n        return str();\n    }\n\n    @Override"
            },
            {
              "step": 10,
              "variableName": "iri.toString()",
              "startLine": 42,
              "startColumn": 19,
              "endLine": 42,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "String",
              "code": "    public static class IRIx3986 extends IRIx {\n        private final IRI3986 iri;\n        private IRIx3986(String iriStr, IRI3986 iri) {\n            super(iri.toString());\n            this.iri = iri;\n        }\n"
            },
            {
              "step": 11,
              "variableName": "super(iri.toString());",
              "startLine": 42,
              "startColumn": 13,
              "endLine": 42,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "    public static class IRIx3986 extends IRIx {\n        private final IRI3986 iri;\n        private IRIx3986(String iriStr, IRI3986 iri) {\n            super(iri.toString());\n            this.iri = iri;\n        }\n"
            },
            {
              "step": 12,
              "variableName": "new IRIProvider3986.IRIx3986(iriStr, iri)",
              "startLine": 161,
              "startColumn": 16,
              "endLine": 161,
              "endColumn": 57,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "\n    /** Create a new IRIx from an {@link IRI3986}. */\n    private static IRIx newIRIx(String iriStr, IRI3986 iri) {\n        return new IRIProvider3986.IRIx3986(iriStr, iri);\n    }\n\n    @Override"
            },
            {
              "step": 13,
              "variableName": "newIRIx(iri.toString(), iri)",
              "startLine": 156,
              "startColumn": 16,
              "endLine": 156,
              "endColumn": 44,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "\n    /** Create a new IRIx from an {@link IRI3986}. */\n    private static IRIx newIRIx(IRI3986 iri) {\n        return newIRIx(iri.toString(), iri);\n    }\n\n    /** Create a new IRIx from an {@link IRI3986}. */"
            },
            {
              "step": 14,
              "variableName": "newIRIx(iri2)",
              "startLine": 104,
              "startColumn": 46,
              "endLine": 104,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "            IRIx3986 iriOther = (IRIx3986)other;\n            IRI3986 iri2 = this.iri.relativize(iriOther.iri);\n            //violations(iri2);\n            return ( iri2 == null ) ? null : newIRIx(iri2);\n        }\n\n        @Override"
            },
            {
              "step": 15,
              "variableName": "( iri2 == null ) ? null : newIRIx(iri2)",
              "startLine": 104,
              "startColumn": 20,
              "endLine": 104,
              "endColumn": 59,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/iri3986/provider/IRIProvider3986.java",
              "type": "... : IRIx3986 [iriString] : String",
              "code": "            IRIx3986 iriOther = (IRIx3986)other;\n            IRI3986 iri2 = this.iri.relativize(iriOther.iri);\n            //violations(iri2);\n            return ( iri2 == null ) ? null : newIRIx(iri2);\n        }\n\n        @Override"
            },
            {
              "step": 16,
              "variableName": "baseIRI.relativize(relInput)",
              "startLine": 440,
              "startColumn": 32,
              "endLine": 440,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "            if ( baseIRI == null )\n                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;"
            },
            {
              "step": 17,
              "variableName": "relativized",
              "startLine": 441,
              "startColumn": 49,
              "endLine": 441,
              "endColumn": 60,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;\n        }"
            },
            {
              "step": 18,
              "variableName": "toString",
              "startLine": 245,
              "startColumn": 19,
              "endLine": 245,
              "endColumn": 27,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "     * Use {@link #str()} to get a string form that represents the IRI in the RFC grammar.\n     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}"
            },
            {
              "step": 19,
              "variableName": "iriString",
              "startLine": 246,
              "startColumn": 16,
              "endLine": 246,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "IRIx3986 [iriString] : String",
              "code": "     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}\n"
            },
            {
              "step": 20,
              "variableName": "iriString",
              "startLine": 246,
              "startColumn": 16,
              "endLine": 246,
              "endColumn": 25,
              "uri": "jena-jena-5.4.0/jena-core/src/main/java/org/apache/jena/irix/IRIx.java",
              "type": "String",
              "code": "     */\n    @Override\n    public String toString() {\n        return iriString;\n    }\n}\n"
            },
            {
              "step": 21,
              "variableName": "relativized.toString()",
              "startLine": 441,
              "startColumn": 49,
              "endLine": 441,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;\n        }"
            },
            {
              "step": 22,
              "variableName": "(relativized==null) ? null : relativized.toString()",
              "startLine": 441,
              "startColumn": 20,
              "endLine": 441,
              "endColumn": 71,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "... : String",
              "code": "                return null;\n            IRIx relInput = IRIx.create(uriStr);\n            IRIx relativized = baseIRI.relativize(relInput);\n            return (relativized==null) ? null : relativized.toString();\n        } catch (IRIException ex) {\n            return null;\n        }"
            },
            {
              "step": 23,
              "variableName": "abbrevByBase(uri, base)",
              "startLine": 423,
              "startColumn": 24,
              "endLine": 423,
              "endColumn": 47,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "\n        }\n        if ( base != null ) {\n            String x = abbrevByBase(uri, base);\n            if ( x != null ) {\n                result.append(\"<\");\n                result.append(x);"
            },
            {
              "step": 24,
              "variableName": "x",
              "startLine": 426,
              "startColumn": 31,
              "endLine": 426,
              "endColumn": 32,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "            String x = abbrevByBase(uri, base);\n            if ( x != null ) {\n                result.append(\"<\");\n                result.append(x);\n                result.append(\">\");\n                return;\n            }"
            },
            {
              "step": 25,
              "variableName": "result",
              "startLine": 426,
              "startColumn": 17,
              "endLine": 426,
              "endColumn": 23,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "StringBuilder",
              "code": "            String x = abbrevByBase(uri, base);\n            if ( x != null ) {\n                result.append(\"<\");\n                result.append(x);\n                result.append(\">\");\n                return;\n            }"
            },
            {
              "step": 26,
              "variableName": "result",
              "startLine": 409,
              "startColumn": 22,
              "endLine": 409,
              "endColumn": 28,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "StringBuilder",
              "code": "\n    public static String stringForURI(String uri, String base, PrefixMapping mapping) {\n        StringBuilder result = new StringBuilder();\n        stringForURI(result, uri, base, mapping);\n        return result.toString();\n    }\n"
            },
            {
              "step": 27,
              "variableName": "result",
              "startLine": 410,
              "startColumn": 16,
              "endLine": 410,
              "endColumn": 22,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "StringBuilder",
              "code": "    public static String stringForURI(String uri, String base, PrefixMapping mapping) {\n        StringBuilder result = new StringBuilder();\n        stringForURI(result, uri, base, mapping);\n        return result.toString();\n    }\n\n    public static void stringForURI(StringBuilder result, String uri, String base, PrefixMapping mapping) {"
            },
            {
              "step": 28,
              "variableName": "result.toString()",
              "startLine": 410,
              "startColumn": 16,
              "endLine": 410,
              "endColumn": 33,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/sparql/util/FmtUtils.java",
              "type": "String",
              "code": "    public static String stringForURI(String uri, String base, PrefixMapping mapping) {\n        StringBuilder result = new StringBuilder();\n        stringForURI(result, uri, base, mapping);\n        return result.toString();\n    }\n\n    public static void stringForURI(StringBuilder result, String uri, String base, PrefixMapping mapping) {"
            },
            {
              "step": 29,
              "variableName": "FmtUtils.stringForURI(this.baseUri, null, null)",
              "startLine": 1442,
              "startColumn": 29,
              "endLine": 1442,
              "endColumn": 76,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        // Add BASE declaration\n        if (this.baseUri != null) {\n            finalCmd.append(\"BASE \");\n            finalCmd.append(FmtUtils.stringForURI(this.baseUri, null, null));\n            finalCmd.append('\\n');\n        }\n"
            },
            {
              "step": 30,
              "variableName": "finalCmd",
              "startLine": 1442,
              "startColumn": 13,
              "endLine": 1442,
              "endColumn": 21,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "        // Add BASE declaration\n        if (this.baseUri != null) {\n            finalCmd.append(\"BASE \");\n            finalCmd.append(FmtUtils.stringForURI(this.baseUri, null, null));\n            finalCmd.append('\\n');\n        }\n"
            },
            {
              "step": 31,
              "variableName": "finalCmd",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 24,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "StringBuilder",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 32,
              "variableName": "finalCmd.toString()",
              "startLine": 1457,
              "startColumn": 16,
              "endLine": 1457,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-arq/src/main/java/org/apache/jena/query/ParameterizedSparqlString.java",
              "type": "String",
              "code": "        }\n\n        finalCmd.append(command);\n        return finalCmd.toString();\n    }\n\n    /**"
            },
            {
              "step": 33,
              "variableName": "itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 23,
              "endLine": 287,
              "endColumn": 58,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 34,
              "variableName": "(ok) ? itemHolder.getBaseItem().toString()",
              "startLine": 287,
              "startColumn": 16,
              "endLine": 288,
              "endColumn": 90,
              "uri": "jena-jena-5.4.0/jena-permissions/src/main/java/org/apache/jena/permissions/impl/SecuredItemImpl.java",
              "type": "... : String",
              "code": "                ok = canRead(((FrontsTriple) o).asTriple());\n            }\n        }\n        return (ok) ? itemHolder.getBaseItem().toString()\n                : String.format(\"SecuredItem[0x%X]\", itemHolder.getBaseItem().hashCode());\n    }\n"
            },
            {
              "step": 35,
              "variableName": "n.toString()",
              "startLine": 2026,
              "startColumn": 91,
              "endLine": 2026,
              "endColumn": 103,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 36,
              "variableName": "(n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() )",
              "startLine": 2026,
              "startColumn": 20,
              "endLine": 2026,
              "endColumn": 105,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "... : String",
              "code": "         */\n        protected String getStringValue( List<String> cmdLineArgs, Resource confRoot ) {\n            RDFNode n = getValue( cmdLineArgs, confRoot );\n            return (n == null) ? null : (n.isLiteral() ? n.asLiteral().getLexicalForm() : n.toString() );\n        }\n\n        /**"
            },
            {
              "step": 37,
              "variableName": "getOpt( option ).getStringValue( m_cmdLineArgs, m_root )",
              "startLine": 1773,
              "startColumn": 20,
              "endLine": 1773,
              "endColumn": 76,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        /** Answer the String value of the option or null */\n        protected String getStringValue( OPT option ) {\n            return getOpt( option ).getStringValue( m_cmdLineArgs, m_root );\n        }\n\n        /** Answer true if the given option has a resource value */"
            },
            {
              "step": 38,
              "variableName": "getStringValue( OPT.CLASSNAME_SUFFIX )",
              "startLine": 1947,
              "startColumn": 59,
              "endLine": 1947,
              "endColumn": 97,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        @Override\n        public boolean hasClassnameSuffixOption() { return hasValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public String getClassnameSuffixOption() { return getStringValue( OPT.CLASSNAME_SUFFIX ); }\n        @Override\n        public boolean hasNoheaderOption() { return isTrue( OPT.NOHEADER ); }\n        @Override"
            },
            {
              "step": 39,
              "variableName": "m_options.getClassnameSuffixOption()",
              "startLine": 551,
              "startColumn": 27,
              "endLine": 551,
              "endColumn": 63,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "\n        // optionally add name suffix\n        if (m_options.hasClassnameSuffixOption()) {\n            name = name + m_options.getClassnameSuffixOption();\n        }\n\n        // now we make the name into a legal Java identifier"
            },
            {
              "step": 40,
              "variableName": "name",
              "startLine": 555,
              "startColumn": 31,
              "endLine": 555,
              "endColumn": 35,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "        }\n\n        // now we make the name into a legal Java identifier\n        return asLegalJavaID( name, true );\n    }\n\n    /** Answer true if we are using ontology terms in this vocabulary */"
            },
            {
              "step": 41,
              "variableName": "String s",
              "startLine": 574,
              "startColumn": 37,
              "endLine": 574,
              "endColumn": 45,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "String",
              "code": "    }\n\n    /** Converts to a legal Java identifier; capitalise first char if cap is true */\n    protected String asLegalJavaID( String s, boolean cap ) {\n        StringBuilder buf = new StringBuilder();\n        int i = 0;\n"
            },
            {
              "step": 42,
              "variableName": "\"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\"",
              "startLine": 583,
              "startColumn": 33,
              "endLine": 583,
              "endColumn": 125,
              "uri": "jena-jena-5.4.0/jena-cmds/src/main/java/jena/schemagen.java",
              "type": "",
              "code": "            for (; !Character.isJavaIdentifierStart( s.charAt( i )); i++) { /**/ }\n        }\n        catch (StringIndexOutOfBoundsException e) {\n            System.err.println( \"Could not identify legal Java identifier start character in '\" + s + \"', replacing with __\" );\n            return \"__\";\n        }\n        buf.append( cap ? Character.toUpperCase( s.charAt( i ) ) : s.charAt( i ) );"
            }
          ],
          "label": "No"
        }
      ]
    }
  ]
}